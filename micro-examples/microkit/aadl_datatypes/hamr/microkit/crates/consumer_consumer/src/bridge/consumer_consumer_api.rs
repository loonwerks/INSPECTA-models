// Do not edit this file as it will be overwritten if codegen is rerun

use vstd::prelude::*;
use data::*;
use super::extern_c_api as extern_api;

verus! {
  pub trait consumer_consumer_Api {}

  pub trait consumer_consumer_Put_Api: consumer_consumer_Api {
  }

  pub trait consumer_consumer_Get_Api: consumer_consumer_Api {
    #[verifier::external_body]
    fn unverified_get_myBoolean(
      &mut self,
      value: &Ghost<Option<bool>>) -> (res : Option<bool>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myBoolean();
    }

    #[verifier::external_body]
    fn unverified_get_myCharacter(
      &mut self,
      value: &Ghost<Option<u8>>) -> (res : Option<u8>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myCharacter();
    }

    #[verifier::external_body]
    fn unverified_get_myString(
      &mut self,
      value: &Ghost<Option<Base_Types::String>>) -> (res : Option<Base_Types::String>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myString();
    }

    #[verifier::external_body]
    fn unverified_get_myInt8(
      &mut self,
      value: &Ghost<Option<i8>>) -> (res : Option<i8>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myInt8();
    }

    #[verifier::external_body]
    fn unverified_get_myInt16(
      &mut self,
      value: &Ghost<Option<i16>>) -> (res : Option<i16>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myInt16();
    }

    #[verifier::external_body]
    fn unverified_get_myInt32(
      &mut self,
      value: &Ghost<Option<i32>>) -> (res : Option<i32>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myInt32();
    }

    #[verifier::external_body]
    fn unverified_get_myInt64(
      &mut self,
      value: &Ghost<Option<i64>>) -> (res : Option<i64>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myInt64();
    }

    #[verifier::external_body]
    fn unverified_get_myUInt8(
      &mut self,
      value: &Ghost<Option<u8>>) -> (res : Option<u8>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myUInt8();
    }

    #[verifier::external_body]
    fn unverified_get_myUInt16(
      &mut self,
      value: &Ghost<Option<u16>>) -> (res : Option<u16>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myUInt16();
    }

    #[verifier::external_body]
    fn unverified_get_myUInt32(
      &mut self,
      value: &Ghost<Option<u32>>) -> (res : Option<u32>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myUInt32();
    }

    #[verifier::external_body]
    fn unverified_get_myUInt64(
      &mut self,
      value: &Ghost<Option<u64>>) -> (res : Option<u64>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myUInt64();
    }

    #[verifier::external_body]
    fn unverified_get_myFloat32(
      &mut self,
      value: &Ghost<Option<f32>>) -> (res : Option<f32>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myFloat32();
    }

    #[verifier::external_body]
    fn unverified_get_myFloat64(
      &mut self,
      value: &Ghost<Option<f64>>) -> (res : Option<f64>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myFloat64();
    }

    #[verifier::external_body]
    fn unverified_get_myEnum(
      &mut self,
      value: &Ghost<Option<Aadl_Datatypes::MyEnum>>) -> (res : Option<Aadl_Datatypes::MyEnum>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myEnum();
    }

    #[verifier::external_body]
    fn unverified_get_myStruct(
      &mut self,
      value: &Ghost<Option<Aadl_Datatypes::MyStruct_i>>) -> (res : Option<Aadl_Datatypes::MyStruct_i>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myStruct();
    }

    #[verifier::external_body]
    fn unverified_get_myArray1(
      &mut self,
      value: &Ghost<Option<Aadl_Datatypes::MyArrayOneDim>>) -> (res : Option<Aadl_Datatypes::MyArrayOneDim>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_myArray1();
    }
  }

  pub trait consumer_consumer_Full_Api: consumer_consumer_Put_Api + consumer_consumer_Get_Api {}

  pub struct consumer_consumer_Application_Api<API: consumer_consumer_Api> {
    pub api: API,

    pub ghost myBoolean: Option<bool>,
    pub ghost myCharacter: Option<u8>,
    pub ghost myString: Option<Base_Types::String>,
    pub ghost myInt8: Option<i8>,
    pub ghost myInt16: Option<i16>,
    pub ghost myInt32: Option<i32>,
    pub ghost myInt64: Option<i64>,
    pub ghost myUInt8: Option<u8>,
    pub ghost myUInt16: Option<u16>,
    pub ghost myUInt32: Option<u32>,
    pub ghost myUInt64: Option<u64>,
    pub ghost myFloat32: Option<f32>,
    pub ghost myFloat64: Option<f64>,
    pub ghost myEnum: Option<Aadl_Datatypes::MyEnum>,
    pub ghost myStruct: Option<Aadl_Datatypes::MyStruct_i>,
    pub ghost myArray1: Option<Aadl_Datatypes::MyArrayOneDim>
  }

  impl<API: consumer_consumer_Put_Api> consumer_consumer_Application_Api<API> {
  }

  impl<API: consumer_consumer_Get_Api> consumer_consumer_Application_Api<API> {
    pub fn get_myBoolean(&mut self) -> (res : Option<bool>)
      ensures
        old(self).myBoolean == self.myBoolean,
        res == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myBoolean(&Ghost(self.myBoolean))
    }
    pub fn get_myCharacter(&mut self) -> (res : Option<u8>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        res == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myCharacter(&Ghost(self.myCharacter))
    }
    pub fn get_myString(&mut self) -> (res : Option<Base_Types::String>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        res == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myString(&Ghost(self.myString))
    }
    pub fn get_myInt8(&mut self) -> (res : Option<i8>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        res == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myInt8(&Ghost(self.myInt8))
    }
    pub fn get_myInt16(&mut self) -> (res : Option<i16>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        res == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myInt16(&Ghost(self.myInt16))
    }
    pub fn get_myInt32(&mut self) -> (res : Option<i32>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        res == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myInt32(&Ghost(self.myInt32))
    }
    pub fn get_myInt64(&mut self) -> (res : Option<i64>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        res == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myInt64(&Ghost(self.myInt64))
    }
    pub fn get_myUInt8(&mut self) -> (res : Option<u8>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        res == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myUInt8(&Ghost(self.myUInt8))
    }
    pub fn get_myUInt16(&mut self) -> (res : Option<u16>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        res == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myUInt16(&Ghost(self.myUInt16))
    }
    pub fn get_myUInt32(&mut self) -> (res : Option<u32>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        res == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myUInt32(&Ghost(self.myUInt32))
    }
    pub fn get_myUInt64(&mut self) -> (res : Option<u64>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        res == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myUInt64(&Ghost(self.myUInt64))
    }
    pub fn get_myFloat32(&mut self) -> (res : Option<f32>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        res == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myFloat32(&Ghost(self.myFloat32))
    }
    pub fn get_myFloat64(&mut self) -> (res : Option<f64>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        res == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myFloat64(&Ghost(self.myFloat64))
    }
    pub fn get_myEnum(&mut self) -> (res : Option<Aadl_Datatypes::MyEnum>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        res == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myEnum(&Ghost(self.myEnum))
    }
    pub fn get_myStruct(&mut self) -> (res : Option<Aadl_Datatypes::MyStruct_i>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        res == self.myStruct,
        old(self).myArray1 == self.myArray1 
    {
      self.api.unverified_get_myStruct(&Ghost(self.myStruct))
    }
    pub fn get_myArray1(&mut self) -> (res : Option<Aadl_Datatypes::MyArrayOneDim>)
      ensures
        old(self).myBoolean == self.myBoolean,
        old(self).myCharacter == self.myCharacter,
        old(self).myString == self.myString,
        old(self).myInt8 == self.myInt8,
        old(self).myInt16 == self.myInt16,
        old(self).myInt32 == self.myInt32,
        old(self).myInt64 == self.myInt64,
        old(self).myUInt8 == self.myUInt8,
        old(self).myUInt16 == self.myUInt16,
        old(self).myUInt32 == self.myUInt32,
        old(self).myUInt64 == self.myUInt64,
        old(self).myFloat32 == self.myFloat32,
        old(self).myFloat64 == self.myFloat64,
        old(self).myEnum == self.myEnum,
        old(self).myStruct == self.myStruct,
        old(self).myArray1 == self.myArray1,
        res == self.myArray1 
    {
      self.api.unverified_get_myArray1(&Ghost(self.myArray1))
    }
  }

  pub struct consumer_consumer_Initialization_Api;
  impl consumer_consumer_Api for consumer_consumer_Initialization_Api {}
  impl consumer_consumer_Put_Api for consumer_consumer_Initialization_Api {}

  pub const fn init_api() -> consumer_consumer_Application_Api<consumer_consumer_Initialization_Api> {
    return consumer_consumer_Application_Api {
      api: consumer_consumer_Initialization_Api {},

      myBoolean: None,
      myCharacter: None,
      myString: None,
      myInt8: None,
      myInt16: None,
      myInt32: None,
      myInt64: None,
      myUInt8: None,
      myUInt16: None,
      myUInt32: None,
      myUInt64: None,
      myFloat32: None,
      myFloat64: None,
      myEnum: None,
      myStruct: None,
      myArray1: None
    }
  }

  pub struct consumer_consumer_Compute_Api;
  impl consumer_consumer_Api for consumer_consumer_Compute_Api {}
  impl consumer_consumer_Put_Api for consumer_consumer_Compute_Api {}
  impl consumer_consumer_Get_Api for consumer_consumer_Compute_Api {}
  impl consumer_consumer_Full_Api for consumer_consumer_Compute_Api {}

  pub const fn compute_api() -> consumer_consumer_Application_Api<consumer_consumer_Compute_Api> {
    return consumer_consumer_Application_Api {
      api: consumer_consumer_Compute_Api {},

      myBoolean: None,
      myCharacter: None,
      myString: None,
      myInt8: None,
      myInt16: None,
      myInt32: None,
      myInt64: None,
      myUInt8: None,
      myUInt16: None,
      myUInt32: None,
      myUInt64: None,
      myFloat32: None,
      myFloat64: None,
      myEnum: None,
      myStruct: None,
      myArray1: None
    }
  }
}