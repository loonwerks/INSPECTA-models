// Do not edit this file as it will be overwritten if codegen is rerun

//! C-interface for the component.
//! This code must be unsafe.
//! Assumptions about correctness are introduced and need to be verified by other means.

use data::*;

#[cfg(test)]
use std::sync::Mutex;

#[cfg(not(test))]
extern "C" {
  fn get_upper_alarm_temp(value: *mut Isolette_Data_Model::Temp_i) -> bool;
  fn get_lower_alarm_temp(value: *mut Isolette_Data_Model::Temp_i) -> bool;
  fn put_alarm_control(value: *mut Isolette_Data_Model::On_Off) -> bool;
  fn get_monitor_mode(value: *mut Isolette_Data_Model::Monitor_Mode) -> bool;
  fn get_current_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool;
}

pub fn unsafe_get_upper_alarm_temp() -> Isolette_Data_Model::Temp_i 
 {
   unsafe {
     let value: *mut Isolette_Data_Model::Temp_i = &mut Isolette_Data_Model::Temp_i::default();
     get_upper_alarm_temp(value);
     return *value;
   }
 }

pub fn unsafe_get_lower_alarm_temp() -> Isolette_Data_Model::Temp_i 
 {
   unsafe {
     let value: *mut Isolette_Data_Model::Temp_i = &mut Isolette_Data_Model::Temp_i::default();
     get_lower_alarm_temp(value);
     return *value;
   }
 }

pub fn unsafe_put_alarm_control(value: &Isolette_Data_Model::On_Off) -> bool 
 {
   unsafe {
     return put_alarm_control(value as *const Isolette_Data_Model::On_Off as *mut Isolette_Data_Model::On_Off);
   }
 }

pub fn unsafe_get_monitor_mode() -> Isolette_Data_Model::Monitor_Mode 
 {
   unsafe {
     let value: *mut Isolette_Data_Model::Monitor_Mode = &mut Isolette_Data_Model::Monitor_Mode::default();
     get_monitor_mode(value);
     return *value;
   }
 }

pub fn unsafe_get_current_tempWstatus() -> Isolette_Data_Model::TempWstatus_i 
 {
   unsafe {
     let value: *mut Isolette_Data_Model::TempWstatus_i = &mut Isolette_Data_Model::TempWstatus_i::default();
     get_current_tempWstatus(value);
     return *value;
   }
 }

//////////////////////////////////////////////////////////////////////////////////
// Testing Versions
//////////////////////////////////////////////////////////////////////////////////

#[cfg(test)]
lazy_static::lazy_static! {
  // simulate the global C variables that point to the microkit shared memory regions.  In a full
  // microkit system we would be able to mutate the shared memory for out ports since they're r/w,
  // but we couldn't do that for in ports since they are read-only
  pub static ref IN_upper_alarm_temp: Mutex<Option<Isolette_Data_Model::Temp_i>> = Mutex::new(None);
  pub static ref IN_lower_alarm_temp: Mutex<Option<Isolette_Data_Model::Temp_i>> = Mutex::new(None);
  pub static ref OUT_alarm_control: Mutex<Option<Isolette_Data_Model::On_Off>> = Mutex::new(None);
  pub static ref IN_monitor_mode: Mutex<Option<Isolette_Data_Model::Monitor_Mode>> = Mutex::new(None);
  pub static ref IN_current_tempWstatus: Mutex<Option<Isolette_Data_Model::TempWstatus_i>> = Mutex::new(None);
}

#[cfg(test)]
pub fn get_upper_alarm_temp(value: *mut Isolette_Data_Model::Temp_i) -> bool 
 {
   unsafe {
     *value = IN_upper_alarm_temp.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn get_lower_alarm_temp(value: *mut Isolette_Data_Model::Temp_i) -> bool 
 {
   unsafe {
     *value = IN_lower_alarm_temp.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn put_alarm_control(value: *mut Isolette_Data_Model::On_Off) -> bool 
 {
   unsafe {
     *OUT_alarm_control.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn get_monitor_mode(value: *mut Isolette_Data_Model::Monitor_Mode) -> bool 
 {
   unsafe {
     *value = IN_monitor_mode.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn get_current_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool 
 {
   unsafe {
     *value = IN_current_tempWstatus.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }
