::/*#! 2> /dev/null                                   #
@ 2>/dev/null # 2>nul & echo off & goto BOF           #
if [ -z "${SIREUM_HOME}" ]; then                      #
  echo "Please set SIREUM_HOME env var"               #
  exit -1                                             #
fi                                                    #
exec "${SIREUM_HOME}/bin/sireum" slang run "$0" "$@"    #
:BOF
setlocal
if not defined SIREUM_HOME (
  echo Please set SIREUM_HOME env var
  exit /B -1
)
"%SIREUM_HOME%\bin\sireum.bat" slang run %0 %*
exit /B %errorlevel%
::!#*/
// #Sireum

import org.sireum._

val sireum = Os.path(Os.env("SIREUM_HOME").get) / "bin" / (if (Os.isWin) "sireum.bat" else "sireum")

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// create SlangCheck artifacts for the Slang types used in the project

val files: ISZ[String] = ISZ("../src/main/data/isolette/Isolette_Environment/Heat.scala",
                             "../src/main/data/isolette/Isolette_Environment/Interface_Interaction.scala",
                             "../src/main/data/isolette/Isolette_Data_Model/PhysicalTemp_i.scala",
                             "../src/main/data/isolette/Isolette_Data_Model/ValueStatus.scala",
                             "../src/main/data/isolette/Isolette_Data_Model/TempWstatus_i.scala",
                             "../src/main/data/isolette/Isolette_Data_Model/On_Off.scala",
                             "../src/main/data/isolette/Isolette_Data_Model/Status.scala",
                             "../src/main/data/isolette/Isolette_Data_Model/Temp_i.scala",
                             "../src/main/data/isolette/Isolette_Data_Model/Regulator_Mode.scala",
                             "../src/main/data/isolette/Isolette_Data_Model/Failure_Flag_i.scala",
                             "../src/main/data/isolette/Isolette_Data_Model/Monitor_Mode.scala",
                             "../src/main/data/isolette/Base_Types.scala",
                             "../src/main/data/isolette/Regulate/Manage_Regulator_Interface_i_thermostat_rt_mri_mri_Containers.scala",
                             "../src/main/data/isolette/Regulate/Manage_Heat_Source_i_thermostat_rt_mhs_mhs_Containers.scala",
                             "../src/main/data/isolette/Regulate/Manage_Regulator_Mode_i_thermostat_rt_mrm_mrm_Containers.scala",
                             "../src/main/data/isolette/Regulate/Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Containers.scala",
                             "../src/main/data/isolette/Monitor/Manage_Monitor_Interface_i_thermostat_mt_mmi_mmi_Containers.scala",
                             "../src/main/data/isolette/Monitor/Manage_Alarm_i_thermostat_mt_ma_ma_Containers.scala",
                             "../src/main/data/isolette/Monitor/Manage_Monitor_Mode_i_thermostat_mt_mmm_mmm_Containers.scala",
                             "../src/main/data/isolette/Monitor/Detect_Monitor_Failure_i_thermostat_mt_dmf_dmf_Containers.scala",
                             "../src/main/data/isolette/Operator_Interface/Operator_Interface_Thread_i_operator_interface_oip_oit_Containers.scala",
                             "../src/main/data/isolette/Devices/Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Containers.scala",
                             "../src/main/data/isolette/Devices/Heat_Source_i_heat_source_cpi_heat_controller_Containers.scala",
                             "../src/main/util/isolette/runtimemonitor/ObservationKind.scala",
                             "../src/main/data/isolette/util/Container.scala",
                             "../src/main/art/art/DataContent.scala",
                             "../src/main/data/isolette/Aux_Types.scala")

val toolargs: String = st"${(files, " ")}".render

(Os.slashDir.up / "src" / "main" / "util" / "isolette").mkdirAll()

proc"$sireum proyek slangcheck -p isolette -o ${Os.slashDir.up}/src/main/util/isolette ${Os.slashDir.up} $toolargs".at(Os.slashDir).console.runCheck()

// call to the tools version of SlangCheck which does not invoke Tipe
//proc"$sireum tools slangcheck generator -p isolette -o ${Os.slashDir.up}/src/main/util/isolette $toolargs".at(Os.slashDir).console.runCheck()
