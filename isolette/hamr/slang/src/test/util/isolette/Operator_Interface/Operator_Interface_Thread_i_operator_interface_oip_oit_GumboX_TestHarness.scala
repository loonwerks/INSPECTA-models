// #Sireum

package isolette.Operator_Interface

import org.sireum._
import isolette._
import isolette.GumboXUtil.GumboXResult

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Operator_Interface_Thread_i_operator_interface_oip_oit_GumboX_TestHarness extends Operator_Interface_Thread_i_operator_interface_oip_oit_TestApi {
  def verbose: B

  /** Contract-based test harness for the initialise entry point
    */
  def testInitialiseCB(
      ): GumboXResult.Type = {

    if (verbose) {
      println(st"""Pre State Values:
                  """.render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testInitialise()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_lower_alarm_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_lower_alarm_tempWstatus().get
    val api_lower_desired_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_lower_desired_tempWstatus().get
    val api_upper_alarm_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_upper_alarm_tempWstatus().get
    val api_upper_desired_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_upper_desired_tempWstatus().get

    if (verbose) {
      println(st"""Post State Values:
                  |  api_lower_alarm_tempWstatus = ${api_lower_alarm_tempWstatus.string}
                  |  api_lower_desired_tempWstatus = ${api_lower_desired_tempWstatus.string}
                  |  api_upper_alarm_tempWstatus = ${api_upper_alarm_tempWstatus.string}
                  |  api_upper_desired_tempWstatus = ${api_upper_desired_tempWstatus.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = isolette.Operator_Interface.Operator_Interface_Thread_i_operator_interface_oip_oit_GumboX.inititialize_IEP_Post(api_lower_alarm_tempWstatus, api_lower_desired_tempWstatus, api_upper_alarm_tempWstatus, api_upper_desired_tempWstatus)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }

  def testComputeCBJ(json: String): GumboXResult.Type = {
    isolette.JSON.toOperator_InterfaceOperator_Interface_Thread_i_operator_interface_oip_oit_PreState_Container(json) match {
      case Either.Left(o) => return testComputeCBV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBV(o: Operator_Interface_Thread_i_operator_interface_oip_oit_PreState_Container): GumboXResult.Type = {
    return testComputeCB(o.api_alarm_control, o.api_display_temperature, o.api_monitor_status, o.api_regulator_status)
  }

  /** Contract-based test harness for the compute entry point
    * @param api_alarm_control incoming data port
    * @param api_display_temperature incoming data port
    * @param api_monitor_status incoming data port
    * @param api_regulator_status incoming data port
    */
  def testComputeCB(
      api_alarm_control: Isolette_Data_Model.On_Off.Type,
      api_display_temperature: Isolette_Data_Model.Temp_i,
      api_monitor_status: Isolette_Data_Model.Status.Type,
      api_regulator_status: Isolette_Data_Model.Status.Type): GumboXResult.Type = {

    // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved from the component state
    //   oit does not have incoming ports or state variables

    // [CheckPre]: check/filter based on pre-condition.
    val CEP_Pre_Result: B = isolette.Operator_Interface.Operator_Interface_Thread_i_operator_interface_oip_oit_GumboX.compute_CEP_Pre (api_alarm_control, api_display_temperature, api_monitor_status, api_regulator_status)
    if (!CEP_Pre_Result) {
      return GumboXResult.Pre_Condition_Unsat
    }

    // [PutInPorts]: put values on the input ports
    put_alarm_control(api_alarm_control)
    put_display_temperature(api_display_temperature)
    put_monitor_status(api_monitor_status)
    put_regulator_status(api_regulator_status)

    if (verbose) {
      println(st"""Pre State Values:
                  |  api_alarm_control = ${api_alarm_control.string}
                  |  api_display_temperature = ${api_display_temperature.string}
                  |  api_monitor_status = ${api_monitor_status.string}
                  |  api_regulator_status = ${api_regulator_status.string}""".render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_lower_alarm_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_lower_alarm_tempWstatus().get
    val api_lower_desired_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_lower_desired_tempWstatus().get
    val api_upper_alarm_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_upper_alarm_tempWstatus().get
    val api_upper_desired_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_upper_desired_tempWstatus().get

    if (verbose) {
      println(st"""Post State Values:
                  |  api_lower_alarm_tempWstatus = ${api_lower_alarm_tempWstatus.string}
                  |  api_lower_desired_tempWstatus = ${api_lower_desired_tempWstatus.string}
                  |  api_upper_alarm_tempWstatus = ${api_upper_alarm_tempWstatus.string}
                  |  api_upper_desired_tempWstatus = ${api_upper_desired_tempWstatus.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = isolette.Operator_Interface.Operator_Interface_Thread_i_operator_interface_oip_oit_GumboX.compute_CEP_Post(api_alarm_control, api_display_temperature, api_monitor_status, api_regulator_status, api_lower_alarm_tempWstatus, api_lower_desired_tempWstatus, api_upper_alarm_tempWstatus, api_upper_desired_tempWstatus)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }
}
