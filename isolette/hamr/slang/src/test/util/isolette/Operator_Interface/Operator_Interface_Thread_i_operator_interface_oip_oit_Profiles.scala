// #Sireum

package isolette.Operator_Interface

import org.sireum._
import isolette.util.Profile
import isolette.util.EmptyContainer
import isolette.RandomLib

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// Profile for initialise entrypoint
@msig trait Operator_Interface_Thread_i_operator_interface_oip_oit_Profile_Trait extends Profile

@record class Operator_Interface_Thread_i_operator_interface_oip_oit_Profile (
  val name: String,
) extends Operator_Interface_Thread_i_operator_interface_oip_oit_Profile_Trait {

  override def next: EmptyContainer = {
    return EmptyContainer()
  }
}

// Profile with generators for incoming ports
@msig trait Operator_Interface_Thread_i_operator_interface_oip_oit_Profile_P_Trait extends Profile {
  def api_alarm_control: RandomLib // random lib for generating Isolette_Data_Model.On_Off
  def api_display_temperature: RandomLib // random lib for generating Isolette_Data_Model.Temp_i
  def api_monitor_status: RandomLib // random lib for generating Isolette_Data_Model.Status
  def api_regulator_status: RandomLib // random lib for generating Isolette_Data_Model.Status
}

@record class Operator_Interface_Thread_i_operator_interface_oip_oit_Profile_P(
  val name: String,
  var api_alarm_control: RandomLib, // random lib for generating Isolette_Data_Model.On_Off
  var api_display_temperature: RandomLib, // random lib for generating Isolette_Data_Model.Temp_i
  var api_monitor_status: RandomLib, // random lib for generating Isolette_Data_Model.Status
  var api_regulator_status: RandomLib // random lib for generating Isolette_Data_Model.Status
  ) extends Operator_Interface_Thread_i_operator_interface_oip_oit_Profile_P_Trait {

  override def next: Operator_Interface_Thread_i_operator_interface_oip_oit_PreState_Container_P = {
    return (Operator_Interface_Thread_i_operator_interface_oip_oit_PreState_Container_P (
      api_alarm_control = api_alarm_control.nextIsolette_Data_ModelOn_OffType(),
      api_display_temperature = api_display_temperature.nextIsolette_Data_ModelTemp_i(),
      api_monitor_status = api_monitor_status.nextIsolette_Data_ModelStatusType(),
      api_regulator_status = api_regulator_status.nextIsolette_Data_ModelStatusType()))
  }
}

// Profile with generators for state variables and incoming ports
@msig trait Operator_Interface_Thread_i_operator_interface_oip_oit_Profile_PS_Trait extends Operator_Interface_Thread_i_operator_interface_oip_oit_Profile_P_Trait {
  def api_alarm_control: RandomLib // random lib for generating Isolette_Data_Model.On_Off
  def api_display_temperature: RandomLib // random lib for generating Isolette_Data_Model.Temp_i
  def api_monitor_status: RandomLib // random lib for generating Isolette_Data_Model.Status
  def api_regulator_status: RandomLib // random lib for generating Isolette_Data_Model.Status
}

@record class Operator_Interface_Thread_i_operator_interface_oip_oit_Profile_PS(
  val name: String,
  var api_alarm_control: RandomLib, // random lib for generating Isolette_Data_Model.On_Off
  var api_display_temperature: RandomLib, // random lib for generating Isolette_Data_Model.Temp_i
  var api_monitor_status: RandomLib, // random lib for generating Isolette_Data_Model.Status
  var api_regulator_status: RandomLib // random lib for generating Isolette_Data_Model.Status
  ) extends Operator_Interface_Thread_i_operator_interface_oip_oit_Profile_PS_Trait {

  override def next: Operator_Interface_Thread_i_operator_interface_oip_oit_PreState_Container_PS = {
    return (Operator_Interface_Thread_i_operator_interface_oip_oit_PreState_Container_PS (
      api_alarm_control = api_alarm_control.nextIsolette_Data_ModelOn_OffType(),
      api_display_temperature = api_display_temperature.nextIsolette_Data_ModelTemp_i(),
      api_monitor_status = api_monitor_status.nextIsolette_Data_ModelStatusType(),
      api_regulator_status = api_regulator_status.nextIsolette_Data_ModelStatusType()))
  }
}
