// #Sireum

package isolette.Devices

import org.sireum._
import isolette._
import isolette.GumboXUtil.GumboXResult

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Temperature_Sensor_i_temperature_sensor_cpi_thermostat_GumboX_TestHarness extends Temperature_Sensor_i_temperature_sensor_cpi_thermostat_TestApi {
  def verbose: B

  /** Contract-based test harness for the initialise entry point
    */
  def testInitialiseCB(
      ): GumboXResult.Type = {

    if (verbose) {
      println(st"""Pre State Values:
                  """.render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testInitialise()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_current_tempWstatus().get

    if (verbose) {
      println(st"""Post State Values:
                  |  api_current_tempWstatus = ${api_current_tempWstatus.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = isolette.Devices.Temperature_Sensor_i_temperature_sensor_cpi_thermostat_GumboX.inititialize_IEP_Post(api_current_tempWstatus)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }

  def testComputeCBJ(json: String): GumboXResult.Type = {
    isolette.JSON.toDevicesTemperature_Sensor_i_temperature_sensor_cpi_thermostat_PreState_Container(json) match {
      case Either.Left(o) => return testComputeCBV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBV(o: Temperature_Sensor_i_temperature_sensor_cpi_thermostat_PreState_Container): GumboXResult.Type = {
    return testComputeCB(o.api_air)
  }

  /** Contract-based test harness for the compute entry point
    * @param api_air incoming data port
    */
  def testComputeCB(
      api_air: Isolette_Data_Model.PhysicalTemp_i): GumboXResult.Type = {

    // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved from the component state
    //   thermostat does not have incoming ports or state variables

    // [CheckPre]: check/filter based on pre-condition.
    val CEP_Pre_Result: B = isolette.Devices.Temperature_Sensor_i_temperature_sensor_cpi_thermostat_GumboX.compute_CEP_Pre (api_air)
    if (!CEP_Pre_Result) {
      return GumboXResult.Pre_Condition_Unsat
    }

    // [PutInPorts]: put values on the input ports
    put_air(api_air)

    if (verbose) {
      println(st"""Pre State Values:
                  |  api_air = ${api_air.string}""".render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i = get_current_tempWstatus().get

    if (verbose) {
      println(st"""Post State Values:
                  |  api_current_tempWstatus = ${api_current_tempWstatus.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = isolette.Devices.Temperature_Sensor_i_temperature_sensor_cpi_thermostat_GumboX.compute_CEP_Post(api_air, api_current_tempWstatus)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }
}
