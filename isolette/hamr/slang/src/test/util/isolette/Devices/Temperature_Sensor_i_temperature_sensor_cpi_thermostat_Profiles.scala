// #Sireum

package isolette.Devices

import org.sireum._
import isolette.util.Profile
import isolette.util.EmptyContainer
import isolette.RandomLib

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// Profile for initialise entrypoint
@msig trait Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile_Trait extends Profile

@record class Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile (
  val name: String,
) extends Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile_Trait {

  override def next: EmptyContainer = {
    return EmptyContainer()
  }
}

// Profile with generators for incoming ports
@msig trait Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile_P_Trait extends Profile {
  def api_air: RandomLib // random lib for generating Isolette_Data_Model.PhysicalTemp_i
}

@record class Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile_P(
  val name: String,
  var api_air: RandomLib // random lib for generating Isolette_Data_Model.PhysicalTemp_i
  ) extends Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile_P_Trait {

  override def next: Temperature_Sensor_i_temperature_sensor_cpi_thermostat_PreState_Container_P = {
    return (Temperature_Sensor_i_temperature_sensor_cpi_thermostat_PreState_Container_P (
      api_air = api_air.nextIsolette_Data_ModelPhysicalTemp_i()))
  }
}

// Profile with generators for state variables and incoming ports
@msig trait Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile_PS_Trait extends Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile_P_Trait {
  def api_air: RandomLib // random lib for generating Isolette_Data_Model.PhysicalTemp_i
}

@record class Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile_PS(
  val name: String,
  var api_air: RandomLib // random lib for generating Isolette_Data_Model.PhysicalTemp_i
  ) extends Temperature_Sensor_i_temperature_sensor_cpi_thermostat_Profile_PS_Trait {

  override def next: Temperature_Sensor_i_temperature_sensor_cpi_thermostat_PreState_Container_PS = {
    return (Temperature_Sensor_i_temperature_sensor_cpi_thermostat_PreState_Container_PS (
      api_air = api_air.nextIsolette_Data_ModelPhysicalTemp_i()))
  }
}
