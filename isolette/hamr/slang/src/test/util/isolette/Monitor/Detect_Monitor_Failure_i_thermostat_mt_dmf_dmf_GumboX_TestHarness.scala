// #Sireum

package isolette.Monitor

import org.sireum._
import isolette._
import isolette.GumboXUtil.GumboXResult

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Detect_Monitor_Failure_i_thermostat_mt_dmf_dmf_GumboX_TestHarness extends Detect_Monitor_Failure_i_thermostat_mt_dmf_dmf_TestApi {
  def verbose: B

  def testComputeCBJ(json: String): GumboXResult.Type = {
    isolette.JSON.toMonitorDetect_Monitor_Failure_i_thermostat_mt_dmf_dmf_PreState_Container(json) match {
      case Either.Left(o) => return testComputeCBV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBV(o: Detect_Monitor_Failure_i_thermostat_mt_dmf_dmf_PreState_Container): GumboXResult.Type = {
    return testComputeCB()
  }

  /** Contract-based test harness for the compute entry point
    */
  def testComputeCB(
      ): GumboXResult.Type = {

    // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved from the component state
    //   dmf does not have incoming ports or state variables

    // [CheckPre]: check/filter based on pre-condition.
    //   dmf's compute entry point does not have top level assume clauses

    // [PutInPorts]: put values on the input ports
    //   dmf does not have incoming ports

    if (verbose) {
      println(st"""Pre State Values:
                  """.render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    //   dmf does not have outgoing ports or state variables

    // [CheckPost]: invoke the oracle function
    //   dmf does not contain guarantee clauses for its compute entrypoint
    val result: GumboXResult.Type = GumboXResult.Post_Condition_Pass

    return result
  }
}
