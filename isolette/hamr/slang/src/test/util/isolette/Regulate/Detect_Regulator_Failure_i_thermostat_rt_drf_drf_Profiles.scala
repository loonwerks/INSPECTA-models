// #Sireum

package isolette.Regulate

import org.sireum._
import isolette.util.Profile
import isolette.util.EmptyContainer
import isolette.RandomLib

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// Profile for initialise entrypoint
@msig trait Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile_Trait extends Profile

@record class Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile (
  val name: String,
) extends Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile_Trait {

  override def next: EmptyContainer = {
    return EmptyContainer()
  }
}

// Profile with generators for incoming ports
@msig trait Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile_P_Trait extends Profile {
}

@record class Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile_P(
  val name: String,
  ) extends Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile_P_Trait {

  override def next: Detect_Regulator_Failure_i_thermostat_rt_drf_drf_PreState_Container_P = {
    return (Detect_Regulator_Failure_i_thermostat_rt_drf_drf_PreState_Container_P (
      ))
  }
}

// Profile with generators for state variables and incoming ports
@msig trait Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile_PS_Trait extends Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile_P_Trait {
}

@record class Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile_PS(
  val name: String,
  ) extends Detect_Regulator_Failure_i_thermostat_rt_drf_drf_Profile_PS_Trait {

  override def next: Detect_Regulator_Failure_i_thermostat_rt_drf_drf_PreState_Container_PS = {
    return (Detect_Regulator_Failure_i_thermostat_rt_drf_drf_PreState_Container_PS (
      ))
  }
}
