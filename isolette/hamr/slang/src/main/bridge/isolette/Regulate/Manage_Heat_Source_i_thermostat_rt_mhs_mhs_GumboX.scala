// #Sireum

package isolette.Regulate

import org.sireum._
import isolette._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
object Manage_Heat_Source_i_thermostat_rt_mhs_mhs_GumboX {
  /** Initialize Entrypoint Contract
    *
    * guarantee initlastCmd
    * @param lastCmd post-state state variable
    */
  @strictpure def initialize_initlastCmd (
      lastCmd: Isolette_Data_Model.On_Off.Type): B =
    lastCmd == Isolette_Data_Model.On_Off.Off

  /** Initialize Entrypoint Contract
    *
    * guarantee REQ_MHS_1
    *   If the Regulator Mode is INIT, the Heat Control shall be
    *   set to Off.
    *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=110 
    * @param api_heat_control outgoing data port
    */
  @strictpure def initialize_REQ_MHS_1 (
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    api_heat_control == Isolette_Data_Model.On_Off.Off

  /** IEP-Guar: Initialize Entrypoint Contracts for mhs
    *
    * @param lastCmd post-state state variable
    * @param api_heat_control outgoing data port
    */
  @strictpure def initialize_IEP_Guar (
      lastCmd: Isolette_Data_Model.On_Off.Type,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    initialize_initlastCmd(lastCmd) &
    initialize_REQ_MHS_1(api_heat_control)

  /** IEP-Post: Initialize Entrypoint Post-Condition
    *
    * @param lastCmd post-state state variable
    * @param api_heat_control outgoing data port
    */
  @strictpure def inititialize_IEP_Post (
      lastCmd: Isolette_Data_Model.On_Off.Type,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    (// IEP-Guar: Initialize Entrypoint contract for mhs
     initialize_IEP_Guar(lastCmd, api_heat_control))

  /** IEP-Post: Initialize Entrypoint Post-Condition via container
    *
    * @param post Container holding the value of incoming ports and the pre-state values of state variables
    */
  @strictpure def inititialize_IEP_Post_Container (post: Manage_Heat_Source_i_thermostat_rt_mhs_mhs_PostState_Container_PS): B =
    inititialize_IEP_Post (
      lastCmd = post.lastCmd,
      api_heat_control = post.api_heat_control)

  /** Compute Entrypoint Contract
    *
    * assume lower_is_lower_temp
    * @param api_lower_desired_temp incoming data port
    * @param api_upper_desired_temp incoming data port
    */
  @strictpure def compute_spec_lower_is_lower_temp_assume(
      api_lower_desired_temp: Isolette_Data_Model.Temp_i,
      api_upper_desired_temp: Isolette_Data_Model.Temp_i): B =
    api_lower_desired_temp.degrees <= api_upper_desired_temp.degrees

  /** CEP-T-Assm: Top-level assume contracts for mhs's compute entrypoint
    *
    * @param api_lower_desired_temp incoming data port
    * @param api_upper_desired_temp incoming data port
    */
  @strictpure def compute_CEP_T_Assm (
      api_lower_desired_temp: Isolette_Data_Model.Temp_i,
      api_upper_desired_temp: Isolette_Data_Model.Temp_i): B =
    compute_spec_lower_is_lower_temp_assume(api_lower_desired_temp, api_upper_desired_temp)

  /** CEP-Pre: Compute Entrypoint Pre-Condition for mhs
    *
    * @param In_lastCmd pre-state state variable
    * @param api_current_tempWstatus incoming data port
    * @param api_lower_desired_temp incoming data port
    * @param api_regulator_mode incoming data port
    * @param api_upper_desired_temp incoming data port
    */
  @strictpure def compute_CEP_Pre (
      In_lastCmd: Isolette_Data_Model.On_Off.Type,
      api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i,
      api_lower_desired_temp: Isolette_Data_Model.Temp_i,
      api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
      api_upper_desired_temp: Isolette_Data_Model.Temp_i): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with mhs's state variables and incoming ports
     Isolette_Data_Model.TempWstatus_i.D_Inv_TempWstatus_i(api_current_tempWstatus) & 
     Isolette_Data_Model.Temp_i.D_Inv_Temp_i(api_lower_desired_temp) & 
     Isolette_Data_Model.Temp_i.D_Inv_Temp_i(api_upper_desired_temp) & 

     // CEP-Assm: assume clauses of mhs's compute entrypoint
     compute_CEP_T_Assm (api_lower_desired_temp, api_upper_desired_temp))

  /** CEP-Pre: Compute Entrypoint Pre-Condition for mhs via container
    *
    * @param pre Container holding the value of incoming ports and the pre-state values of state variables
    */
  @strictpure def compute_CEP_Pre_Container(pre: Manage_Heat_Source_i_thermostat_rt_mhs_mhs_PreState_Container_PS): B =
    compute_CEP_Pre(
      In_lastCmd = pre.In_lastCmd,
      api_current_tempWstatus = pre.api_current_tempWstatus,
      api_lower_desired_temp = pre.api_lower_desired_temp,
      api_regulator_mode = pre.api_regulator_mode,
      api_upper_desired_temp = pre.api_upper_desired_temp)

  /** Compute Entrypoint Contract
    *
    * guarantee lastCmd
    *   Set lastCmd to value of output Cmd port
    * @param lastCmd post-state state variable
    * @param api_heat_control outgoing data port
    */
  @strictpure def compute_spec_lastCmd_guarantee(
      lastCmd: Isolette_Data_Model.On_Off.Type,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    lastCmd == api_heat_control

  /** CEP-T-Guar: Top-level guarantee contracts for mhs's compute entrypoint
    *
    * @param lastCmd post-state state variable
    * @param api_heat_control outgoing data port
    */
  @strictpure def compute_CEP_T_Guar (
      lastCmd: Isolette_Data_Model.On_Off.Type,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    compute_spec_lastCmd_guarantee(lastCmd, api_heat_control)

  /** guarantee REQ_MHS_1
    *   If the Regulator Mode is INIT, the Heat Control shall be
    *   set to Off.
    *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=110 
    * @param api_regulator_mode incoming data port
    * @param api_heat_control outgoing data port
    */
  @strictpure def compute_case_REQ_MHS_1(
      api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    (api_regulator_mode == Isolette_Data_Model.Regulator_Mode.Init_Regulator_Mode) ___>:
      (api_heat_control == Isolette_Data_Model.On_Off.Off)

  /** guarantee REQ_MHS_2
    *   If the Regulator Mode is NORMAL and the Current Temperature is less than
    *   the Lower Desired Temperature, the Heat Control shall be set to On.
    *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=110 
    * @param api_current_tempWstatus incoming data port
    * @param api_lower_desired_temp incoming data port
    * @param api_regulator_mode incoming data port
    * @param api_heat_control outgoing data port
    */
  @strictpure def compute_case_REQ_MHS_2(
      api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i,
      api_lower_desired_temp: Isolette_Data_Model.Temp_i,
      api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    (api_regulator_mode == Isolette_Data_Model.Regulator_Mode.Normal_Regulator_Mode &
      api_current_tempWstatus.degrees < api_lower_desired_temp.degrees) ___>:
      (api_heat_control == Isolette_Data_Model.On_Off.Onn)

  /** guarantee REQ_MHS_3
    *   If the Regulator Mode is NORMAL and the Current Temperature is greater than
    *   the Upper Desired Temperature, the Heat Control shall be set to Off.
    *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=110 
    * @param api_current_tempWstatus incoming data port
    * @param api_regulator_mode incoming data port
    * @param api_upper_desired_temp incoming data port
    * @param api_heat_control outgoing data port
    */
  @strictpure def compute_case_REQ_MHS_3(
      api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i,
      api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
      api_upper_desired_temp: Isolette_Data_Model.Temp_i,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    (api_regulator_mode == Isolette_Data_Model.Regulator_Mode.Normal_Regulator_Mode &
      api_current_tempWstatus.degrees > api_upper_desired_temp.degrees) ___>:
      (api_heat_control == Isolette_Data_Model.On_Off.Off)

  /** guarantee REQ_MHS_4
    *   If the Regulator Mode is NORMAL and the Current
    *   Temperature is greater than or equal to the Lower Desired Temperature
    *   and less than or equal to the Upper Desired Temperature, the value of
    *   the Heat Control shall not be changed.
    *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=110 
    * @param In_lastCmd pre-state state variable
    * @param api_current_tempWstatus incoming data port
    * @param api_lower_desired_temp incoming data port
    * @param api_regulator_mode incoming data port
    * @param api_upper_desired_temp incoming data port
    * @param api_heat_control outgoing data port
    */
  @strictpure def compute_case_REQ_MHS_4(
      In_lastCmd: Isolette_Data_Model.On_Off.Type,
      api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i,
      api_lower_desired_temp: Isolette_Data_Model.Temp_i,
      api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
      api_upper_desired_temp: Isolette_Data_Model.Temp_i,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    (api_regulator_mode == Isolette_Data_Model.Regulator_Mode.Normal_Regulator_Mode &
      (api_current_tempWstatus.degrees >= api_lower_desired_temp.degrees &
        api_current_tempWstatus.degrees <= api_upper_desired_temp.degrees)) ___>:
      (api_heat_control == In_lastCmd)

  /** guarantee REQ_MHS_5
    *   If the Regulator Mode is FAILED, the Heat Control shall be
    *   set to Off.
    *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=111 
    * @param api_regulator_mode incoming data port
    * @param api_heat_control outgoing data port
    */
  @strictpure def compute_case_REQ_MHS_5(
      api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    (api_regulator_mode == Isolette_Data_Model.Regulator_Mode.Failed_Regulator_Mode) ___>:
      (api_heat_control == Isolette_Data_Model.On_Off.Off)

  /** CEP-T-Case: Top-Level case contracts for mhs's compute entrypoint
    *
    * @param In_lastCmd pre-state state variable
    * @param api_current_tempWstatus incoming data port
    * @param api_lower_desired_temp incoming data port
    * @param api_regulator_mode incoming data port
    * @param api_upper_desired_temp incoming data port
    * @param api_heat_control outgoing data port
    */
  @strictpure def compute_CEP_T_Case (
      In_lastCmd: Isolette_Data_Model.On_Off.Type,
      api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i,
      api_lower_desired_temp: Isolette_Data_Model.Temp_i,
      api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
      api_upper_desired_temp: Isolette_Data_Model.Temp_i,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    compute_case_REQ_MHS_1(api_regulator_mode, api_heat_control) &
    compute_case_REQ_MHS_2(api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_heat_control) &
    compute_case_REQ_MHS_3(api_current_tempWstatus, api_regulator_mode, api_upper_desired_temp, api_heat_control) &
    compute_case_REQ_MHS_4(In_lastCmd, api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp, api_heat_control) &
    compute_case_REQ_MHS_5(api_regulator_mode, api_heat_control)

  /** CEP-Post: Compute Entrypoint Post-Condition for mhs
    *
    * @param In_lastCmd pre-state state variable
    * @param lastCmd post-state state variable
    * @param api_current_tempWstatus incoming data port
    * @param api_lower_desired_temp incoming data port
    * @param api_regulator_mode incoming data port
    * @param api_upper_desired_temp incoming data port
    * @param api_heat_control outgoing data port
    */
  @strictpure def compute_CEP_Post (
      In_lastCmd: Isolette_Data_Model.On_Off.Type,
      lastCmd: Isolette_Data_Model.On_Off.Type,
      api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i,
      api_lower_desired_temp: Isolette_Data_Model.Temp_i,
      api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
      api_upper_desired_temp: Isolette_Data_Model.Temp_i,
      api_heat_control: Isolette_Data_Model.On_Off.Type): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with mhs's state variables and outgoing ports
     Isolette_Data_Model.TempWstatus_i.D_Inv_TempWstatus_i(api_current_tempWstatus) & 
     Isolette_Data_Model.Temp_i.D_Inv_Temp_i(api_lower_desired_temp) & 
     Isolette_Data_Model.Temp_i.D_Inv_Temp_i(api_upper_desired_temp) & 

     // CEP-Guar: guarantee clauses of mhs's compute entrypoint
     compute_CEP_T_Guar (lastCmd, api_heat_control) & 

     // CEP-T-Case: case clauses of mhs's compute entrypoint
     compute_CEP_T_Case (In_lastCmd, api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp, api_heat_control))

  /** CEP-Post: Compute Entrypoint Post-Condition for mhs via containers
    *
    * @param pre Container holding the values of incoming ports and the pre-state values of state variables
    * @param post Container holding the values of outgoing ports and the post-state values of state variables
    */
  @strictpure def compute_CEP_Post_Container(
      pre: Manage_Heat_Source_i_thermostat_rt_mhs_mhs_PreState_Container_PS,
      post: Manage_Heat_Source_i_thermostat_rt_mhs_mhs_PostState_Container_PS): B =
    compute_CEP_Post(
      In_lastCmd = pre.In_lastCmd,
      lastCmd = post.lastCmd,
      api_current_tempWstatus = pre.api_current_tempWstatus,
      api_lower_desired_temp = pre.api_lower_desired_temp,
      api_regulator_mode = pre.api_regulator_mode,
      api_upper_desired_temp = pre.api_upper_desired_temp,
      api_heat_control = post.api_heat_control)
}
