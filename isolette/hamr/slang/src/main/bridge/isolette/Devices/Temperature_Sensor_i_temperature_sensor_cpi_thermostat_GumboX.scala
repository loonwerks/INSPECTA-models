// #Sireum

package isolette.Devices

import org.sireum._
import isolette._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
object Temperature_Sensor_i_temperature_sensor_cpi_thermostat_GumboX {
  /** IEP-Post: Initialize Entrypoint Post-Condition
    *
    * @param api_current_tempWstatus outgoing data port
    */
  @strictpure def inititialize_IEP_Post (
      api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with thermostat's state variables and outgoing ports
     Isolette_Data_Model.TempWstatus_i.D_Inv_TempWstatus_i(api_current_tempWstatus))

  /** IEP-Post: Initialize Entrypoint Post-Condition via container
    *
    * @param post Container holding the value of incoming ports and the pre-state values of state variables
    */
  @strictpure def inititialize_IEP_Post_Container (post: Temperature_Sensor_i_temperature_sensor_cpi_thermostat_PostState_Container_PS): B =
    inititialize_IEP_Post (
      api_current_tempWstatus = post.api_current_tempWstatus)

  /** CEP-Pre: Compute Entrypoint Pre-Condition for thermostat
    *
    * @param api_air incoming data port
    */
  @strictpure def compute_CEP_Pre (
      api_air: Isolette_Data_Model.PhysicalTemp_i): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with thermostat's state variables and incoming ports
     Isolette_Data_Model.PhysicalTemp_i.D_Inv_PhysicalTemp_i(api_air))

  /** CEP-Pre: Compute Entrypoint Pre-Condition for thermostat via container
    *
    * @param pre Container holding the value of incoming ports and the pre-state values of state variables
    */
  @strictpure def compute_CEP_Pre_Container(pre: Temperature_Sensor_i_temperature_sensor_cpi_thermostat_PreState_Container_PS): B =
    compute_CEP_Pre(
      api_air = pre.api_air)

  /** CEP-Post: Compute Entrypoint Post-Condition for thermostat
    *
    * @param api_air incoming data port
    * @param api_current_tempWstatus outgoing data port
    */
  @strictpure def compute_CEP_Post (
      api_air: Isolette_Data_Model.PhysicalTemp_i,
      api_current_tempWstatus: Isolette_Data_Model.TempWstatus_i): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with thermostat's state variables and outgoing ports
     Isolette_Data_Model.PhysicalTemp_i.D_Inv_PhysicalTemp_i(api_air) & 
     Isolette_Data_Model.TempWstatus_i.D_Inv_TempWstatus_i(api_current_tempWstatus))

  /** CEP-Post: Compute Entrypoint Post-Condition for thermostat via containers
    *
    * @param pre Container holding the values of incoming ports and the pre-state values of state variables
    * @param post Container holding the values of outgoing ports and the post-state values of state variables
    */
  @strictpure def compute_CEP_Post_Container(
      pre: Temperature_Sensor_i_temperature_sensor_cpi_thermostat_PreState_Container_PS,
      post: Temperature_Sensor_i_temperature_sensor_cpi_thermostat_PostState_Container_PS): B =
    compute_CEP_Post(
      api_air = pre.api_air,
      api_current_tempWstatus = post.api_current_tempWstatus)
}
