// #Sireum
package isolette

import org.sireum._
import art.Art
import art.scheduling.legacy.Legacy
import art.scheduling.roundrobin.RoundRobin
import art.scheduling.static.Schedule.{DSchedule, DScheduleSpec}
import art.scheduling.static._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

@datatype class ProcessorTimingProperties(val clockPeriod: Option[Z],
                                          val framePeriod: Option[Z],
                                          val maxDomain: Option[Z],
                                          val slotTime: Option[Z])

@datatype class ThreadTimingProperties(val domain: Option[Z],
                                       val computeExecutionTime: Option[(Z, Z)])

object Schedulers {

  val threadNickNames: Map[String, Art.BridgeId] = Map(
    ISZ(
      Arch.Isolette_Single_Sensor_Instance_thermostat_rt_mri_mri.name ~> Arch.Isolette_Single_Sensor_Instance_thermostat_rt_mri_mri.id,
      Arch.Isolette_Single_Sensor_Instance_thermostat_rt_mhs_mhs.name ~> Arch.Isolette_Single_Sensor_Instance_thermostat_rt_mhs_mhs.id,
      Arch.Isolette_Single_Sensor_Instance_thermostat_rt_mrm_mrm.name ~> Arch.Isolette_Single_Sensor_Instance_thermostat_rt_mrm_mrm.id,
      Arch.Isolette_Single_Sensor_Instance_thermostat_rt_drf_drf.name ~> Arch.Isolette_Single_Sensor_Instance_thermostat_rt_drf_drf.id,
      Arch.Isolette_Single_Sensor_Instance_thermostat_mt_mmi_mmi.name ~> Arch.Isolette_Single_Sensor_Instance_thermostat_mt_mmi_mmi.id,
      Arch.Isolette_Single_Sensor_Instance_thermostat_mt_ma_ma.name ~> Arch.Isolette_Single_Sensor_Instance_thermostat_mt_ma_ma.id,
      Arch.Isolette_Single_Sensor_Instance_thermostat_mt_mmm_mmm.name ~> Arch.Isolette_Single_Sensor_Instance_thermostat_mt_mmm_mmm.id,
      Arch.Isolette_Single_Sensor_Instance_thermostat_mt_dmf_dmf.name ~> Arch.Isolette_Single_Sensor_Instance_thermostat_mt_dmf_dmf.id,
      Arch.Isolette_Single_Sensor_Instance_operator_interface_oip_oit.name ~> Arch.Isolette_Single_Sensor_Instance_operator_interface_oip_oit.id,
      Arch.Isolette_Single_Sensor_Instance_temperature_sensor_cpi_thermostat.name ~> Arch.Isolette_Single_Sensor_Instance_temperature_sensor_cpi_thermostat.id,
      Arch.Isolette_Single_Sensor_Instance_heat_source_cpi_heat_controller.name ~> Arch.Isolette_Single_Sensor_Instance_heat_source_cpi_heat_controller.id)
  )

  val revThreadNickNames: Map[Art.BridgeId, String] = Map.empty[Art.BridgeId, String] ++ (for (e <- threadNickNames.entries) yield e._2 ~> e._1)

  val Isolette_Single_Sensor_Instance_isolette_processor_timingProperties: ProcessorTimingProperties = ProcessorTimingProperties(
    clockPeriod = Some(1),
    framePeriod = Some(1000),
    maxDomain = None(),
    slotTime = None())

  val Isolette_Single_Sensor_Instance_thermostat_rt_mri_mri_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(7))

  val Isolette_Single_Sensor_Instance_thermostat_rt_mhs_mhs_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(9))

  val Isolette_Single_Sensor_Instance_thermostat_rt_mrm_mrm_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(8))

  val Isolette_Single_Sensor_Instance_thermostat_rt_drf_drf_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(10))

  val Isolette_Single_Sensor_Instance_thermostat_mt_mmi_mmi_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(4))

  val Isolette_Single_Sensor_Instance_thermostat_mt_ma_ma_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(5))

  val Isolette_Single_Sensor_Instance_thermostat_mt_mmm_mmm_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(3))

  val Isolette_Single_Sensor_Instance_thermostat_mt_dmf_dmf_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(6))

  val Isolette_Single_Sensor_Instance_operator_interface_oip_oit_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(12))

  val Isolette_Single_Sensor_Instance_temperature_sensor_cpi_thermostat_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(2))

  val Isolette_Single_Sensor_Instance_heat_source_cpi_heat_controller_timingProperties: ThreadTimingProperties = ThreadTimingProperties(
    computeExecutionTime = None(),
    domain = Some(11))


  /**********************************************************************
   * Round Robin Scheduler
   *********************************************************************/

  // roundRobinSchedule represents the component dispatch order
  val roundRobinSchedule: ISZ[Art.BridgeId] = {
    // convert IS[Art.BridgeId, art.Bridge] to an IS[Z, Art.BridgeId] to allow bridges to be dispatched
    // multiple times during a hyper-period
    var ret: ISZ[Art.BridgeId] = ISZ()
    for (e <- Arch.ad.components) {
      ret = ret :+ e.id
    }
    ret
  }

  def getRoundRobinScheduler(schedule: Option[ISZ[Art.BridgeId]]): RoundRobin = {
    if (roundRobinSchedule.isEmpty) {} // line needed for transpiler; do not remove
    schedule match {
      case Some(s) => return RoundRobin(s)
      case _ => return RoundRobin(ScheduleProviderI.getRoundRobinOrder())
    }
  }

  /**********************************************************************
   * Static Scheduler
   *********************************************************************/

  val framePeriod: Z = 1000
  val numComponents: Z = Arch.ad.components.size
  val maxExecutionTime: Z = numComponents / framePeriod

  // defaultStaticSchedule represents the component dispatch order
  val defaultStaticSchedule: DScheduleSpec = DScheduleSpec(0, 0, DSchedule(ISZ(
    Schedule.Slot(0, maxExecutionTime),
    Schedule.Slot(1, maxExecutionTime),
    Schedule.Slot(2, maxExecutionTime),
    Schedule.Slot(3, maxExecutionTime),
    Schedule.Slot(4, maxExecutionTime),
    Schedule.Slot(5, maxExecutionTime),
    Schedule.Slot(6, maxExecutionTime),
    Schedule.Slot(7, maxExecutionTime),
    Schedule.Slot(8, maxExecutionTime),
    Schedule.Slot(9, maxExecutionTime),
    Schedule.Slot(10, maxExecutionTime)
  )))

  val defaultDomainToBridgeIdMap: ISZ[Art.BridgeId] = ISZ(
    /* domain 0 */ Arch.Isolette_Single_Sensor_Instance_thermostat_rt_mri_mri.id,
    /* domain 1 */ Arch.Isolette_Single_Sensor_Instance_thermostat_rt_mhs_mhs.id,
    /* domain 2 */ Arch.Isolette_Single_Sensor_Instance_thermostat_rt_mrm_mrm.id,
    /* domain 3 */ Arch.Isolette_Single_Sensor_Instance_thermostat_rt_drf_drf.id,
    /* domain 4 */ Arch.Isolette_Single_Sensor_Instance_thermostat_mt_mmi_mmi.id,
    /* domain 5 */ Arch.Isolette_Single_Sensor_Instance_thermostat_mt_ma_ma.id,
    /* domain 6 */ Arch.Isolette_Single_Sensor_Instance_thermostat_mt_mmm_mmm.id,
    /* domain 7 */ Arch.Isolette_Single_Sensor_Instance_thermostat_mt_dmf_dmf.id,
    /* domain 8 */ Arch.Isolette_Single_Sensor_Instance_operator_interface_oip_oit.id,
    /* domain 9 */ Arch.Isolette_Single_Sensor_Instance_temperature_sensor_cpi_thermostat.id,
    /* domain 10 */ Arch.Isolette_Single_Sensor_Instance_heat_source_cpi_heat_controller.id
  )

  def getStaticSchedulerH(userProvided: MOption[(DScheduleSpec, ISZ[Art.BridgeId], Map[String, Art.BridgeId], CommandProvider)]): StaticScheduler = {
    if (defaultStaticSchedule.schedule.slots.isEmpty && defaultDomainToBridgeIdMap.isEmpty && threadNickNames.isEmpty) {} // line needed for transpiler; do not remove
    userProvided match {
      case MSome((schedule_, domainToBridgeIdMap_, threadNickNames_, commandProvider)) =>
        return getStaticScheduler(schedule_, domainToBridgeIdMap_, threadNickNames_, commandProvider)
      case _ =>
        return getStaticScheduler(
          ScheduleProviderI.getStaticSchedule(),
          // TODO: get the following from extension so they can be customized via C
          defaultDomainToBridgeIdMap,
          threadNickNames,
          DefaultCommandProvider())
    }
  }

  def getStaticScheduler(schedule: DScheduleSpec,
                         domainToBridgeIdMap: ISZ[Art.BridgeId],
                         threadNickNames: Map[String, Art.BridgeId],
                         commandProvider: CommandProvider): StaticScheduler = {
    return StaticScheduler(schedule, Arch.ad.components, domainToBridgeIdMap, threadNickNames,
      if (commandProvider.isInstanceOf[InfoCommandProvider])
        commandProvider.asInstanceOf[InfoCommandProvider].init(
          threadNickNames,
          schedule.schedule.slots.size,
          domainToBridgeIdMap
        )
      else commandProvider)
  }


  /**********************************************************************
   * Legacy Scheduler
   *********************************************************************/

  def getLegacyScheduler(): Legacy = {
    return Legacy(Arch.ad.components)
  }
}

// the purpose of this extension is to allow users to provide custom schedules
// at the C level after transpiling
@ext(name = "ScheduleProvider") object ScheduleProviderI {
  def getRoundRobinOrder(): ISZ[Art.BridgeId] = $

  def getStaticSchedule(): DScheduleSpec = $
}