// #Sireum

package isolette.Isolette_Data_Model

import org.sireum._
import isolette._
import org.sireum.S32._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object TempWstatus_i {
  def example(): Isolette_Data_Model.TempWstatus_i = {
    return Isolette_Data_Model.TempWstatus_i(
      degrees = Base_Types.Integer_32_example(),
      status = Isolette_Data_Model.ValueStatus.Valid)
  }

  /** invariant MaxMinEarthTemperatures
    *   Temps should fall within the max/min temperatures
    *   recorded on planet Earth
    */
  @strictpure def MaxMinEarthTemperatures_Invariant(value: Isolette_Data_Model.TempWstatus_i): B =
    s32"-128" <= value.degrees &&
      value.degrees <= s32"134"

  /** D-Inv Data Invariant for Isolette_Data_Model.TempWstatus_i
    */
  @strictpure def D_Inv_TempWstatus_i(value: Isolette_Data_Model.TempWstatus_i): B =
    (MaxMinEarthTemperatures_Invariant(value))

  /** D-Inv-Guard Data Invariant for Isolette_Data_Model.TempWstatus_i
    */
  @strictpure def D_Inv_Guard_TempWstatus_i(value: Option[Isolette_Data_Model.TempWstatus_i]): B =
    value.nonEmpty ___>: D_Inv_TempWstatus_i(value.get)
}

@datatype class TempWstatus_i(
  val degrees: S32,
  val status: Isolette_Data_Model.ValueStatus.Type) {
  @spec def MaxMinEarthTemperatures = Invariant(
    s32"-128" <= degrees &&
      degrees <= s32"134"
  )
}

object TempWstatus_i_Payload {
  def example(): TempWstatus_i_Payload = {
    return TempWstatus_i_Payload(Isolette_Data_Model.TempWstatus_i.example())
  }
}

@datatype class TempWstatus_i_Payload(value: Isolette_Data_Model.TempWstatus_i) extends art.DataContent
