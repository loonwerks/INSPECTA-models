// Do not edit this file as it will be overwritten if codegen is rerun

use vstd::prelude::*;
use data::*;
use super::extern_c_api as extern_api;

verus! {
  pub trait thermostat_mt_mmi_mmi_Api {}

  pub trait thermostat_mt_mmi_mmi_Put_Api: thermostat_mt_mmi_mmi_Api {
    #[verifier::external_body]
    fn unverified_put_upper_alarm_temp(
      &mut self,
      value: Isolette_Data_Model::Temp_i) 
    {
      extern_api::unsafe_put_upper_alarm_temp(&value);
    }

    #[verifier::external_body]
    fn unverified_put_lower_alarm_temp(
      &mut self,
      value: Isolette_Data_Model::Temp_i) 
    {
      extern_api::unsafe_put_lower_alarm_temp(&value);
    }

    #[verifier::external_body]
    fn unverified_put_monitor_status(
      &mut self,
      value: Isolette_Data_Model::Status) 
    {
      extern_api::unsafe_put_monitor_status(&value);
    }

    #[verifier::external_body]
    fn unverified_put_interface_failure(
      &mut self,
      value: Isolette_Data_Model::Failure_Flag_i) 
    {
      extern_api::unsafe_put_interface_failure(&value);
    }
  }

  pub trait thermostat_mt_mmi_mmi_Get_Api: thermostat_mt_mmi_mmi_Api {
    #[verifier::external_body]
    fn unverified_get_monitor_mode(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Monitor_Mode>) -> (res : Isolette_Data_Model::Monitor_Mode)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_monitor_mode();
    }

    #[verifier::external_body]
    fn unverified_get_lower_alarm_tempWstatus(
      &mut self,
      value: &Ghost<Isolette_Data_Model::TempWstatus_i>) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_lower_alarm_tempWstatus();
    }

    #[verifier::external_body]
    fn unverified_get_upper_alarm_tempWstatus(
      &mut self,
      value: &Ghost<Isolette_Data_Model::TempWstatus_i>) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_upper_alarm_tempWstatus();
    }

    #[verifier::external_body]
    fn unverified_get_current_tempWstatus(
      &mut self,
      value: &Ghost<Isolette_Data_Model::TempWstatus_i>) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_current_tempWstatus();
    }
  }

  pub trait thermostat_mt_mmi_mmi_Full_Api: thermostat_mt_mmi_mmi_Put_Api + thermostat_mt_mmi_mmi_Get_Api {}

  pub struct thermostat_mt_mmi_mmi_Application_Api<API: thermostat_mt_mmi_mmi_Api> {
    pub api: API,

    pub ghost upper_alarm_temp: Isolette_Data_Model::Temp_i,
    pub ghost lower_alarm_temp: Isolette_Data_Model::Temp_i,
    pub ghost monitor_status: Isolette_Data_Model::Status,
    pub ghost interface_failure: Isolette_Data_Model::Failure_Flag_i,
    pub ghost monitor_mode: Isolette_Data_Model::Monitor_Mode,
    pub ghost lower_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost upper_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost current_tempWstatus: Isolette_Data_Model::TempWstatus_i
  }

  impl<API: thermostat_mt_mmi_mmi_Put_Api> thermostat_mt_mmi_mmi_Application_Api<API> {
    pub fn put_upper_alarm_temp(
      &mut self,
      value: Isolette_Data_Model::Temp_i)
      ensures
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).monitor_mode == self.monitor_mode,
        self.upper_alarm_temp == value,
        old(self).lower_alarm_temp == self.lower_alarm_temp,
        old(self).monitor_status == self.monitor_status,
        old(self).interface_failure == self.interface_failure 
    {
      self.api.unverified_put_upper_alarm_temp(value);
      self.upper_alarm_temp = value;
    }
    pub fn put_lower_alarm_temp(
      &mut self,
      value: Isolette_Data_Model::Temp_i)
      ensures
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).monitor_mode == self.monitor_mode,
        old(self).upper_alarm_temp == self.upper_alarm_temp,
        self.lower_alarm_temp == value,
        old(self).monitor_status == self.monitor_status,
        old(self).interface_failure == self.interface_failure 
    {
      self.api.unverified_put_lower_alarm_temp(value);
      self.lower_alarm_temp = value;
    }
    pub fn put_monitor_status(
      &mut self,
      value: Isolette_Data_Model::Status)
      ensures
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).monitor_mode == self.monitor_mode,
        old(self).upper_alarm_temp == self.upper_alarm_temp,
        old(self).lower_alarm_temp == self.lower_alarm_temp,
        self.monitor_status == value,
        old(self).interface_failure == self.interface_failure 
    {
      self.api.unverified_put_monitor_status(value);
      self.monitor_status = value;
    }
    pub fn put_interface_failure(
      &mut self,
      value: Isolette_Data_Model::Failure_Flag_i)
      ensures
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).monitor_mode == self.monitor_mode,
        old(self).upper_alarm_temp == self.upper_alarm_temp,
        old(self).lower_alarm_temp == self.lower_alarm_temp,
        old(self).monitor_status == self.monitor_status,
        self.interface_failure == value 
    {
      self.api.unverified_put_interface_failure(value);
      self.interface_failure = value;
    }
  }

  impl<API: thermostat_mt_mmi_mmi_Get_Api> thermostat_mt_mmi_mmi_Application_Api<API> {
    pub fn get_monitor_mode(&mut self) -> (res : Isolette_Data_Model::Monitor_Mode)
      ensures
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).monitor_mode == self.monitor_mode,
        res == self.monitor_mode,
        old(self).upper_alarm_temp == self.upper_alarm_temp,
        old(self).lower_alarm_temp == self.lower_alarm_temp,
        old(self).monitor_status == self.monitor_status,
        old(self).interface_failure == self.interface_failure 
    {
      self.api.unverified_get_monitor_mode(&Ghost(self.monitor_mode))
    }
    pub fn get_lower_alarm_tempWstatus(&mut self) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        res == self.lower_alarm_tempWstatus,
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).monitor_mode == self.monitor_mode,
        old(self).upper_alarm_temp == self.upper_alarm_temp,
        old(self).lower_alarm_temp == self.lower_alarm_temp,
        old(self).monitor_status == self.monitor_status,
        old(self).interface_failure == self.interface_failure,
        // assume Table_A_12_LowerAlarmTemp
        //   Range [96..101]
        //   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=112 
        (96i32 <= res.degrees) &&
          (res.degrees <= 101i32) 
    {
      self.api.unverified_get_lower_alarm_tempWstatus(&Ghost(self.lower_alarm_tempWstatus))
    }
    pub fn get_upper_alarm_tempWstatus(&mut self) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        res == self.upper_alarm_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).monitor_mode == self.monitor_mode,
        old(self).upper_alarm_temp == self.upper_alarm_temp,
        old(self).lower_alarm_temp == self.lower_alarm_temp,
        old(self).monitor_status == self.monitor_status,
        old(self).interface_failure == self.interface_failure,
        // assume Table_A_12_UpperAlarmTemp
        //   Range [97..102]
        //   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=112 
        (97i32 <= res.degrees) &&
          (res.degrees <= 102i32) 
    {
      self.api.unverified_get_upper_alarm_tempWstatus(&Ghost(self.upper_alarm_tempWstatus))
    }
    pub fn get_current_tempWstatus(&mut self) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).current_tempWstatus == self.current_tempWstatus,
        res == self.current_tempWstatus,
        old(self).monitor_mode == self.monitor_mode,
        old(self).upper_alarm_temp == self.upper_alarm_temp,
        old(self).lower_alarm_temp == self.lower_alarm_temp,
        old(self).monitor_status == self.monitor_status,
        old(self).interface_failure == self.interface_failure 
    {
      self.api.unverified_get_current_tempWstatus(&Ghost(self.current_tempWstatus))
    }
  }

  pub struct thermostat_mt_mmi_mmi_Initialization_Api;
  impl thermostat_mt_mmi_mmi_Api for thermostat_mt_mmi_mmi_Initialization_Api {}
  impl thermostat_mt_mmi_mmi_Put_Api for thermostat_mt_mmi_mmi_Initialization_Api {}

  pub const fn init_api() -> thermostat_mt_mmi_mmi_Application_Api<thermostat_mt_mmi_mmi_Initialization_Api> {
    return thermostat_mt_mmi_mmi_Application_Api {
      api: thermostat_mt_mmi_mmi_Initialization_Api {},

      upper_alarm_temp: Isolette_Data_Model::Temp_i { degrees: 0 },
      lower_alarm_temp: Isolette_Data_Model::Temp_i { degrees: 0 },
      monitor_status: Isolette_Data_Model::Status::Init_Status,
      interface_failure: Isolette_Data_Model::Failure_Flag_i { flag: false },
      monitor_mode: Isolette_Data_Model::Monitor_Mode::Init_Monitor_Mode,
      lower_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      current_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid }
    }
  }

  pub struct thermostat_mt_mmi_mmi_Compute_Api;
  impl thermostat_mt_mmi_mmi_Api for thermostat_mt_mmi_mmi_Compute_Api {}
  impl thermostat_mt_mmi_mmi_Put_Api for thermostat_mt_mmi_mmi_Compute_Api {}
  impl thermostat_mt_mmi_mmi_Get_Api for thermostat_mt_mmi_mmi_Compute_Api {}
  impl thermostat_mt_mmi_mmi_Full_Api for thermostat_mt_mmi_mmi_Compute_Api {}

  pub const fn compute_api() -> thermostat_mt_mmi_mmi_Application_Api<thermostat_mt_mmi_mmi_Compute_Api> {
    return thermostat_mt_mmi_mmi_Application_Api {
      api: thermostat_mt_mmi_mmi_Compute_Api {},

      upper_alarm_temp: Isolette_Data_Model::Temp_i { degrees: 0 },
      lower_alarm_temp: Isolette_Data_Model::Temp_i { degrees: 0 },
      monitor_status: Isolette_Data_Model::Status::Init_Status,
      interface_failure: Isolette_Data_Model::Failure_Flag_i { flag: false },
      monitor_mode: Isolette_Data_Model::Monitor_Mode::Init_Monitor_Mode,
      lower_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      current_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid }
    }
  }
}