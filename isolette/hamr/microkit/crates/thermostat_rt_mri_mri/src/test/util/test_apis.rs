// Do not edit this file as it will be overwritten if codegen is rerun

use crate::bridge::extern_c_api as extern_api;
use data::*;

use proptest::prelude::*;

pub struct PreStateContainer {
  pub api_upper_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  pub api_lower_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  pub api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  pub api_regulator_mode: Isolette_Data_Model::Regulator_Mode
}

pub fn put_concrete_inputs_container(container: PreStateContainer)
{
  put_upper_desired_tempWstatus(container.api_upper_desired_tempWstatus);
  put_lower_desired_tempWstatus(container.api_lower_desired_tempWstatus);
  put_current_tempWstatus(container.api_current_tempWstatus);
  put_regulator_mode(container.api_regulator_mode);
}

pub fn put_concrete_inputs(
  upper_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  lower_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  regulator_mode: Isolette_Data_Model::Regulator_Mode)
{
  put_upper_desired_tempWstatus(upper_desired_tempWstatus);
  put_lower_desired_tempWstatus(lower_desired_tempWstatus);
  put_current_tempWstatus(current_tempWstatus);
  put_regulator_mode(regulator_mode);
}

/// setter for IN DataPort
pub fn put_upper_desired_tempWstatus(value: Isolette_Data_Model::TempWstatus_i)
{
  *extern_api::IN_upper_desired_tempWstatus.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_lower_desired_tempWstatus(value: Isolette_Data_Model::TempWstatus_i)
{
  *extern_api::IN_lower_desired_tempWstatus.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_current_tempWstatus(value: Isolette_Data_Model::TempWstatus_i)
{
  *extern_api::IN_current_tempWstatus.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_regulator_mode(value: Isolette_Data_Model::Regulator_Mode)
{
  *extern_api::IN_regulator_mode.lock().unwrap() = Some(value)
}

/// getter for OUT DataPort
pub fn get_upper_desired_temp() -> Isolette_Data_Model::Temp_i
{
  return extern_api::OUT_upper_desired_temp.lock().unwrap().expect("Not expecting None")
}

/// getter for OUT DataPort
pub fn get_lower_desired_temp() -> Isolette_Data_Model::Temp_i
{
  return extern_api::OUT_lower_desired_temp.lock().unwrap().expect("Not expecting None")
}

/// getter for OUT DataPort
pub fn get_displayed_temp() -> Isolette_Data_Model::Temp_i
{
  return extern_api::OUT_displayed_temp.lock().unwrap().expect("Not expecting None")
}

/// getter for OUT DataPort
pub fn get_regulator_status() -> Isolette_Data_Model::Status
{
  return extern_api::OUT_regulator_status.lock().unwrap().expect("Not expecting None")
}

/// getter for OUT DataPort
pub fn get_interface_failure() -> Isolette_Data_Model::Failure_Flag_i
{
  return extern_api::OUT_interface_failure.lock().unwrap().expect("Not expecting None")
}
