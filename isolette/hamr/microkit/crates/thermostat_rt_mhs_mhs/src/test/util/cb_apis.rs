// Do not edit this file as it will be overwritten if codegen is rerun

use data::*;

use proptest::prelude::*;

use super::test_apis::*;

use crate::bridge::thermostat_rt_mhs_mhs_GUMBOX as GUMBOX;

pub enum HarnessResult {
  RejectedPrecondition,
  FailedPostcondition(TestCaseError),
  Passed,
}

/** Contract-based test harness for the initialize entry point
  */
pub fn testInitializeCB() -> HarnessResult
{
  // [InvokeEntryPoint]: Invoke the entry point
  crate::thermostat_rt_mhs_mhs_initialize();

  // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
  let lastCmd = get_lastCmd();
  let api_heat_control = get_heat_control();

  // [CheckPost]: invoke the oracle function
  if !GUMBOX::initialize_IEP_Post (lastCmd, api_heat_control) {
    return HarnessResult::FailedPostcondition(
      TestCaseError::Fail("Postcondition failed: incorrect output behavior".into())
    );
  }

  return HarnessResult::Passed
}

#[macro_export]
macro_rules!
testInitializeCB_macro {
  (
    $test_name: ident,
    config: $config:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(empty in ::proptest::strategy::Just(())) {
        match $crate::test::util::cb_apis::testInitializeCB() {
          $crate::test::util::cb_apis::HarnessResult::RejectedPrecondition => {
            unreachable!("This branch is infeasible")
          }
          $crate::test::util::cb_apis::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::test::util::cb_apis::HarnessResult::Passed => { }
        }
      }
    }
  };
}

/** Contract-based test harness for the compute entry point
  *
  * @param api_current_tempWstatus incoming data port
  * @param api_lower_desired_temp incoming data port
  * @param api_regulator_mode incoming data port
  * @param api_upper_desired_temp incoming data port
  */
pub fn testComputeCB(
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_lower_desired_temp: Isolette_Data_Model::Temp_i,
  api_regulator_mode: Isolette_Data_Model::Regulator_Mode,
  api_upper_desired_temp: Isolette_Data_Model::Temp_i) -> HarnessResult
{
  // Initialize the app
  crate::thermostat_rt_mhs_mhs_initialize();

  // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved
  //                from the component state
  let In_lastCmd: Isolette_Data_Model::On_Off = get_lastCmd();

  // [CheckPre]: check/filter based on pre-condition.
  if !GUMBOX::compute_CEP_Pre (In_lastCmd, api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp) {
    return HarnessResult::RejectedPrecondition;
  }

  // [PutInPorts]: Set values on the input ports
  put_current_tempWstatus(api_current_tempWstatus);
  put_lower_desired_temp(api_lower_desired_temp);
  put_regulator_mode(api_regulator_mode);
  put_upper_desired_temp(api_upper_desired_temp);

  // [InvokeEntryPoint]: Invoke the entry point
  crate::thermostat_rt_mhs_mhs_timeTriggered();

  // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
  let lastCmd = get_lastCmd();
  let api_heat_control = get_heat_control();

  // [CheckPost]: invoke the oracle function
  if !GUMBOX::compute_CEP_Post(In_lastCmd, lastCmd, api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp, api_heat_control) {
    return HarnessResult::FailedPostcondition(TestCaseError::Fail("Postcondition failed: incorrect output behavior".into()));
  }

  return HarnessResult::Passed
}

/** Contract-based test harness for the compute entry point
  */
pub fn testComputeCB_container(container: PreStateContainer) -> HarnessResult
{
  return testComputeCB(container.api_current_tempWstatus, container.api_lower_desired_temp, container.api_regulator_mode, container.api_upper_desired_temp)
}

#[macro_export]
macro_rules!
testComputeCB_macro {
  (
    $test_name: ident,
    config: $config:expr,
    api_current_tempWstatus: $api_current_tempWstatus_strat:expr,
    api_lower_desired_temp: $api_lower_desired_temp_strat:expr,
    api_regulator_mode: $api_regulator_mode_strat:expr,
    api_upper_desired_temp: $api_upper_desired_temp_strat:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        (api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp)
            in ($api_current_tempWstatus_strat, $api_lower_desired_temp_strat, $api_regulator_mode_strat, $api_upper_desired_temp_strat)
      ) {
        match$crate::test::util::cb_apis::testComputeCB(api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp) {
          $crate::test::util::cb_apis::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::test::util::cb_apis::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::test::util::cb_apis::HarnessResult::Passed => { }
        }
      }
    }
  };
}

/** Contract-based test harness for the compute entry point
  *
  * @param In_lastCmd pre-state state variable
  * @param api_current_tempWstatus incoming data port
  * @param api_lower_desired_temp incoming data port
  * @param api_regulator_mode incoming data port
  * @param api_upper_desired_temp incoming data port
  */
pub fn testComputeCBwGSV(
  In_lastCmd: Isolette_Data_Model::On_Off,
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_lower_desired_temp: Isolette_Data_Model::Temp_i,
  api_regulator_mode: Isolette_Data_Model::Regulator_Mode,
  api_upper_desired_temp: Isolette_Data_Model::Temp_i) -> HarnessResult
{
  // Initialize the app
  crate::thermostat_rt_mhs_mhs_initialize();

  // [CheckPre]: check/filter based on pre-condition.
  if !GUMBOX::compute_CEP_Pre (In_lastCmd, api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp) {
    return HarnessResult::RejectedPrecondition;
  }

  // [PutInPorts]: Set values on the input ports
  put_current_tempWstatus(api_current_tempWstatus);
  put_lower_desired_temp(api_lower_desired_temp);
  put_regulator_mode(api_regulator_mode);
  put_upper_desired_temp(api_upper_desired_temp);

  // [SetInStateVars]: set the pre-state values of state variables
  put_lastCmd(In_lastCmd);

  // [InvokeEntryPoint]: Invoke the entry point
  crate::thermostat_rt_mhs_mhs_timeTriggered();

  // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
  let lastCmd = get_lastCmd();
  let api_heat_control = get_heat_control();

  // [CheckPost]: invoke the oracle function
  if !GUMBOX::compute_CEP_Post(In_lastCmd, lastCmd, api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp, api_heat_control) {
    return HarnessResult::FailedPostcondition(TestCaseError::Fail("Postcondition failed: incorrect output behavior".into()));
  }

  return HarnessResult::Passed
}

/** Contract-based test harness for the compute entry point
  */
pub fn testComputeCBwGSV_container(container: PreStateContainer_wGSV) -> HarnessResult
{
  return testComputeCBwGSV(container.In_lastCmd, container.api_current_tempWstatus, container.api_lower_desired_temp, container.api_regulator_mode, container.api_upper_desired_temp)
}

#[macro_export]
macro_rules!
testComputeCBwGSV_macro {
  (
    $test_name: ident,
    config: $config:expr,
    In_lastCmd: $In_lastCmd_strat:expr,
    api_current_tempWstatus: $api_current_tempWstatus_strat:expr,
    api_lower_desired_temp: $api_lower_desired_temp_strat:expr,
    api_regulator_mode: $api_regulator_mode_strat:expr,
    api_upper_desired_temp: $api_upper_desired_temp_strat:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        (In_lastCmd, api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp)
            in ($In_lastCmd_strat, $api_current_tempWstatus_strat, $api_lower_desired_temp_strat, $api_regulator_mode_strat, $api_upper_desired_temp_strat)
      ) {
        match $crate::test::util::cb_apis::testComputeCBwGSV(In_lastCmd, api_current_tempWstatus, api_lower_desired_temp, api_regulator_mode, api_upper_desired_temp) {
          $crate::test::util::cb_apis::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::test::util::cb_apis::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::test::util::cb_apis::HarnessResult::Passed => { }
        }
      }
    }
  };
}
