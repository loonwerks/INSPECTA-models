// Do not edit this file as it will be overwritten if codegen is rerun

use data::*;

macro_rules! implies {
  ($lhs: expr, $rhs: expr) => {
    !$lhs || $rhs
  };
}

macro_rules! impliesL {
  ($lhs: expr, $rhs: expr) => {
    !$lhs | $rhs
  };
}

pub fn timeout_condition_satisfied() -> bool 
 {
   true
 }

/** Initialize EntryPointContract
  *
  * guarantee REQ_MA_1
  *   If the Monitor Mode is INIT, the Alarm Control shall be set
  *   to Off.
  *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=115 
  * @param lastCmd post-state state variable
  * @param api_alarm_control outgoing data port
  */
pub fn initialize_REQ_MA_1(
  lastCmd: Isolette_Data_Model::On_Off,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   (api_alarm_control == Isolette_Data_Model::On_Off::Off) &
     (lastCmd == Isolette_Data_Model::On_Off::Off)
 }

/** IEP-Guar: Initialize Entrypoint for ma
  *
  * @param lastCmd post-state state variable
  * @param api_alarm_control outgoing data port
  */
pub fn initialize_IEP_Guar(
  lastCmd: Isolette_Data_Model::On_Off,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   initialize_REQ_MA_1(lastCmd, api_alarm_control)
 }

/** IEP-Post: Initialize Entrypoint Post-Condition
  *
  * @param lastCmd post-state state variable
  * @param api_alarm_control outgoing data port
  */
pub fn initialize_IEP_Post(
  lastCmd: Isolette_Data_Model::On_Off,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   initialize_IEP_Guar(lastCmd, api_alarm_control)
 }

/** Compute Entrypoint Contract
  *
  * assumes Figure_A_7
  *   This is not explicitly stated in the requirements, but a reasonable
  *   assumption is that the lower alarm must be at least 1.0f less than
  *   the upper alarm in order to account for the 0.5f tolerance
  *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=115 
  * @param api_lower_alarm_temp incoming data port
  * @param api_upper_alarm_temp incoming data port
  */
pub fn compute_spec_Figure_A_7_assume(
  api_lower_alarm_temp: Isolette_Data_Model::Temp_i,
  api_upper_alarm_temp: Isolette_Data_Model::Temp_i) -> bool 
 {
   api_upper_alarm_temp.degrees - api_lower_alarm_temp.degrees >= 1i32
 }

/** Compute Entrypoint Contract
  *
  * assumes Table_A_12_LowerAlarmTemp
  *   Range [96..101]
  *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=112 
  * @param api_lower_alarm_temp incoming data port
  */
pub fn compute_spec_Table_A_12_LowerAlarmTemp_assume(api_lower_alarm_temp: Isolette_Data_Model::Temp_i) -> bool 
 {
   (96i32 <= api_lower_alarm_temp.degrees) &&
     (api_lower_alarm_temp.degrees <= 101i32)
 }

/** Compute Entrypoint Contract
  *
  * assumes Table_A_12_UpperAlarmTemp
  *   Range [97..102]
  *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=112 
  * @param api_upper_alarm_temp incoming data port
  */
pub fn compute_spec_Table_A_12_UpperAlarmTemp_assume(api_upper_alarm_temp: Isolette_Data_Model::Temp_i) -> bool 
 {
   (97i32 <= api_upper_alarm_temp.degrees) &&
     (api_upper_alarm_temp.degrees <= 102i32)
 }

/** CEP-T-Assm: Top-level assume contracts for ma's compute entrypoint
  *
  * @param api_lower_alarm_temp incoming data port
  * @param api_upper_alarm_temp incoming data port
  */
pub fn compute_CEP_T_Assm(
  api_lower_alarm_temp: Isolette_Data_Model::Temp_i,
  api_upper_alarm_temp: Isolette_Data_Model::Temp_i) -> bool 
 {
   let r0: bool = compute_spec_Figure_A_7_assume(api_lower_alarm_temp, api_upper_alarm_temp);
   let r1: bool = compute_spec_Table_A_12_LowerAlarmTemp_assume(api_lower_alarm_temp);
   let r2: bool = compute_spec_Table_A_12_UpperAlarmTemp_assume(api_upper_alarm_temp);

   return r0 && r1 && r2;
 }

/** CEP-Pre: Compute Entrypoint Pre-Condition for ma
  *
  * @param In_lastCmd pre-state state variable
  * @param api_current_tempWstatus incoming data port
  * @param api_lower_alarm_temp incoming data port
  * @param api_monitor_mode incoming data port
  * @param api_upper_alarm_temp incoming data port
  */
pub fn compute_CEP_Pre(
  In_lastCmd: Isolette_Data_Model::On_Off,
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_lower_alarm_temp: Isolette_Data_Model::Temp_i,
  api_monitor_mode: Isolette_Data_Model::Monitor_Mode,
  api_upper_alarm_temp: Isolette_Data_Model::Temp_i) -> bool 
 {
   // CEP-Assm: assume clauses of ma's compute entrypoint
   let r0: bool = compute_CEP_T_Assm(api_lower_alarm_temp, api_upper_alarm_temp);

   return r0;
 }

/** guarantee REQ_MA_1
  *   If the Monitor Mode is INIT, the Alarm Control shall be set
  *   to Off.
  *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=115 
  * @param lastCmd post-state state variable
  * @param api_monitor_mode incoming data port
  * @param api_alarm_control outgoing data port
  */
pub fn compute_case_REQ_MA_1(
  lastCmd: Isolette_Data_Model::On_Off,
  api_monitor_mode: Isolette_Data_Model::Monitor_Mode,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   implies!(
     api_monitor_mode == Isolette_Data_Model::Monitor_Mode::Init_Monitor_Mode,
     (api_alarm_control == Isolette_Data_Model::On_Off::Off) &
       (lastCmd == Isolette_Data_Model::On_Off::Off))
 }

/** guarantee REQ_MA_2
  *   If the Monitor Mode is NORMAL and the Current Temperature is
  *   less than the Lower Alarm Temperature or greater than the Upper Alarm
  *   Temperature, the Alarm Control shall be set to On.
  *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=115 
  * @param lastCmd post-state state variable
  * @param api_current_tempWstatus incoming data port
  * @param api_lower_alarm_temp incoming data port
  * @param api_monitor_mode incoming data port
  * @param api_upper_alarm_temp incoming data port
  * @param api_alarm_control outgoing data port
  */
pub fn compute_case_REQ_MA_2(
  lastCmd: Isolette_Data_Model::On_Off,
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_lower_alarm_temp: Isolette_Data_Model::Temp_i,
  api_monitor_mode: Isolette_Data_Model::Monitor_Mode,
  api_upper_alarm_temp: Isolette_Data_Model::Temp_i,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   implies!(
     (api_monitor_mode == Isolette_Data_Model::Monitor_Mode::Normal_Monitor_Mode) &
       ((api_current_tempWstatus.degrees < api_lower_alarm_temp.degrees) ||
         (api_current_tempWstatus.degrees > api_upper_alarm_temp.degrees)),
     (api_alarm_control == Isolette_Data_Model::On_Off::Onn) &
       (lastCmd == Isolette_Data_Model::On_Off::Onn))
 }

/** guarantee REQ_MA_3
  *   If the Monitor Mode is NORMAL and the Current Temperature
  *   is greater than or equal to the Lower Alarm Temperature and less than
  *   the Lower Alarm Temperature +0.5 degrees, or the Current Temperature is
  *   greater than the Upper Alarm Temperature -0.5 degrees and less than or equal
  *   to the Upper Alarm Temperature, the value of the Alarm Control shall
  *   not be changed.
  *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=115 
  * @param In_lastCmd pre-state state variable
  * @param lastCmd post-state state variable
  * @param api_current_tempWstatus incoming data port
  * @param api_lower_alarm_temp incoming data port
  * @param api_monitor_mode incoming data port
  * @param api_upper_alarm_temp incoming data port
  * @param api_alarm_control outgoing data port
  */
pub fn compute_case_REQ_MA_3(
  In_lastCmd: Isolette_Data_Model::On_Off,
  lastCmd: Isolette_Data_Model::On_Off,
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_lower_alarm_temp: Isolette_Data_Model::Temp_i,
  api_monitor_mode: Isolette_Data_Model::Monitor_Mode,
  api_upper_alarm_temp: Isolette_Data_Model::Temp_i,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   implies!(
     (api_monitor_mode == Isolette_Data_Model::Monitor_Mode::Normal_Monitor_Mode) &
       ((api_current_tempWstatus.degrees >= api_lower_alarm_temp.degrees) &&
         (api_current_tempWstatus.degrees < api_lower_alarm_temp.degrees + 1i32) ||
         (api_current_tempWstatus.degrees > api_upper_alarm_temp.degrees - 1i32) &&
           (api_current_tempWstatus.degrees <= api_upper_alarm_temp.degrees)),
     (api_alarm_control == In_lastCmd) &
       (lastCmd == In_lastCmd))
 }

/** guarantee REQ_MA_4
  *   If the Monitor Mode is NORMAL and the value of the Current
  *   Temperature is greater than or equal to the Lower Alarm Temperature
  *   +0.5 degrees and less than or equal to the Upper Alarm Temperature
  *   -0.5 degrees, the Alarm Control shall be set to Off.
  *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=115 
  * @param lastCmd post-state state variable
  * @param api_current_tempWstatus incoming data port
  * @param api_lower_alarm_temp incoming data port
  * @param api_monitor_mode incoming data port
  * @param api_upper_alarm_temp incoming data port
  * @param api_alarm_control outgoing data port
  */
pub fn compute_case_REQ_MA_4(
  lastCmd: Isolette_Data_Model::On_Off,
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_lower_alarm_temp: Isolette_Data_Model::Temp_i,
  api_monitor_mode: Isolette_Data_Model::Monitor_Mode,
  api_upper_alarm_temp: Isolette_Data_Model::Temp_i,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   implies!(
     (api_monitor_mode == Isolette_Data_Model::Monitor_Mode::Normal_Monitor_Mode) &
       ((api_current_tempWstatus.degrees >= api_lower_alarm_temp.degrees + 1i32) &
         (api_current_tempWstatus.degrees <= api_upper_alarm_temp.degrees - 1i32)),
     (api_alarm_control == Isolette_Data_Model::On_Off::Off) &
       (lastCmd == Isolette_Data_Model::On_Off::Off))
 }

/** guarantee REQ_MA_5
  *   If the Monitor Mode is FAILED, the Alarm Control shall be
  *   set to On.
  *   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=116 
  * @param lastCmd post-state state variable
  * @param api_monitor_mode incoming data port
  * @param api_alarm_control outgoing data port
  */
pub fn compute_case_REQ_MA_5(
  lastCmd: Isolette_Data_Model::On_Off,
  api_monitor_mode: Isolette_Data_Model::Monitor_Mode,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   implies!(
     api_monitor_mode == Isolette_Data_Model::Monitor_Mode::Failed_Monitor_Mode,
     (api_alarm_control == Isolette_Data_Model::On_Off::Onn) &
       (lastCmd == Isolette_Data_Model::On_Off::Onn))
 }

/** CEP-T-Case: Top-Level case contracts for ma's compute entrypoint
  *
  * @param In_lastCmd pre-state state variable
  * @param lastCmd post-state state variable
  * @param api_current_tempWstatus incoming data port
  * @param api_lower_alarm_temp incoming data port
  * @param api_monitor_mode incoming data port
  * @param api_upper_alarm_temp incoming data port
  * @param api_alarm_control outgoing data port
  */
pub fn compute_CEP_T_Case(
  In_lastCmd: Isolette_Data_Model::On_Off,
  lastCmd: Isolette_Data_Model::On_Off,
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_lower_alarm_temp: Isolette_Data_Model::Temp_i,
  api_monitor_mode: Isolette_Data_Model::Monitor_Mode,
  api_upper_alarm_temp: Isolette_Data_Model::Temp_i,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   let r0: bool = compute_case_REQ_MA_1(lastCmd, api_monitor_mode, api_alarm_control);
   let r1: bool = compute_case_REQ_MA_2(lastCmd, api_current_tempWstatus, api_lower_alarm_temp, api_monitor_mode, api_upper_alarm_temp, api_alarm_control);
   let r2: bool = compute_case_REQ_MA_3(In_lastCmd, lastCmd, api_current_tempWstatus, api_lower_alarm_temp, api_monitor_mode, api_upper_alarm_temp, api_alarm_control);
   let r3: bool = compute_case_REQ_MA_4(lastCmd, api_current_tempWstatus, api_lower_alarm_temp, api_monitor_mode, api_upper_alarm_temp, api_alarm_control);
   let r4: bool = compute_case_REQ_MA_5(lastCmd, api_monitor_mode, api_alarm_control);

   return r0 && r1 && r2 && r3 && r4;
 }

/** CEP-Post: Compute Entrypoint Post-Condition for ma
  *
  * @param In_lastCmd pre-state state variable
  * @param lastCmd post-state state variable
  * @param api_current_tempWstatus incoming data port
  * @param api_lower_alarm_temp incoming data port
  * @param api_monitor_mode incoming data port
  * @param api_upper_alarm_temp incoming data port
  * @param api_alarm_control outgoing data port
  */
pub fn compute_CEP_Post(
  In_lastCmd: Isolette_Data_Model::On_Off,
  lastCmd: Isolette_Data_Model::On_Off,
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_lower_alarm_temp: Isolette_Data_Model::Temp_i,
  api_monitor_mode: Isolette_Data_Model::Monitor_Mode,
  api_upper_alarm_temp: Isolette_Data_Model::Temp_i,
  api_alarm_control: Isolette_Data_Model::On_Off) -> bool 
 {
   // CEP-T-Case: case clauses of ma's compute entrypoint
   let r0: bool = compute_CEP_T_Case(In_lastCmd, lastCmd, api_current_tempWstatus, api_lower_alarm_temp, api_monitor_mode, api_upper_alarm_temp, api_alarm_control);

   return r0;
 }
