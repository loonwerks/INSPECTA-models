// Do not edit this file as it will be overwritten if codegen is rerun

use data::*;

use proptest::prelude::*;

use super::test_apis::*;

use crate::bridge::thermostat_rt_drf_drf_GUMBOX as GUMBOX;

pub enum HarnessResult {
  RejectedPrecondition,
  FailedPostcondition(TestCaseError),
  Passed,
}

/** Contract-based test harness for the initialize entry point
  */
pub fn testInitializeCB() -> HarnessResult
{
  // [InvokeEntryPoint]: Invoke the entry point
  crate::thermostat_rt_drf_drf_initialize();

  return HarnessResult::Passed
}

#[macro_export]
macro_rules!
testInitializeCB_macro {
  (
    $test_name: ident,
    config: $config:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(empty in ::proptest::strategy::Just(())) {
        match $crate::test::util::cb_apis::testInitializeCB() {
          $crate::test::util::cb_apis::HarnessResult::RejectedPrecondition => {
            unreachable!("This branch is infeasible")
          }
          $crate::test::util::cb_apis::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::test::util::cb_apis::HarnessResult::Passed => { }
        }
      }
    }
  };
}

/** Contract-based test harness for the compute entry point
  *
  */
pub fn testComputeCB() -> HarnessResult
{
  // Initialize the app
  crate::thermostat_rt_drf_drf_initialize();

  // [InvokeEntryPoint]: Invoke the entry point
  crate::thermostat_rt_drf_drf_timeTriggered();

  return HarnessResult::Passed
}

/** Contract-based test harness for the compute entry point
  */
pub fn testComputeCB_container(container: PreStateContainer) -> HarnessResult
{
  return testComputeCB()
}

#[macro_export]
macro_rules!
testComputeCB_macro {
  (
    $test_name: ident,
    config: $config:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        empty in ::proptest::strategy::Just(())
      ) {
        match$crate::test::util::cb_apis::testComputeCB() {
          $crate::test::util::cb_apis::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::test::util::cb_apis::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::test::util::cb_apis::HarnessResult::Passed => { }
        }
      }
    }
  };
}
