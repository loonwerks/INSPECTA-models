// Do not edit this file as it will be overwritten if codegen is rerun

use vstd::prelude::*;
use crate::data::*;
use super::extern_c_api as extern_api;

verus! {
  pub trait r2u2_monitor_r2u2_r2u2_Api {}

  pub trait r2u2_monitor_r2u2_r2u2_Put_Api: r2u2_monitor_r2u2_r2u2_Api {
  }

  pub trait r2u2_monitor_r2u2_r2u2_Get_Api: r2u2_monitor_r2u2_r2u2_Api {
    #[verifier::external_body]
    fn unverified_get_regulator_status(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Status>) -> (res : Isolette_Data_Model::Status)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_regulator_status();
    }

    #[verifier::external_body]
    fn unverified_get_heat_control(
      &mut self,
      value: &Ghost<Isolette_Data_Model::On_Off>) -> (res : Isolette_Data_Model::On_Off)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_heat_control();
    }

    #[verifier::external_body]
    fn unverified_get_regulator_mode(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Regulator_Mode>) -> (res : Isolette_Data_Model::Regulator_Mode)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_regulator_mode();
    }

    #[verifier::external_body]
    fn unverified_get_regulator_internal_failure(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Failure_Flag_i>) -> (res : Isolette_Data_Model::Failure_Flag_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_regulator_internal_failure();
    }

    #[verifier::external_body]
    fn unverified_get_monitor_status(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Status>) -> (res : Isolette_Data_Model::Status)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_monitor_status();
    }

    #[verifier::external_body]
    fn unverified_get_alarm_control(
      &mut self,
      value: &Ghost<Isolette_Data_Model::On_Off>) -> (res : Isolette_Data_Model::On_Off)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_alarm_control();
    }

    #[verifier::external_body]
    fn unverified_get_monitor_mode(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Monitor_Mode>) -> (res : Isolette_Data_Model::Monitor_Mode)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_monitor_mode();
    }

    #[verifier::external_body]
    fn unverified_get_monitor_internal_failure(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Failure_Flag_i>) -> (res : Isolette_Data_Model::Failure_Flag_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_monitor_internal_failure();
    }

    #[verifier::external_body]
    fn unverified_get_lower_desired_tempWstatus(
      &mut self,
      value: &Ghost<Isolette_Data_Model::TempWstatus_i>) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_lower_desired_tempWstatus();
    }

    #[verifier::external_body]
    fn unverified_get_upper_desired_tempWstatus(
      &mut self,
      value: &Ghost<Isolette_Data_Model::TempWstatus_i>) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_upper_desired_tempWstatus();
    }

    #[verifier::external_body]
    fn unverified_get_lower_alarm_tempWstatus(
      &mut self,
      value: &Ghost<Isolette_Data_Model::TempWstatus_i>) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_lower_alarm_tempWstatus();
    }

    #[verifier::external_body]
    fn unverified_get_upper_alarm_tempWstatus(
      &mut self,
      value: &Ghost<Isolette_Data_Model::TempWstatus_i>) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_upper_alarm_tempWstatus();
    }

    #[verifier::external_body]
    fn unverified_get_current_tempWstatus(
      &mut self,
      value: &Ghost<Isolette_Data_Model::TempWstatus_i>) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_current_tempWstatus();
    }

    #[verifier::external_body]
    fn unverified_get_displayed_temp(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Temp_i>) -> (res : Isolette_Data_Model::Temp_i)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_displayed_temp();
    }
  }

  pub trait r2u2_monitor_r2u2_r2u2_Full_Api: r2u2_monitor_r2u2_r2u2_Put_Api + r2u2_monitor_r2u2_r2u2_Get_Api {}

  pub struct r2u2_monitor_r2u2_r2u2_Application_Api<API: r2u2_monitor_r2u2_r2u2_Api> {
    pub api: API,

    pub ghost regulator_status: Isolette_Data_Model::Status,
    pub ghost heat_control: Isolette_Data_Model::On_Off,
    pub ghost regulator_mode: Isolette_Data_Model::Regulator_Mode,
    pub ghost regulator_internal_failure: Isolette_Data_Model::Failure_Flag_i,
    pub ghost monitor_status: Isolette_Data_Model::Status,
    pub ghost alarm_control: Isolette_Data_Model::On_Off,
    pub ghost monitor_mode: Isolette_Data_Model::Monitor_Mode,
    pub ghost monitor_internal_failure: Isolette_Data_Model::Failure_Flag_i,
    pub ghost lower_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost upper_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost lower_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost upper_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost displayed_temp: Isolette_Data_Model::Temp_i
  }

  impl<API: r2u2_monitor_r2u2_r2u2_Put_Api> r2u2_monitor_r2u2_r2u2_Application_Api<API> {
  }

  impl<API: r2u2_monitor_r2u2_r2u2_Get_Api> r2u2_monitor_r2u2_r2u2_Application_Api<API> {
    pub fn get_regulator_status(&mut self) -> (res : Isolette_Data_Model::Status)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        res == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_regulator_status(&Ghost(self.regulator_status))
    }
    pub fn get_heat_control(&mut self) -> (res : Isolette_Data_Model::On_Off)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        res == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_heat_control(&Ghost(self.heat_control))
    }
    pub fn get_regulator_mode(&mut self) -> (res : Isolette_Data_Model::Regulator_Mode)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode,
        res == self.regulator_mode 
    {
      self.api.unverified_get_regulator_mode(&Ghost(self.regulator_mode))
    }
    pub fn get_regulator_internal_failure(&mut self) -> (res : Isolette_Data_Model::Failure_Flag_i)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        res == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_regulator_internal_failure(&Ghost(self.regulator_internal_failure))
    }
    pub fn get_monitor_status(&mut self) -> (res : Isolette_Data_Model::Status)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        res == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_monitor_status(&Ghost(self.monitor_status))
    }
    pub fn get_alarm_control(&mut self) -> (res : Isolette_Data_Model::On_Off)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        res == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_alarm_control(&Ghost(self.alarm_control))
    }
    pub fn get_monitor_mode(&mut self) -> (res : Isolette_Data_Model::Monitor_Mode)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        res == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_monitor_mode(&Ghost(self.monitor_mode))
    }
    pub fn get_monitor_internal_failure(&mut self) -> (res : Isolette_Data_Model::Failure_Flag_i)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        res == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_monitor_internal_failure(&Ghost(self.monitor_internal_failure))
    }
    pub fn get_lower_desired_tempWstatus(&mut self) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        res == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_lower_desired_tempWstatus(&Ghost(self.lower_desired_tempWstatus))
    }
    pub fn get_upper_desired_tempWstatus(&mut self) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        res == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_upper_desired_tempWstatus(&Ghost(self.upper_desired_tempWstatus))
    }
    pub fn get_lower_alarm_tempWstatus(&mut self) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        res == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_lower_alarm_tempWstatus(&Ghost(self.lower_alarm_tempWstatus))
    }
    pub fn get_upper_alarm_tempWstatus(&mut self) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        res == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_upper_alarm_tempWstatus(&Ghost(self.upper_alarm_tempWstatus))
    }
    pub fn get_current_tempWstatus(&mut self) -> (res : Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        res == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_current_tempWstatus(&Ghost(self.current_tempWstatus))
    }
    pub fn get_displayed_temp(&mut self) -> (res : Isolette_Data_Model::Temp_i)
      ensures
        old(self).current_tempWstatus == self.current_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus,
        old(self).alarm_control == self.alarm_control,
        old(self).monitor_status == self.monitor_status,
        old(self).monitor_internal_failure == self.monitor_internal_failure,
        old(self).monitor_mode == self.monitor_mode,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).regulator_status == self.regulator_status,
        old(self).displayed_temp == self.displayed_temp,
        res == self.displayed_temp,
        old(self).heat_control == self.heat_control,
        old(self).regulator_internal_failure == self.regulator_internal_failure,
        old(self).regulator_mode == self.regulator_mode 
    {
      self.api.unverified_get_displayed_temp(&Ghost(self.displayed_temp))
    }
  }

  pub struct r2u2_monitor_r2u2_r2u2_Initialization_Api;
  impl r2u2_monitor_r2u2_r2u2_Api for r2u2_monitor_r2u2_r2u2_Initialization_Api {}
  impl r2u2_monitor_r2u2_r2u2_Put_Api for r2u2_monitor_r2u2_r2u2_Initialization_Api {}

  pub const fn init_api() -> r2u2_monitor_r2u2_r2u2_Application_Api<r2u2_monitor_r2u2_r2u2_Initialization_Api> {
    return r2u2_monitor_r2u2_r2u2_Application_Api {
      api: r2u2_monitor_r2u2_r2u2_Initialization_Api {},

      regulator_status: Isolette_Data_Model::Status::Init_Status,
      heat_control: Isolette_Data_Model::On_Off::Onn,
      regulator_mode: Isolette_Data_Model::Regulator_Mode::Init_Regulator_Mode,
      regulator_internal_failure: Isolette_Data_Model::Failure_Flag_i { flag: false },
      monitor_status: Isolette_Data_Model::Status::Init_Status,
      alarm_control: Isolette_Data_Model::On_Off::Onn,
      monitor_mode: Isolette_Data_Model::Monitor_Mode::Init_Monitor_Mode,
      monitor_internal_failure: Isolette_Data_Model::Failure_Flag_i { flag: false },
      lower_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      lower_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      current_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      displayed_temp: Isolette_Data_Model::Temp_i { degrees: 0 }
    }
  }

  pub struct r2u2_monitor_r2u2_r2u2_Compute_Api;
  impl r2u2_monitor_r2u2_r2u2_Api for r2u2_monitor_r2u2_r2u2_Compute_Api {}
  impl r2u2_monitor_r2u2_r2u2_Put_Api for r2u2_monitor_r2u2_r2u2_Compute_Api {}
  impl r2u2_monitor_r2u2_r2u2_Get_Api for r2u2_monitor_r2u2_r2u2_Compute_Api {}
  impl r2u2_monitor_r2u2_r2u2_Full_Api for r2u2_monitor_r2u2_r2u2_Compute_Api {}

  pub const fn compute_api() -> r2u2_monitor_r2u2_r2u2_Application_Api<r2u2_monitor_r2u2_r2u2_Compute_Api> {
    return r2u2_monitor_r2u2_r2u2_Application_Api {
      api: r2u2_monitor_r2u2_r2u2_Compute_Api {},

      regulator_status: Isolette_Data_Model::Status::Init_Status,
      heat_control: Isolette_Data_Model::On_Off::Onn,
      regulator_mode: Isolette_Data_Model::Regulator_Mode::Init_Regulator_Mode,
      regulator_internal_failure: Isolette_Data_Model::Failure_Flag_i { flag: false },
      monitor_status: Isolette_Data_Model::Status::Init_Status,
      alarm_control: Isolette_Data_Model::On_Off::Onn,
      monitor_mode: Isolette_Data_Model::Monitor_Mode::Init_Monitor_Mode,
      monitor_internal_failure: Isolette_Data_Model::Failure_Flag_i { flag: false },
      lower_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      lower_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      current_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      displayed_temp: Isolette_Data_Model::Temp_i { degrees: 0 }
    }
  }
}