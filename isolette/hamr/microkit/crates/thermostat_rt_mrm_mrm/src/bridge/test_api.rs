#![cfg(test)]

// Do not edit this file as it will be overwritten if codegen is rerun

use crate::bridge::extern_c_api as extern_api;
use data::*;

use proptest::prelude::*;

use crate::bridge::thermostat_rt_mrm_mrm_GUMBOX as GUMBOX;

pub struct PreStateContainer_wLV {
  pub In_lastRegulatorMode: Isolette_Data_Model::Regulator_Mode,
  pub api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  pub api_interface_failure: Isolette_Data_Model::Failure_Flag_i,
  pub api_internal_failure: Isolette_Data_Model::Failure_Flag_i
}

pub fn put_concrete_inputs_container_wLV(container: PreStateContainer_wLV)
{
  put_lastRegulatorMode(container.In_lastRegulatorMode);
  put_current_tempWstatus(container.api_current_tempWstatus);
  put_interface_failure(container.api_interface_failure);
  put_internal_failure(container.api_internal_failure);
}

pub fn put_concrete_inputs_wLV(
  In_lastRegulatorMode: Isolette_Data_Model::Regulator_Mode,
  current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  interface_failure: Isolette_Data_Model::Failure_Flag_i,
  internal_failure: Isolette_Data_Model::Failure_Flag_i)
{
  put_lastRegulatorMode(In_lastRegulatorMode);
  put_current_tempWstatus(current_tempWstatus);
  put_interface_failure(interface_failure);
  put_internal_failure(internal_failure);
}

pub struct PreStateContainer {
  pub api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  pub api_interface_failure: Isolette_Data_Model::Failure_Flag_i,
  pub api_internal_failure: Isolette_Data_Model::Failure_Flag_i
}

pub fn put_concrete_inputs_container(container: PreStateContainer)
{
  put_current_tempWstatus(container.api_current_tempWstatus);
  put_interface_failure(container.api_interface_failure);
  put_internal_failure(container.api_internal_failure);
}

pub fn put_concrete_inputs(
  current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  interface_failure: Isolette_Data_Model::Failure_Flag_i,
  internal_failure: Isolette_Data_Model::Failure_Flag_i)
{
  put_current_tempWstatus(current_tempWstatus);
  put_interface_failure(interface_failure);
  put_internal_failure(internal_failure);
}

/// setter for IN DataPort
pub fn put_current_tempWstatus(value: Isolette_Data_Model::TempWstatus_i)
{
  *extern_api::IN_current_tempWstatus.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_interface_failure(value: Isolette_Data_Model::Failure_Flag_i)
{
  *extern_api::IN_interface_failure.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_internal_failure(value: Isolette_Data_Model::Failure_Flag_i)
{
  *extern_api::IN_internal_failure.lock().unwrap() = Some(value)
}

/// getter for OUT DataPort
pub fn get_regulator_mode() -> Isolette_Data_Model::Regulator_Mode
{
  return extern_api::OUT_regulator_mode.lock().unwrap().expect("Not expecting None")
}

pub fn option_strategy_default
  <T: Clone + std::fmt::Debug, 
   S:  Strategy<Value = T>> (base: S) -> impl Strategy<Value = Option<T>>
{
  option_strategy_bias(1, base)
}

pub fn option_strategy_bias
  <T: Clone + std::fmt::Debug, 
   S:  Strategy<Value = T>> (
  bias: u32,
  base: S) -> impl Strategy<Value = Option<T>>
{
  prop_oneof![
    bias => base.prop_map(Some),
    1 => Just(None),
  ]
}

pub fn Isolette_Data_Model_ValueStatus_strategy_default() -> impl Strategy<Value = Isolette_Data_Model::ValueStatus>
{
  Isolette_Data_Model_ValueStatus_strategy_cust(1, 1)
}

pub fn Isolette_Data_Model_ValueStatus_strategy_cust(
  Valid_bias: u32,
  Invalid_bias: u32) -> impl Strategy<Value = Isolette_Data_Model::ValueStatus>
{
  prop_oneof![
    Valid_bias => Just(Isolette_Data_Model::ValueStatus::Valid),
    Invalid_bias => Just(Isolette_Data_Model::ValueStatus::Invalid)
  ]
}

pub fn Isolette_Data_Model_Regulator_Mode_strategy_default() -> impl Strategy<Value = Isolette_Data_Model::Regulator_Mode>
{
  Isolette_Data_Model_Regulator_Mode_strategy_cust(1, 1, 1)
}

pub fn Isolette_Data_Model_Regulator_Mode_strategy_cust(
  Init_Regulator_Mode_bias: u32,
  Normal_Regulator_Mode_bias: u32,
  Failed_Regulator_Mode_bias: u32) -> impl Strategy<Value = Isolette_Data_Model::Regulator_Mode>
{
  prop_oneof![
    Init_Regulator_Mode_bias => Just(Isolette_Data_Model::Regulator_Mode::Init_Regulator_Mode),
    Normal_Regulator_Mode_bias => Just(Isolette_Data_Model::Regulator_Mode::Normal_Regulator_Mode),
    Failed_Regulator_Mode_bias => Just(Isolette_Data_Model::Regulator_Mode::Failed_Regulator_Mode)
  ]
}

pub fn Isolette_Data_Model_Status_strategy_default() -> impl Strategy<Value = Isolette_Data_Model::Status>
{
  Isolette_Data_Model_Status_strategy_cust(1, 1, 1)
}

pub fn Isolette_Data_Model_Status_strategy_cust(
  Init_Status_bias: u32,
  On_Status_bias: u32,
  Failed_Status_bias: u32) -> impl Strategy<Value = Isolette_Data_Model::Status>
{
  prop_oneof![
    Init_Status_bias => Just(Isolette_Data_Model::Status::Init_Status),
    On_Status_bias => Just(Isolette_Data_Model::Status::On_Status),
    Failed_Status_bias => Just(Isolette_Data_Model::Status::Failed_Status)
  ]
}

pub fn Isolette_Data_Model_On_Off_strategy_default() -> impl Strategy<Value = Isolette_Data_Model::On_Off>
{
  Isolette_Data_Model_On_Off_strategy_cust(1, 1)
}

pub fn Isolette_Data_Model_On_Off_strategy_cust(
  Onn_bias: u32,
  Off_bias: u32) -> impl Strategy<Value = Isolette_Data_Model::On_Off>
{
  prop_oneof![
    Onn_bias => Just(Isolette_Data_Model::On_Off::Onn),
    Off_bias => Just(Isolette_Data_Model::On_Off::Off)
  ]
}

pub fn Isolette_Data_Model_Monitor_Mode_strategy_default() -> impl Strategy<Value = Isolette_Data_Model::Monitor_Mode>
{
  Isolette_Data_Model_Monitor_Mode_strategy_cust(1, 1, 1)
}

pub fn Isolette_Data_Model_Monitor_Mode_strategy_cust(
  Init_Monitor_Mode_bias: u32,
  Normal_Monitor_Mode_bias: u32,
  Failed_Monitor_Mode_bias: u32) -> impl Strategy<Value = Isolette_Data_Model::Monitor_Mode>
{
  prop_oneof![
    Init_Monitor_Mode_bias => Just(Isolette_Data_Model::Monitor_Mode::Init_Monitor_Mode),
    Normal_Monitor_Mode_bias => Just(Isolette_Data_Model::Monitor_Mode::Normal_Monitor_Mode),
    Failed_Monitor_Mode_bias => Just(Isolette_Data_Model::Monitor_Mode::Failed_Monitor_Mode)
  ]
}

pub fn Isolette_Environment_Heat_strategy_default() -> impl Strategy<Value = Isolette_Environment::Heat>
{
  Isolette_Environment_Heat_strategy_cust(1)
}

pub fn Isolette_Environment_Heat_strategy_cust(Dummy_Head_Enum_bias: u32) -> impl Strategy<Value = Isolette_Environment::Heat>
{
  prop_oneof![
    Dummy_Head_Enum_bias => Just(Isolette_Environment::Heat::Dummy_Head_Enum)
  ]
}

pub fn Isolette_Data_Model_Temp_i_strategy_default() -> impl Strategy<Value = Isolette_Data_Model::Temp_i>
{
  Isolette_Data_Model_Temp_i_strategy_cust(
    any::<i32>()
  )
}

pub fn Isolette_Data_Model_Temp_i_strategy_cust<degrees_i32_strategy: Strategy<Value = i32>> (degrees_strategy: degrees_i32_strategy) -> impl Strategy<Value = Isolette_Data_Model::Temp_i>
{
  (degrees_strategy).prop_map(|(degrees)| {
    Isolette_Data_Model::Temp_i { degrees }
  })
}

pub fn Isolette_Data_Model_PhysicalTemp_i_strategy_default() -> impl Strategy<Value = Isolette_Data_Model::PhysicalTemp_i>
{
  Isolette_Data_Model_PhysicalTemp_i_strategy_cust(
    any::<i32>()
  )
}

pub fn Isolette_Data_Model_PhysicalTemp_i_strategy_cust<degrees_i32_strategy: Strategy<Value = i32>> (degrees_strategy: degrees_i32_strategy) -> impl Strategy<Value = Isolette_Data_Model::PhysicalTemp_i>
{
  (degrees_strategy).prop_map(|(degrees)| {
    Isolette_Data_Model::PhysicalTemp_i { degrees }
  })
}

pub fn Isolette_Data_Model_TempWstatus_i_strategy_default() -> impl Strategy<Value = Isolette_Data_Model::TempWstatus_i>
{
  Isolette_Data_Model_TempWstatus_i_strategy_cust(
    any::<i32>(),
    Isolette_Data_Model_ValueStatus_strategy_default()
  )
}

pub fn Isolette_Data_Model_TempWstatus_i_strategy_cust
  <degrees_i32_strategy: Strategy<Value = i32>, 
   status_Isolette_Data_Model_ValueStatus_strategy: Strategy<Value = Isolette_Data_Model::ValueStatus>> (
  degrees_strategy: degrees_i32_strategy,
  status_strategy: status_Isolette_Data_Model_ValueStatus_strategy) -> impl Strategy<Value = Isolette_Data_Model::TempWstatus_i>
{
  (degrees_strategy, status_strategy).prop_map(|(degrees, status)| {
    Isolette_Data_Model::TempWstatus_i { degrees, status }
  })
}

pub fn Isolette_Data_Model_Failure_Flag_i_strategy_default() -> impl Strategy<Value = Isolette_Data_Model::Failure_Flag_i>
{
  Isolette_Data_Model_Failure_Flag_i_strategy_cust(
    any::<bool>()
  )
}

pub fn Isolette_Data_Model_Failure_Flag_i_strategy_cust<flag_bool_strategy: Strategy<Value = bool>> (flag_strategy: flag_bool_strategy) -> impl Strategy<Value = Isolette_Data_Model::Failure_Flag_i>
{
  (flag_strategy).prop_map(|(flag)| {
    Isolette_Data_Model::Failure_Flag_i { flag }
  })
}

pub fn get_lastRegulatorMode() -> Isolette_Data_Model::Regulator_Mode
{
  unsafe {
    match &crate::app {
      Some(inner) => inner.lastRegulatorMode,
      None => panic!("The app is None")
    }
  }
}

pub fn put_lastRegulatorMode(value: Isolette_Data_Model::Regulator_Mode)
{
  unsafe {
    match &mut crate::app {
      Some(inner) => inner.lastRegulatorMode = value,
      None => panic!("The app is None")
    }
  }
}

pub enum HarnessResult {
  RejectedPrecondition,
  FailedPostcondition(TestCaseError),
  Passed,
}

/** Contract-based test harness for the initialize entry point
  */
pub fn testInitializeCB() -> HarnessResult
{
  // [InvokeEntryPoint]: Invoke the entry point
  crate::thermostat_rt_mrm_mrm_initialize();

  // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
  let lastRegulatorMode = get_lastRegulatorMode();
  let api_regulator_mode = get_regulator_mode();

  // [CheckPost]: invoke the oracle function
  if !GUMBOX::initialize_IEP_Post (lastRegulatorMode, api_regulator_mode) {
    return HarnessResult::FailedPostcondition(
      TestCaseError::Fail("Postcondition failed: incorrect output behavior".into())
    );
  }

  return HarnessResult::Passed
}

#[macro_export]
macro_rules!
testInitializeCB_macro {
  (
    $test_name: ident,
    config: $config:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(empty in ::proptest::strategy::Just(())) {
        match $crate::bridge::test_api::testInitializeCB() {
          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {
            unreachable!("This branch is infeasible")
          }
          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::bridge::test_api::HarnessResult::Passed => { }
        }
      }
    }
  };
}

/** Contract-based test harness for the compute entry point
  *
  * @param api_current_tempWstatus incoming data port
  * @param api_interface_failure incoming data port
  * @param api_internal_failure incoming data port
  */
pub fn testComputeCB(
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_interface_failure: Isolette_Data_Model::Failure_Flag_i,
  api_internal_failure: Isolette_Data_Model::Failure_Flag_i) -> HarnessResult
{
  // Initialize the app
  crate::thermostat_rt_mrm_mrm_initialize();

  // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved
  //                from the component state
  let In_lastRegulatorMode: Isolette_Data_Model::Regulator_Mode = get_lastRegulatorMode();

  // [PutInPorts]: Set values on the input ports
  put_current_tempWstatus(api_current_tempWstatus);
  put_interface_failure(api_interface_failure);
  put_internal_failure(api_internal_failure);

  // [InvokeEntryPoint]: Invoke the entry point
  crate::thermostat_rt_mrm_mrm_timeTriggered();

  // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
  let lastRegulatorMode = get_lastRegulatorMode();
  let api_regulator_mode = get_regulator_mode();

  // [CheckPost]: invoke the oracle function
  if !GUMBOX::compute_CEP_Post(In_lastRegulatorMode, lastRegulatorMode, api_current_tempWstatus, api_interface_failure, api_internal_failure, api_regulator_mode) {
    return HarnessResult::FailedPostcondition(TestCaseError::Fail("Postcondition failed: incorrect output behavior".into()));
  }

  return HarnessResult::Passed
}

/** Contract-based test harness for the compute entry point
  */
pub fn testComputeCB_container(container: PreStateContainer) -> HarnessResult
{
  return testComputeCB(container.api_current_tempWstatus, container.api_interface_failure, container.api_internal_failure)
}

#[macro_export]
macro_rules!
testComputeCB_macro {
  (
    $test_name: ident,
    config: $config:expr,
    api_current_tempWstatus: $api_current_tempWstatus_strat:expr,
    api_interface_failure: $api_interface_failure_strat:expr,
    api_internal_failure: $api_internal_failure_strat:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        (api_current_tempWstatus, api_interface_failure, api_internal_failure)
        in ($api_current_tempWstatus_strat, $api_interface_failure_strat, $api_internal_failure_strat)
      ) {
        match$crate::bridge::test_api::testComputeCB(api_current_tempWstatus, api_interface_failure, api_internal_failure) {
          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::bridge::test_api::HarnessResult::Passed => { }
        }
      }
    }
  };
}

/** Contract-based test harness for the compute entry point
  *
  * @param In_lastRegulatorMode pre-state state variable
  * @param api_current_tempWstatus incoming data port
  * @param api_interface_failure incoming data port
  * @param api_internal_failure incoming data port
  */
pub fn testComputeCBwLV(
  In_lastRegulatorMode: Isolette_Data_Model::Regulator_Mode,
  api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  api_interface_failure: Isolette_Data_Model::Failure_Flag_i,
  api_internal_failure: Isolette_Data_Model::Failure_Flag_i) -> HarnessResult
{
  // Initialize the app
  crate::thermostat_rt_mrm_mrm_initialize();

  // [PutInPorts]: Set values on the input ports
  put_current_tempWstatus(api_current_tempWstatus);
  put_interface_failure(api_interface_failure);
  put_internal_failure(api_internal_failure);

  // [SetInStateVars]: set the pre-state values of state variables
  put_lastRegulatorMode(In_lastRegulatorMode);

  // [InvokeEntryPoint]: Invoke the entry point
  crate::thermostat_rt_mrm_mrm_timeTriggered();

  // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
  let lastRegulatorMode = get_lastRegulatorMode();
  let api_regulator_mode = get_regulator_mode();

  // [CheckPost]: invoke the oracle function
  if !GUMBOX::compute_CEP_Post(In_lastRegulatorMode, lastRegulatorMode, api_current_tempWstatus, api_interface_failure, api_internal_failure, api_regulator_mode) {
    return HarnessResult::FailedPostcondition(TestCaseError::Fail("Postcondition failed: incorrect output behavior".into()));
  }

  return HarnessResult::Passed
}

/** Contract-based test harness for the compute entry point
  */
pub fn testComputeCBwLV_container(container: PreStateContainer_wLV) -> HarnessResult
{
  return testComputeCBwLV(container.In_lastRegulatorMode, container.api_current_tempWstatus, container.api_interface_failure, container.api_internal_failure)
}

#[macro_export]
macro_rules!
testComputeCBwLV_macro {
  (
    $test_name: ident,
    config: $config:expr,
    In_lastRegulatorMode: $In_lastRegulatorMode_strat:expr,
    api_current_tempWstatus: $api_current_tempWstatus_strat:expr,
    api_interface_failure: $api_interface_failure_strat:expr,
    api_internal_failure: $api_internal_failure_strat:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        (In_lastRegulatorMode, api_current_tempWstatus, api_interface_failure, api_internal_failure)
        in ($In_lastRegulatorMode_strat, $api_current_tempWstatus_strat, $api_interface_failure_strat, $api_internal_failure_strat)
      ) {
        match $crate::bridge::test_api::testComputeCBwLV(In_lastRegulatorMode, api_current_tempWstatus, api_interface_failure, api_internal_failure) {
          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::bridge::test_api::HarnessResult::Passed => { }
        }
      }
    }
  };
}