// Do not edit this file as it will be overwritten if codegen is rerun

use crate::bridge::extern_c_api as extern_api;
use data::*;

use proptest::prelude::*;

pub struct PreStateContainer_wGSV {
  pub In_lastRegulatorMode: Isolette_Data_Model::Regulator_Mode,
  pub api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  pub api_interface_failure: Isolette_Data_Model::Failure_Flag_i,
  pub api_internal_failure: Isolette_Data_Model::Failure_Flag_i
}

pub fn put_concrete_inputs_container_wGSV(container: PreStateContainer_wGSV)
{
  put_lastRegulatorMode(container.In_lastRegulatorMode);
  put_current_tempWstatus(container.api_current_tempWstatus);
  put_interface_failure(container.api_interface_failure);
  put_internal_failure(container.api_internal_failure);
}

pub fn put_concrete_inputs_wGSV(
  In_lastRegulatorMode: Isolette_Data_Model::Regulator_Mode,
  current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  interface_failure: Isolette_Data_Model::Failure_Flag_i,
  internal_failure: Isolette_Data_Model::Failure_Flag_i)
{
  put_lastRegulatorMode(In_lastRegulatorMode);
  put_current_tempWstatus(current_tempWstatus);
  put_interface_failure(interface_failure);
  put_internal_failure(internal_failure);
}

pub struct PreStateContainer {
  pub api_current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  pub api_interface_failure: Isolette_Data_Model::Failure_Flag_i,
  pub api_internal_failure: Isolette_Data_Model::Failure_Flag_i
}

pub fn put_concrete_inputs_container(container: PreStateContainer)
{
  put_current_tempWstatus(container.api_current_tempWstatus);
  put_interface_failure(container.api_interface_failure);
  put_internal_failure(container.api_internal_failure);
}

pub fn put_concrete_inputs(
  current_tempWstatus: Isolette_Data_Model::TempWstatus_i,
  interface_failure: Isolette_Data_Model::Failure_Flag_i,
  internal_failure: Isolette_Data_Model::Failure_Flag_i)
{
  put_current_tempWstatus(current_tempWstatus);
  put_interface_failure(interface_failure);
  put_internal_failure(internal_failure);
}

/// setter for IN DataPort
pub fn put_current_tempWstatus(value: Isolette_Data_Model::TempWstatus_i)
{
  *extern_api::IN_current_tempWstatus.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_interface_failure(value: Isolette_Data_Model::Failure_Flag_i)
{
  *extern_api::IN_interface_failure.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_internal_failure(value: Isolette_Data_Model::Failure_Flag_i)
{
  *extern_api::IN_internal_failure.lock().unwrap() = Some(value)
}

/// getter for OUT DataPort
pub fn get_regulator_mode() -> Isolette_Data_Model::Regulator_Mode
{
  return extern_api::OUT_regulator_mode.lock().unwrap().expect("Not expecting None")
}

pub fn get_lastRegulatorMode() -> Isolette_Data_Model::Regulator_Mode
{
  unsafe {
    match &crate::app {
      Some(inner) => inner.lastRegulatorMode,
      None => panic!("The app is None")
    }
  }
}

pub fn put_lastRegulatorMode(value: Isolette_Data_Model::Regulator_Mode)
{
  unsafe {
    match &mut crate::app {
      Some(inner) => inner.lastRegulatorMode = value,
      None => panic!("The app is None")
    }
  }
}
