// Do not edit this file as it will be overwritten if codegen is rerun

//! C-interface for the component.
//! This code must be unsafe.
//! Assumptions about correctness are introduced and need to be verified by other means.

use data::*;

#[cfg(test)]
use std::sync::Mutex;

#[cfg(not(test))]
extern "C" {
  fn get_display_temperature(value: *mut Isolette_Data_Model::Temp_i) -> bool;
  fn get_regulator_status(value: *mut Isolette_Data_Model::Status) -> bool;
  fn get_monitor_status(value: *mut Isolette_Data_Model::Status) -> bool;
  fn get_alarm_control(value: *mut Isolette_Data_Model::On_Off) -> bool;
  fn put_lower_desired_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool;
  fn put_upper_desired_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool;
  fn put_lower_alarm_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool;
  fn put_upper_alarm_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool;
}

pub fn unsafe_get_display_temperature() -> Isolette_Data_Model::Temp_i
{
  unsafe {
    let value: *mut Isolette_Data_Model::Temp_i = &mut Isolette_Data_Model::Temp_i::default();
    get_display_temperature(value);
    return *value;
  }
}

pub fn unsafe_get_regulator_status() -> Isolette_Data_Model::Status
{
  unsafe {
    let value: *mut Isolette_Data_Model::Status = &mut Isolette_Data_Model::Status::default();
    get_regulator_status(value);
    return *value;
  }
}

pub fn unsafe_get_monitor_status() -> Isolette_Data_Model::Status
{
  unsafe {
    let value: *mut Isolette_Data_Model::Status = &mut Isolette_Data_Model::Status::default();
    get_monitor_status(value);
    return *value;
  }
}

pub fn unsafe_get_alarm_control() -> Isolette_Data_Model::On_Off
{
  unsafe {
    let value: *mut Isolette_Data_Model::On_Off = &mut Isolette_Data_Model::On_Off::default();
    get_alarm_control(value);
    return *value;
  }
}

pub fn unsafe_put_lower_desired_tempWstatus(value: &Isolette_Data_Model::TempWstatus_i) -> bool
{
  unsafe {
    return put_lower_desired_tempWstatus(value as *const Isolette_Data_Model::TempWstatus_i as *mut Isolette_Data_Model::TempWstatus_i);
  }
}

pub fn unsafe_put_upper_desired_tempWstatus(value: &Isolette_Data_Model::TempWstatus_i) -> bool
{
  unsafe {
    return put_upper_desired_tempWstatus(value as *const Isolette_Data_Model::TempWstatus_i as *mut Isolette_Data_Model::TempWstatus_i);
  }
}

pub fn unsafe_put_lower_alarm_tempWstatus(value: &Isolette_Data_Model::TempWstatus_i) -> bool
{
  unsafe {
    return put_lower_alarm_tempWstatus(value as *const Isolette_Data_Model::TempWstatus_i as *mut Isolette_Data_Model::TempWstatus_i);
  }
}

pub fn unsafe_put_upper_alarm_tempWstatus(value: &Isolette_Data_Model::TempWstatus_i) -> bool
{
  unsafe {
    return put_upper_alarm_tempWstatus(value as *const Isolette_Data_Model::TempWstatus_i as *mut Isolette_Data_Model::TempWstatus_i);
  }
}

//////////////////////////////////////////////////////////////////////////////////
// Testing Versions
//////////////////////////////////////////////////////////////////////////////////

#[cfg(test)]
lazy_static::lazy_static! {
  // simulate the global C variables that point to the microkit shared memory regions.  In a full
  // microkit system we would be able to mutate the shared memory for out ports since they're r/w,
  // but we couldn't do that for in ports since they are read-only
  pub static ref IN_display_temperature: Mutex<Option<Isolette_Data_Model::Temp_i>> = Mutex::new(None);
  pub static ref IN_regulator_status: Mutex<Option<Isolette_Data_Model::Status>> = Mutex::new(None);
  pub static ref IN_monitor_status: Mutex<Option<Isolette_Data_Model::Status>> = Mutex::new(None);
  pub static ref IN_alarm_control: Mutex<Option<Isolette_Data_Model::On_Off>> = Mutex::new(None);
  pub static ref OUT_lower_desired_tempWstatus: Mutex<Option<Isolette_Data_Model::TempWstatus_i>> = Mutex::new(None);
  pub static ref OUT_upper_desired_tempWstatus: Mutex<Option<Isolette_Data_Model::TempWstatus_i>> = Mutex::new(None);
  pub static ref OUT_lower_alarm_tempWstatus: Mutex<Option<Isolette_Data_Model::TempWstatus_i>> = Mutex::new(None);
  pub static ref OUT_upper_alarm_tempWstatus: Mutex<Option<Isolette_Data_Model::TempWstatus_i>> = Mutex::new(None);
}

#[cfg(test)]
pub fn initialize_test_globals() {
  unsafe {
    *IN_display_temperature.lock().unwrap() = None;
    *IN_regulator_status.lock().unwrap() = None;
    *IN_monitor_status.lock().unwrap() = None;
    *IN_alarm_control.lock().unwrap() = None;
    *OUT_lower_desired_tempWstatus.lock().unwrap() = None;
    *OUT_upper_desired_tempWstatus.lock().unwrap() = None;
    *OUT_lower_alarm_tempWstatus.lock().unwrap() = None;
    *OUT_upper_alarm_tempWstatus.lock().unwrap() = None;
  }
}

#[cfg(test)]
pub fn get_display_temperature(value: *mut Isolette_Data_Model::Temp_i) -> bool
{
  unsafe {
    *value = IN_display_temperature.lock().unwrap().expect("Not expecting None");
    return true;
  }
}

#[cfg(test)]
pub fn get_regulator_status(value: *mut Isolette_Data_Model::Status) -> bool
{
  unsafe {
    *value = IN_regulator_status.lock().unwrap().expect("Not expecting None");
    return true;
  }
}

#[cfg(test)]
pub fn get_monitor_status(value: *mut Isolette_Data_Model::Status) -> bool
{
  unsafe {
    *value = IN_monitor_status.lock().unwrap().expect("Not expecting None");
    return true;
  }
}

#[cfg(test)]
pub fn get_alarm_control(value: *mut Isolette_Data_Model::On_Off) -> bool
{
  unsafe {
    *value = IN_alarm_control.lock().unwrap().expect("Not expecting None");
    return true;
  }
}

#[cfg(test)]
pub fn put_lower_desired_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool
{
  unsafe {
    *OUT_lower_desired_tempWstatus.lock().unwrap() = Some(*value);
    return true;
  }
}

#[cfg(test)]
pub fn put_upper_desired_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool
{
  unsafe {
    *OUT_upper_desired_tempWstatus.lock().unwrap() = Some(*value);
    return true;
  }
}

#[cfg(test)]
pub fn put_lower_alarm_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool
{
  unsafe {
    *OUT_lower_alarm_tempWstatus.lock().unwrap() = Some(*value);
    return true;
  }
}

#[cfg(test)]
pub fn put_upper_alarm_tempWstatus(value: *mut Isolette_Data_Model::TempWstatus_i) -> bool
{
  unsafe {
    *OUT_upper_alarm_tempWstatus.lock().unwrap() = Some(*value);
    return true;
  }
}
