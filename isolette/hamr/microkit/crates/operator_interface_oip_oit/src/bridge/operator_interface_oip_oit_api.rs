// Do not edit this file as it will be overwritten if codegen is rerun

use vstd::prelude::*;
use data::*;
use super::extern_c_api as extern_api;

verus! {
  pub trait operator_interface_oip_oit_Api {}

  pub trait operator_interface_oip_oit_Put_Api: operator_interface_oip_oit_Api {
    #[verifier::external_body]
    fn unverified_put_lower_desired_tempWstatus(
      &mut self,
      value: Isolette_Data_Model::TempWstatus_i)
    {
      extern_api::unsafe_put_lower_desired_tempWstatus(&value);
    }

    #[verifier::external_body]
    fn unverified_put_upper_desired_tempWstatus(
      &mut self,
      value: Isolette_Data_Model::TempWstatus_i)
    {
      extern_api::unsafe_put_upper_desired_tempWstatus(&value);
    }

    #[verifier::external_body]
    fn unverified_put_lower_alarm_tempWstatus(
      &mut self,
      value: Isolette_Data_Model::TempWstatus_i)
    {
      extern_api::unsafe_put_lower_alarm_tempWstatus(&value);
    }

    #[verifier::external_body]
    fn unverified_put_upper_alarm_tempWstatus(
      &mut self,
      value: Isolette_Data_Model::TempWstatus_i)
    {
      extern_api::unsafe_put_upper_alarm_tempWstatus(&value);
    }
  }

  pub trait operator_interface_oip_oit_Get_Api: operator_interface_oip_oit_Api {
    #[verifier::external_body]
    fn unverified_get_display_temperature(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Temp_i>) -> (res : Isolette_Data_Model::Temp_i)
      ensures
        res == value@
    {
      return extern_api::unsafe_get_display_temperature();
    }

    #[verifier::external_body]
    fn unverified_get_regulator_status(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Status>) -> (res : Isolette_Data_Model::Status)
      ensures
        res == value@
    {
      return extern_api::unsafe_get_regulator_status();
    }

    #[verifier::external_body]
    fn unverified_get_monitor_status(
      &mut self,
      value: &Ghost<Isolette_Data_Model::Status>) -> (res : Isolette_Data_Model::Status)
      ensures
        res == value@
    {
      return extern_api::unsafe_get_monitor_status();
    }

    #[verifier::external_body]
    fn unverified_get_alarm_control(
      &mut self,
      value: &Ghost<Isolette_Data_Model::On_Off>) -> (res : Isolette_Data_Model::On_Off)
      ensures
        res == value@
    {
      return extern_api::unsafe_get_alarm_control();
    }
  }

  pub trait operator_interface_oip_oit_Full_Api: operator_interface_oip_oit_Put_Api + operator_interface_oip_oit_Get_Api {}

  pub struct operator_interface_oip_oit_Application_Api<API: operator_interface_oip_oit_Api> {
    pub api: API,

    pub ghost display_temperature: Isolette_Data_Model::Temp_i,
    pub ghost regulator_status: Isolette_Data_Model::Status,
    pub ghost monitor_status: Isolette_Data_Model::Status,
    pub ghost alarm_control: Isolette_Data_Model::On_Off,
    pub ghost lower_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost upper_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost lower_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i,
    pub ghost upper_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i
  }

  impl<API: operator_interface_oip_oit_Put_Api> operator_interface_oip_oit_Application_Api<API> {
    pub fn put_lower_desired_tempWstatus(
      &mut self,
      value: Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).regulator_status == self.regulator_status,
        old(self).monitor_status == self.monitor_status,
        old(self).display_temperature == self.display_temperature,
        old(self).alarm_control == self.alarm_control,
        self.lower_desired_tempWstatus == value,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus
    {
      self.api.unverified_put_lower_desired_tempWstatus(value);
      self.lower_desired_tempWstatus = value;
    }
    pub fn put_upper_desired_tempWstatus(
      &mut self,
      value: Isolette_Data_Model::TempWstatus_i)
      ensures
        old(self).regulator_status == self.regulator_status,
        old(self).monitor_status == self.monitor_status,
        old(self).display_temperature == self.display_temperature,
        old(self).alarm_control == self.alarm_control,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        self.upper_desired_tempWstatus == value,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus
    {
      self.api.unverified_put_upper_desired_tempWstatus(value);
      self.upper_desired_tempWstatus = value;
    }
    pub fn put_lower_alarm_tempWstatus(
      &mut self,
      value: Isolette_Data_Model::TempWstatus_i)
      requires
        // guarantee Table_A_12_LowerAlarmTemp
        //   Range [96..101]
        //   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=112 
        (96i32 <= value.degrees) &&
          (value.degrees <= 101i32)
      ensures
        old(self).regulator_status == self.regulator_status,
        old(self).monitor_status == self.monitor_status,
        old(self).display_temperature == self.display_temperature,
        old(self).alarm_control == self.alarm_control,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        self.lower_alarm_tempWstatus == value,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus
    {
      self.api.unverified_put_lower_alarm_tempWstatus(value);
      self.lower_alarm_tempWstatus = value;
    }
    pub fn put_upper_alarm_tempWstatus(
      &mut self,
      value: Isolette_Data_Model::TempWstatus_i)
      requires
        // guarantee Table_A_12_UpperAlarmTemp
        //   Range [97..102]
        //   http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf#page=112 
        (97i32 <= value.degrees) &&
          (value.degrees <= 102i32)
      ensures
        old(self).regulator_status == self.regulator_status,
        old(self).monitor_status == self.monitor_status,
        old(self).display_temperature == self.display_temperature,
        old(self).alarm_control == self.alarm_control,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        self.upper_alarm_tempWstatus == value
    {
      self.api.unverified_put_upper_alarm_tempWstatus(value);
      self.upper_alarm_tempWstatus = value;
    }
  }

  impl<API: operator_interface_oip_oit_Get_Api> operator_interface_oip_oit_Application_Api<API> {
    pub fn get_display_temperature(&mut self) -> (res : Isolette_Data_Model::Temp_i)
      ensures
        old(self).regulator_status == self.regulator_status,
        old(self).monitor_status == self.monitor_status,
        old(self).display_temperature == self.display_temperature,
        res == self.display_temperature,
        old(self).alarm_control == self.alarm_control,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus
    {
      self.api.unverified_get_display_temperature(&Ghost(self.display_temperature))
    }
    pub fn get_regulator_status(&mut self) -> (res : Isolette_Data_Model::Status)
      ensures
        old(self).regulator_status == self.regulator_status,
        res == self.regulator_status,
        old(self).monitor_status == self.monitor_status,
        old(self).display_temperature == self.display_temperature,
        old(self).alarm_control == self.alarm_control,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus
    {
      self.api.unverified_get_regulator_status(&Ghost(self.regulator_status))
    }
    pub fn get_monitor_status(&mut self) -> (res : Isolette_Data_Model::Status)
      ensures
        old(self).regulator_status == self.regulator_status,
        old(self).monitor_status == self.monitor_status,
        res == self.monitor_status,
        old(self).display_temperature == self.display_temperature,
        old(self).alarm_control == self.alarm_control,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus
    {
      self.api.unverified_get_monitor_status(&Ghost(self.monitor_status))
    }
    pub fn get_alarm_control(&mut self) -> (res : Isolette_Data_Model::On_Off)
      ensures
        old(self).regulator_status == self.regulator_status,
        old(self).monitor_status == self.monitor_status,
        old(self).display_temperature == self.display_temperature,
        old(self).alarm_control == self.alarm_control,
        res == self.alarm_control,
        old(self).lower_desired_tempWstatus == self.lower_desired_tempWstatus,
        old(self).upper_desired_tempWstatus == self.upper_desired_tempWstatus,
        old(self).lower_alarm_tempWstatus == self.lower_alarm_tempWstatus,
        old(self).upper_alarm_tempWstatus == self.upper_alarm_tempWstatus
    {
      self.api.unverified_get_alarm_control(&Ghost(self.alarm_control))
    }
  }

  pub struct operator_interface_oip_oit_Initialization_Api;
  impl operator_interface_oip_oit_Api for operator_interface_oip_oit_Initialization_Api {}
  impl operator_interface_oip_oit_Put_Api for operator_interface_oip_oit_Initialization_Api {}

  pub const fn init_api() -> operator_interface_oip_oit_Application_Api<operator_interface_oip_oit_Initialization_Api> {
    return operator_interface_oip_oit_Application_Api {
      api: operator_interface_oip_oit_Initialization_Api {},

      display_temperature: Isolette_Data_Model::Temp_i { degrees: 0 },
      regulator_status: Isolette_Data_Model::Status::Init_Status,
      monitor_status: Isolette_Data_Model::Status::Init_Status,
      alarm_control: Isolette_Data_Model::On_Off::Onn,
      lower_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      lower_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid }
    }
  }

  pub struct operator_interface_oip_oit_Compute_Api;
  impl operator_interface_oip_oit_Api for operator_interface_oip_oit_Compute_Api {}
  impl operator_interface_oip_oit_Put_Api for operator_interface_oip_oit_Compute_Api {}
  impl operator_interface_oip_oit_Get_Api for operator_interface_oip_oit_Compute_Api {}
  impl operator_interface_oip_oit_Full_Api for operator_interface_oip_oit_Compute_Api {}

  pub const fn compute_api() -> operator_interface_oip_oit_Application_Api<operator_interface_oip_oit_Compute_Api> {
    return operator_interface_oip_oit_Application_Api {
      api: operator_interface_oip_oit_Compute_Api {},

      display_temperature: Isolette_Data_Model::Temp_i { degrees: 0 },
      regulator_status: Isolette_Data_Model::Status::Init_Status,
      monitor_status: Isolette_Data_Model::Status::Init_Status,
      alarm_control: Isolette_Data_Model::On_Off::Onn,
      lower_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_desired_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      lower_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid },
      upper_alarm_tempWstatus: Isolette_Data_Model::TempWstatus_i { degrees: 0, status: Isolette_Data_Model::ValueStatus::Valid }
    }
  }
}