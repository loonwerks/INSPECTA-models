// Do not edit this file as it will be overwritten if codegen is rerun

use crate::bridge::extern_c_api as extern_api;
use data::*;

use proptest::prelude::*;

pub struct PreStateContainer {
  pub api_regulator_status: Isolette_Data_Model::Status,
  pub api_monitor_status: Isolette_Data_Model::Status,
  pub api_display_temperature: Isolette_Data_Model::Temp_i,
  pub api_alarm_control: Isolette_Data_Model::On_Off
}

pub fn put_concrete_inputs_container(container: PreStateContainer)
{
  put_regulator_status(container.api_regulator_status);
  put_monitor_status(container.api_monitor_status);
  put_display_temperature(container.api_display_temperature);
  put_alarm_control(container.api_alarm_control);
}

pub fn put_concrete_inputs(
  regulator_status: Isolette_Data_Model::Status,
  monitor_status: Isolette_Data_Model::Status,
  display_temperature: Isolette_Data_Model::Temp_i,
  alarm_control: Isolette_Data_Model::On_Off)
{
  put_regulator_status(regulator_status);
  put_monitor_status(monitor_status);
  put_display_temperature(display_temperature);
  put_alarm_control(alarm_control);
}

/// setter for IN DataPort
pub fn put_regulator_status(value: Isolette_Data_Model::Status)
{
  *extern_api::IN_regulator_status.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_monitor_status(value: Isolette_Data_Model::Status)
{
  *extern_api::IN_monitor_status.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_display_temperature(value: Isolette_Data_Model::Temp_i)
{
  *extern_api::IN_display_temperature.lock().unwrap() = Some(value)
}

/// setter for IN DataPort
pub fn put_alarm_control(value: Isolette_Data_Model::On_Off)
{
  *extern_api::IN_alarm_control.lock().unwrap() = Some(value)
}

/// getter for OUT DataPort
pub fn get_lower_desired_tempWstatus() -> Isolette_Data_Model::TempWstatus_i
{
  return extern_api::OUT_lower_desired_tempWstatus.lock().unwrap().expect("Not expecting None")
}

/// getter for OUT DataPort
pub fn get_upper_desired_tempWstatus() -> Isolette_Data_Model::TempWstatus_i
{
  return extern_api::OUT_upper_desired_tempWstatus.lock().unwrap().expect("Not expecting None")
}

/// getter for OUT DataPort
pub fn get_lower_alarm_tempWstatus() -> Isolette_Data_Model::TempWstatus_i
{
  return extern_api::OUT_lower_alarm_tempWstatus.lock().unwrap().expect("Not expecting None")
}

/// getter for OUT DataPort
pub fn get_upper_alarm_tempWstatus() -> Isolette_Data_Model::TempWstatus_i
{
  return extern_api::OUT_upper_alarm_tempWstatus.lock().unwrap().expect("Not expecting None")
}
