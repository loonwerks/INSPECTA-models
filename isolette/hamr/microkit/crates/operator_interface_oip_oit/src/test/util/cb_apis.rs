// Do not edit this file as it will be overwritten if codegen is rerun

use data::*;

use proptest::prelude::*;

use super::test_apis::*;

use crate::bridge::operator_interface_oip_oit_GUMBOX as GUMBOX;

pub enum HarnessResult {
  RejectedPrecondition,
  FailedPostcondition(TestCaseError),
  Passed,
}

/** Contract-based test harness for the initialize entry point
  */
pub fn testInitializeCB() -> HarnessResult
{
  // [InvokeEntryPoint]: Invoke the entry point
  crate::operator_interface_oip_oit_initialize();

  // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
  let api_lower_alarm_tempWstatus = get_lower_alarm_tempWstatus();
  let api_lower_desired_tempWstatus = get_lower_desired_tempWstatus();
  let api_upper_alarm_tempWstatus = get_upper_alarm_tempWstatus();
  let api_upper_desired_tempWstatus = get_upper_desired_tempWstatus();

  // [CheckPost]: invoke the oracle function
  if !GUMBOX::initialize_IEP_Post (api_lower_alarm_tempWstatus, api_lower_desired_tempWstatus, api_upper_alarm_tempWstatus, api_upper_desired_tempWstatus) {
    return HarnessResult::FailedPostcondition(
      TestCaseError::Fail("Postcondition failed: incorrect output behavior".into())
    );
  }

  return HarnessResult::Passed
}

#[macro_export]
macro_rules!
testInitializeCB_macro {
  (
    $test_name: ident,
    config: $config:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(empty in ::proptest::strategy::Just(())) {
        match $crate::test::util::cb_apis::testInitializeCB() {
          $crate::test::util::cb_apis::HarnessResult::RejectedPrecondition => {
            unreachable!("This branch is infeasible")
          }
          $crate::test::util::cb_apis::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::test::util::cb_apis::HarnessResult::Passed => { }
        }
      }
    }
  };
}

/** Contract-based test harness for the compute entry point
  *
  * @param api_alarm_control incoming data port
  * @param api_display_temperature incoming data port
  * @param api_monitor_status incoming data port
  * @param api_regulator_status incoming data port
  */
pub fn testComputeCB(
  api_alarm_control: Isolette_Data_Model::On_Off,
  api_display_temperature: Isolette_Data_Model::Temp_i,
  api_monitor_status: Isolette_Data_Model::Status,
  api_regulator_status: Isolette_Data_Model::Status) -> HarnessResult
{
  // Initialize the app
  crate::operator_interface_oip_oit_initialize();

  // [PutInPorts]: Set values on the input ports
  put_alarm_control(api_alarm_control);
  put_display_temperature(api_display_temperature);
  put_monitor_status(api_monitor_status);
  put_regulator_status(api_regulator_status);

  // [InvokeEntryPoint]: Invoke the entry point
  crate::operator_interface_oip_oit_timeTriggered();

  // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
  let api_lower_alarm_tempWstatus = get_lower_alarm_tempWstatus();
  let api_lower_desired_tempWstatus = get_lower_desired_tempWstatus();
  let api_upper_alarm_tempWstatus = get_upper_alarm_tempWstatus();
  let api_upper_desired_tempWstatus = get_upper_desired_tempWstatus();

  // [CheckPost]: invoke the oracle function
  if !GUMBOX::compute_CEP_Post(api_alarm_control, api_display_temperature, api_monitor_status, api_regulator_status, api_lower_alarm_tempWstatus, api_lower_desired_tempWstatus, api_upper_alarm_tempWstatus, api_upper_desired_tempWstatus) {
    return HarnessResult::FailedPostcondition(TestCaseError::Fail("Postcondition failed: incorrect output behavior".into()));
  }

  return HarnessResult::Passed
}

/** Contract-based test harness for the compute entry point
  */
pub fn testComputeCB_container(container: PreStateContainer) -> HarnessResult
{
  return testComputeCB(container.api_alarm_control, container.api_display_temperature, container.api_monitor_status, container.api_regulator_status)
}

#[macro_export]
macro_rules!
testComputeCB_macro {
  (
    $test_name: ident,
    config: $config:expr,
    api_alarm_control: $api_alarm_control_strat:expr,
    api_display_temperature: $api_display_temperature_strat:expr,
    api_monitor_status: $api_monitor_status_strat:expr,
    api_regulator_status: $api_regulator_status_strat:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        (api_alarm_control, api_display_temperature, api_monitor_status, api_regulator_status)
            in ($api_alarm_control_strat, $api_display_temperature_strat, $api_monitor_status_strat, $api_regulator_status_strat)
      ) {
        match$crate::test::util::cb_apis::testComputeCB(api_alarm_control, api_display_temperature, api_monitor_status, api_regulator_status) {
          $crate::test::util::cb_apis::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::test::util::cb_apis::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::test::util::cb_apis::HarnessResult::Passed => { }
        }
      }
    }
  };
}
