# Do not edit this file as it will be overwritten if codegen is rerun

MICROKIT_TOOL ?= $(MICROKIT_SDK)/bin/microkit

CFLAGS := -mcpu=$(CPU) \
	-mstrict-align \
	-ffreestanding \
	-nostdlib \
	-g3 \
	-O3 \
	-Wall -Wno-unused-function -Werror -Wno-unused-command-line-argument \
	-I$(MICROKIT_BOARD_DIR)/include \
	-target $(TARGET)

LDFLAGS := -L$(MICROKIT_BOARD_DIR)/lib
LIBS := --start-group -lmicrokit -Tmicrokit.ld --end-group

SYSTEM_FILE := $(TOP_DIR)/microkit.system

IMAGES := seL4_ArduPilot_ArduPilot.elf seL4_ArduPilot_ArduPilot_MON.elf seL4_Firewall_Firewall.elf seL4_Firewall_Firewall_MON.elf seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.elf seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_MON.elf pacer.elf
IMAGE_FILE = loader.img
REPORT_FILE = report.txt

UTIL_OBJS = printf.o util.o

TYPES_DIR = $(TOP_DIR)/types
TYPE_OBJS := $(TOP_DIR)/build/sb_queue_SW_StructuredEthernetMessage_i_1.o $(TOP_DIR)/build/sb_queue_SW_StructuredEthernetMessage_i_1.o $(TOP_DIR)/build/sb_queue_SW_StructuredEthernetMessage_i_1.o $(TOP_DIR)/build/sb_queue_SW_StructuredEthernetMessage_i_1.o

# exporting TOP_TYPES_INCLUDE in case other makefiles need it
export TOP_TYPES_INCLUDE = -I$(TYPES_DIR)/include

TOP_INCLUDE = $(TOP_TYPES_INCLUDE) -I$(TOP_DIR)/util/include

all: $(IMAGE_FILE)
	CHECK_FLAGS_BOARD_MD5:=.board_cflags-$(shell echo -- ${CFLAGS} ${MICROKIT_BOARD} ${MICROKIT_CONFIG}| shasum | sed 's/ *-//')

${CHECK_FLAGS_BOARD_MD5}:
	-rm -f .board_cflags-*
	touch $@

%.o: ${TOP_DIR}/util/src/%.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ -I$(TOP_DIR)/util/include

$(TOP_DIR)/build/sb_queue_SW_StructuredEthernetMessage_i_1.o: $(TOP_DIR)/types/src/sb_queue_SW_StructuredEthernetMessage_i_1.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE)


# monitor
seL4_ArduPilot_ArduPilot_MON.o: $(TOP_DIR)/components/seL4_ArduPilot_ArduPilot/src/seL4_ArduPilot_ArduPilot_MON.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/seL4_ArduPilot_ArduPilot/include

# user code
seL4_ArduPilot_ArduPilot_rust:
	make -C ${CRATES_DIR}/seL4_ArduPilot_ArduPilot $(RUST_MAKE_TARGET)

seL4_ArduPilot_ArduPilot.o: $(TOP_DIR)/components/seL4_ArduPilot_ArduPilot/src/seL4_ArduPilot_ArduPilot.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/seL4_ArduPilot_ArduPilot/include

# monitor
seL4_Firewall_Firewall_MON.o: $(TOP_DIR)/components/seL4_Firewall_Firewall/src/seL4_Firewall_Firewall_MON.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/seL4_Firewall_Firewall/include

# user code
seL4_Firewall_Firewall_rust:
	make -C ${CRATES_DIR}/seL4_Firewall_Firewall $(RUST_MAKE_TARGET)

seL4_Firewall_Firewall.o: $(TOP_DIR)/components/seL4_Firewall_Firewall/src/seL4_Firewall_Firewall.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/seL4_Firewall_Firewall/include

# monitor
seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_MON.o: $(TOP_DIR)/components/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver/src/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_MON.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver/include

# user code
seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_rust:
	make -C ${CRATES_DIR}/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver $(RUST_MAKE_TARGET)

seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.o: $(TOP_DIR)/components/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver/src/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver/include

pacer.o: $(TOP_DIR)/components/pacer/src/pacer.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ -I$(TOP_INCLUDE)

seL4_ArduPilot_ArduPilot_MON.elf: seL4_ArduPilot_ArduPilot_MON.o
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

seL4_ArduPilot_ArduPilot.elf: $(UTIL_OBJS) $(TYPE_OBJS) seL4_ArduPilot_ArduPilot_rust seL4_ArduPilot_ArduPilot.o
	$(LD) $(LDFLAGS) -L ${CRATES_DIR}/seL4_ArduPilot_ArduPilot/target/aarch64-unknown-none/release $(filter %.o, $^) $(LIBS) -lseL4_ArduPilot_ArduPilot -o $@

seL4_Firewall_Firewall_MON.elf: seL4_Firewall_Firewall_MON.o
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

seL4_Firewall_Firewall.elf: $(UTIL_OBJS) $(TYPE_OBJS) seL4_Firewall_Firewall_rust seL4_Firewall_Firewall.o
	$(LD) $(LDFLAGS) -L ${CRATES_DIR}/seL4_Firewall_Firewall/target/aarch64-unknown-none/release $(filter %.o, $^) $(LIBS) -lseL4_Firewall_Firewall -o $@

seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_MON.elf: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_MON.o
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.elf: $(UTIL_OBJS) $(TYPE_OBJS) seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_rust seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.o
	$(LD) $(LDFLAGS) -L ${CRATES_DIR}/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver/target/aarch64-unknown-none/release $(filter %.o, $^) $(LIBS) -lseL4_LowLevelEthernetDriver_LowLevelEthernetDriver -o $@

pacer.elf: $(UTIL_OBJS) $(TYPE_OBJS) pacer.o
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

$(IMAGE_FILE): $(IMAGES) $(SYSTEM_FILE)
	$(MICROKIT_TOOL) $(SYSTEM_FILE) --search-path $(TOP_BUILD_DIR) --board $(MICROKIT_BOARD) --config $(MICROKIT_CONFIG) -o $(IMAGE_FILE) -r $(REPORT_FILE)


qemu: $(IMAGE_FILE)
	$(QEMU) -machine virt,virtualization=on \
			-cpu cortex-a53 \
			-serial mon:stdio \
			-device loader,file=$(IMAGE_FILE),addr=0x70000000,cpu-num=0 \
			-m size=2G \
			-nographic

clean::
	rm -f *.o

test:: 
	make -C ${CRATES_DIR}/seL4_ArduPilot_ArduPilot test
	make -C ${CRATES_DIR}/seL4_Firewall_Firewall test
	make -C ${CRATES_DIR}/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver test

clean:: 
	make -C ${CRATES_DIR}/seL4_ArduPilot_ArduPilot clean
	make -C ${CRATES_DIR}/seL4_Firewall_Firewall clean
	make -C ${CRATES_DIR}/seL4_LowLevelEthernetDriver_LowLevelEthernetDriver clean

verus: 
	make -C ${CRATES_DIR}/seL4_Firewall_Firewall verus
