#![cfg(test)]

// Do not edit this file as it will be overwritten if codegen is rerun

use crate::bridge::extern_c_api as extern_api;
use data::*;

use proptest::prelude::*;

use crate::bridge::seL4_ArduPilot_ArduPilot_GUMBOX as GUMBOX;

pub struct PreStateContainer {
  pub api_EthernetFramesRx: Option<SW::StructuredEthernetMessage_i>
}

pub fn put_concrete_inputs_container(container: PreStateContainer)
{
  put_EthernetFramesRx(container.api_EthernetFramesRx);
}

pub fn put_concrete_inputs(EthernetFramesRx: Option<SW::StructuredEthernetMessage_i>)
{
  put_EthernetFramesRx(EthernetFramesRx);
}

/// setter for IN EventDataPort
pub fn put_EthernetFramesRx(value: Option<SW::StructuredEthernetMessage_i>)
{
  *extern_api::IN_EthernetFramesRx.lock().unwrap() = value
}

/// getter for OUT EventDataPort
pub fn get_EthernetFramesTx() -> Option<SW::StructuredEthernetMessage_i>
{
  return extern_api::OUT_EthernetFramesTx.lock().unwrap().clone()
}

pub fn option_strategy_default
  <T: Clone + std::fmt::Debug, 
   S:  Strategy<Value = T>> (base: S) -> impl Strategy<Value = Option<T>>
{
  option_strategy_bias(1, base)
}

pub fn option_strategy_bias
  <T: Clone + std::fmt::Debug, 
   S:  Strategy<Value = T>> (
  bias: u32,
  base: S) -> impl Strategy<Value = Option<T>>
{
  prop_oneof![
    bias => base.prop_map(Some),
    1 => Just(None),
  ]
}

pub fn SW_InternetProtocol_strategy_default() -> impl Strategy<Value = SW::InternetProtocol>
{
  SW_InternetProtocol_strategy_cust(1, 1)
}

pub fn SW_InternetProtocol_strategy_cust(
  IPV4_bias: u32,
  IPV6_bias: u32) -> impl Strategy<Value = SW::InternetProtocol>
{
  prop_oneof![
    IPV4_bias => Just(SW::InternetProtocol::IPV4),
    IPV6_bias => Just(SW::InternetProtocol::IPV6)
  ]
}

pub fn SW_FrameProtocol_strategy_default() -> impl Strategy<Value = SW::FrameProtocol>
{
  SW_FrameProtocol_strategy_cust(1, 1)
}

pub fn SW_FrameProtocol_strategy_cust(
  TCP_bias: u32,
  ARP_bias: u32) -> impl Strategy<Value = SW::FrameProtocol>
{
  prop_oneof![
    TCP_bias => Just(SW::FrameProtocol::TCP),
    ARP_bias => Just(SW::FrameProtocol::ARP)
  ]
}

pub fn SW_ARP_Type_strategy_default() -> impl Strategy<Value = SW::ARP_Type>
{
  SW_ARP_Type_strategy_cust(1, 1, 1)
}

pub fn SW_ARP_Type_strategy_cust(
  REQUEST_bias: u32,
  REPLY_bias: u32,
  NA_bias: u32) -> impl Strategy<Value = SW::ARP_Type>
{
  prop_oneof![
    REQUEST_bias => Just(SW::ARP_Type::REQUEST),
    REPLY_bias => Just(SW::ARP_Type::REPLY),
    NA_bias => Just(SW::ARP_Type::NA)
  ]
}

pub fn SW_RawEthernetMessage_strategy_default() -> impl Strategy<Value = SW::RawEthernetMessage>
{
  SW_RawEthernetMessage_strategy_cust(any::<u8>())
}

pub fn SW_RawEthernetMessage_strategy_cust<u8_strategy: Strategy<Value = u8>> (base_strategy: u8_strategy) -> impl Strategy<Value = SW::RawEthernetMessage>
{
  proptest::collection::vec(base_strategy, SW::SW_RawEthernetMessage_DIM_0)
    .prop_map(|v| {
      let boxed: Box<[u8; SW::SW_RawEthernetMessage_DIM_0]> = v.into_boxed_slice().try_into().unwrap();
      *boxed
  })
}

pub fn SW_StructuredEthernetMessage_i_strategy_default() -> impl Strategy<Value = SW::StructuredEthernetMessage_i>
{
  SW_StructuredEthernetMessage_i_strategy_cust(
    any::<bool>(),
    SW_InternetProtocol_strategy_default(),
    SW_FrameProtocol_strategy_default(),
    any::<bool>(),
    SW_ARP_Type_strategy_default(),
    SW_RawEthernetMessage_strategy_default()
  )
}

pub fn SW_StructuredEthernetMessage_i_strategy_cust
  <malformedFrame_bool_strategy: Strategy<Value = bool>, 
   internetProtocol_SW_InternetProtocol_strategy: Strategy<Value = SW::InternetProtocol>, 
   frameProtocol_SW_FrameProtocol_strategy: Strategy<Value = SW::FrameProtocol>, 
   portIsWhitelisted_bool_strategy: Strategy<Value = bool>, 
   arpType_SW_ARP_Type_strategy: Strategy<Value = SW::ARP_Type>, 
   rawMessage_SW_RawEthernetMessage_strategy: Strategy<Value = SW::RawEthernetMessage>> (
  malformedFrame_strategy: malformedFrame_bool_strategy,
  internetProtocol_strategy: internetProtocol_SW_InternetProtocol_strategy,
  frameProtocol_strategy: frameProtocol_SW_FrameProtocol_strategy,
  portIsWhitelisted_strategy: portIsWhitelisted_bool_strategy,
  arpType_strategy: arpType_SW_ARP_Type_strategy,
  rawMessage_strategy: rawMessage_SW_RawEthernetMessage_strategy) -> impl Strategy<Value = SW::StructuredEthernetMessage_i>
{
  (malformedFrame_strategy, internetProtocol_strategy, frameProtocol_strategy, portIsWhitelisted_strategy, arpType_strategy, rawMessage_strategy).prop_map(|(malformedFrame, internetProtocol, frameProtocol, portIsWhitelisted, arpType, rawMessage)| {
    SW::StructuredEthernetMessage_i { malformedFrame, internetProtocol, frameProtocol, portIsWhitelisted, arpType, rawMessage }
  })
}

pub enum HarnessResult {
  RejectedPrecondition,
  FailedPostcondition(TestCaseError),
  Passed,
}

/** Contract-based test harness for the initialize entry point
  */
pub fn testInitializeCB() -> HarnessResult
{
  // [InvokeEntryPoint]: Invoke the entry point
  crate::seL4_ArduPilot_ArduPilot_initialize();

  return HarnessResult::Passed
}

#[macro_export]
macro_rules!
testInitializeCB_macro {
  (
    $test_name: ident,
    config: $config:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(empty in ::proptest::strategy::Just(())) {
        match $crate::bridge::test_api::testInitializeCB() {
          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {
            unreachable!("This branch is infeasible")
          }
          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::bridge::test_api::HarnessResult::Passed => { }
        }
      }
    }
  };
}

/** Contract-based test harness for the compute entry point
  *
  * @param api_EthernetFramesRx incoming event data port
  */
pub fn testComputeCB(api_EthernetFramesRx: Option<SW::StructuredEthernetMessage_i>) -> HarnessResult
{
  // Initialize the app
  crate::seL4_ArduPilot_ArduPilot_initialize();

  // [PutInPorts]: Set values on the input ports
  put_EthernetFramesRx(api_EthernetFramesRx);

  // [InvokeEntryPoint]: Invoke the entry point
  crate::seL4_ArduPilot_ArduPilot_timeTriggered();

  return HarnessResult::Passed
}

/** Contract-based test harness for the compute entry point
  */
pub fn testComputeCB_container(container: PreStateContainer) -> HarnessResult
{
  return testComputeCB(container.api_EthernetFramesRx)
}

#[macro_export]
macro_rules!
testComputeCB_macro {
  (
    $test_name: ident,
    config: $config:expr,
    api_EthernetFramesRx: $api_EthernetFramesRx_strat:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        (api_EthernetFramesRx)
        in ($api_EthernetFramesRx_strat)
      ) {
        match$crate::bridge::test_api::testComputeCB(api_EthernetFramesRx) {
          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::bridge::test_api::HarnessResult::Passed => { }
        }
      }
    }
  };
}

/** Contract-based test harness for the compute entry point
  *
  * @param api_EthernetFramesRx incoming event data port
  */
pub fn testComputeCBwLV(api_EthernetFramesRx: Option<SW::StructuredEthernetMessage_i>) -> HarnessResult
{
  // Initialize the app
  crate::seL4_ArduPilot_ArduPilot_initialize();

  // [PutInPorts]: Set values on the input ports
  put_EthernetFramesRx(api_EthernetFramesRx);

  // [InvokeEntryPoint]: Invoke the entry point
  crate::seL4_ArduPilot_ArduPilot_timeTriggered();

  return HarnessResult::Passed
}

/** Contract-based test harness for the compute entry point
  */
pub fn testComputeCBwLV_container(container: PreStateContainer_wLV) -> HarnessResult
{
  return testComputeCBwLV(container.api_EthernetFramesRx)
}

#[macro_export]
macro_rules!
testComputeCBwLV_macro {
  (
    $test_name: ident,
    config: $config:expr,
    api_EthernetFramesRx: $api_EthernetFramesRx_strat:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        (api_EthernetFramesRx)
        in ($api_EthernetFramesRx_strat)
      ) {
        match $crate::bridge::test_api::testComputeCBwLV(api_EthernetFramesRx) {
          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::bridge::test_api::HarnessResult::Passed => { }
        }
      }
    }
  };
}