#pragma once

#include <printf.h>
#include <util.h>
#include <stdint.h>
#include <microkit.h>
#include <sb_types.h>

// Do not edit this file as it will be overwritten if codegen is rerun


bool EthernetFramesTxArduPilot0_is_empty(void);
bool get_EthernetFramesTxArduPilot0_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesTxArduPilot0(SW_RawEthernetMessage *data);
bool EthernetFramesTxArduPilot1_is_empty(void);
bool get_EthernetFramesTxArduPilot1_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesTxArduPilot1(SW_RawEthernetMessage *data);
bool EthernetFramesTxArduPilot2_is_empty(void);
bool get_EthernetFramesTxArduPilot2_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesTxArduPilot2(SW_RawEthernetMessage *data);
bool EthernetFramesTxArduPilot3_is_empty(void);
bool get_EthernetFramesTxArduPilot3_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesTxArduPilot3(SW_RawEthernetMessage *data);
bool EthernetFramesRxArduPilot0_is_empty(void);
bool get_EthernetFramesRxArduPilot0_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesRxArduPilot0(SW_RawEthernetMessage *data);
bool EthernetFramesRxArduPilot1_is_empty(void);
bool get_EthernetFramesRxArduPilot1_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesRxArduPilot1(SW_RawEthernetMessage *data);
bool EthernetFramesRxArduPilot2_is_empty(void);
bool get_EthernetFramesRxArduPilot2_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesRxArduPilot2(SW_RawEthernetMessage *data);
bool EthernetFramesRxArduPilot3_is_empty(void);
bool get_EthernetFramesRxArduPilot3_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesRxArduPilot3(SW_RawEthernetMessage *data);
bool EthernetFramesTxDriver0_is_empty(void);
bool get_EthernetFramesTxDriver0_poll(sb_event_counter_t *numDropped, SW_SizedEthernetMessage_Impl *data);
bool get_EthernetFramesTxDriver0(SW_SizedEthernetMessage_Impl *data);
bool EthernetFramesTxDriver1_is_empty(void);
bool get_EthernetFramesTxDriver1_poll(sb_event_counter_t *numDropped, SW_SizedEthernetMessage_Impl *data);
bool get_EthernetFramesTxDriver1(SW_SizedEthernetMessage_Impl *data);
bool EthernetFramesTxDriver2_is_empty(void);
bool get_EthernetFramesTxDriver2_poll(sb_event_counter_t *numDropped, SW_SizedEthernetMessage_Impl *data);
bool get_EthernetFramesTxDriver2(SW_SizedEthernetMessage_Impl *data);
bool EthernetFramesTxDriver3_is_empty(void);
bool get_EthernetFramesTxDriver3_poll(sb_event_counter_t *numDropped, SW_SizedEthernetMessage_Impl *data);
bool get_EthernetFramesTxDriver3(SW_SizedEthernetMessage_Impl *data);
bool EthernetFramesRxDriver0_is_empty(void);
bool get_EthernetFramesRxDriver0_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesRxDriver0(SW_RawEthernetMessage *data);
bool EthernetFramesRxDriver1_is_empty(void);
bool get_EthernetFramesRxDriver1_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesRxDriver1(SW_RawEthernetMessage *data);
bool EthernetFramesRxDriver2_is_empty(void);
bool get_EthernetFramesRxDriver2_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesRxDriver2(SW_RawEthernetMessage *data);
bool EthernetFramesRxDriver3_is_empty(void);
bool get_EthernetFramesRxDriver3_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);
bool get_EthernetFramesRxDriver3(SW_RawEthernetMessage *data);
