#![cfg(test)]

// Do not edit this file as it will be overwritten if codegen is rerun

use crate::bridge::extern_c_api as extern_api;
use data::*;

use proptest::prelude::*;

pub fn put_EthernetFramesTxArduPilot0(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesTxArduPilot0.lock().unwrap() = value
 }

pub fn put_EthernetFramesTxArduPilot1(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesTxArduPilot1.lock().unwrap() = value
 }

pub fn put_EthernetFramesTxArduPilot2(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesTxArduPilot2.lock().unwrap() = value
 }

pub fn put_EthernetFramesTxArduPilot3(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesTxArduPilot3.lock().unwrap() = value
 }

pub fn put_EthernetFramesRxArduPilot0(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesRxArduPilot0.lock().unwrap() = value
 }

pub fn put_EthernetFramesRxArduPilot1(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesRxArduPilot1.lock().unwrap() = value
 }

pub fn put_EthernetFramesRxArduPilot2(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesRxArduPilot2.lock().unwrap() = value
 }

pub fn put_EthernetFramesRxArduPilot3(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesRxArduPilot3.lock().unwrap() = value
 }

pub fn put_EthernetFramesTxDriver0(value: Option<SW::SizedEthernetMessage_Impl>) 
 {
   *extern_api::IN_EthernetFramesTxDriver0.lock().unwrap() = value
 }

pub fn put_EthernetFramesTxDriver1(value: Option<SW::SizedEthernetMessage_Impl>) 
 {
   *extern_api::IN_EthernetFramesTxDriver1.lock().unwrap() = value
 }

pub fn put_EthernetFramesTxDriver2(value: Option<SW::SizedEthernetMessage_Impl>) 
 {
   *extern_api::IN_EthernetFramesTxDriver2.lock().unwrap() = value
 }

pub fn put_EthernetFramesTxDriver3(value: Option<SW::SizedEthernetMessage_Impl>) 
 {
   *extern_api::IN_EthernetFramesTxDriver3.lock().unwrap() = value
 }

pub fn put_EthernetFramesRxDriver0(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesRxDriver0.lock().unwrap() = value
 }

pub fn put_EthernetFramesRxDriver1(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesRxDriver1.lock().unwrap() = value
 }

pub fn put_EthernetFramesRxDriver2(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesRxDriver2.lock().unwrap() = value
 }

pub fn put_EthernetFramesRxDriver3(value: Option<SW::RawEthernetMessage>) 
 {
   *extern_api::IN_EthernetFramesRxDriver3.lock().unwrap() = value
 }

pub fn option_strategy_default
  <T: Clone + std::fmt::Debug, 
   S:  Strategy<Value = T>> (base: S) -> impl Strategy<Value = Option<T>> 
 {
   option_strategy_bias(1, base)
 }

pub fn option_strategy_bias
  <T: Clone + std::fmt::Debug, 
   S:  Strategy<Value = T>> (
  bias: u32,
  base: S) -> impl Strategy<Value = Option<T>> 
 {
   prop_oneof![
     bias => base.prop_map(Some),
     1 => Just(None),
   ]
 }

pub fn SW_RawEthernetMessage_strategy_default() -> impl Strategy<Value = SW::RawEthernetMessage> 
 {
   SW_RawEthernetMessage_stategy_cust(any::<u8>())
 }

pub fn SW_RawEthernetMessage_stategy_cust<u8_strategy: Strategy<Value = u8>> (base_strategy: u8_strategy) -> impl Strategy<Value = SW::RawEthernetMessage> 
 {
   proptest::collection::vec(base_strategy, SW::SW_RawEthernetMessage_DIM_0)
     .prop_map(|v| {
       let boxed: Box<[u8; SW::SW_RawEthernetMessage_DIM_0]> = v.into_boxed_slice().try_into().unwrap();
       *boxed
   })
 }

pub fn SW_u16Array_strategy_default() -> impl Strategy<Value = SW::u16Array> 
 {
   SW_u16Array_stategy_cust(any::<u16>())
 }

pub fn SW_u16Array_stategy_cust<u16_strategy: Strategy<Value = u16>> (base_strategy: u16_strategy) -> impl Strategy<Value = SW::u16Array> 
 {
   proptest::collection::vec(base_strategy, SW::SW_u16Array_DIM_0)
     .prop_map(|v| {
       let boxed: Box<[u16; SW::SW_u16Array_DIM_0]> = v.into_boxed_slice().try_into().unwrap();
       *boxed
   })
 }

pub fn SW_SizedEthernetMessage_Impl_strategy_default() -> impl Strategy<Value = SW::SizedEthernetMessage_Impl> 
 {
   SW_SizedEthernetMessage_Impl_stategy_cust(
     SW_RawEthernetMessage_strategy_default(),
     any::<u16>()
   )
 }

pub fn SW_SizedEthernetMessage_Impl_stategy_cust
  <SW_RawEthernetMessage_strategy: Strategy<Value = SW::RawEthernetMessage>, 
   u16_strategy: Strategy<Value = u16>> (
  message_strategy: SW_RawEthernetMessage_strategy,
  sz_strategy: u16_strategy) -> impl Strategy<Value = SW::SizedEthernetMessage_Impl> 
 {
   (message_strategy, sz_strategy).prop_map(|(message, sz)| {
     SW::SizedEthernetMessage_Impl { message, sz }
   })
 }