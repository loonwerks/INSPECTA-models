// Do not edit this file as it will be overwritten if codegen is rerun

use vstd::prelude::*;
use crate::data::*;
use super::extern_c_api as extern_api;

verus! {
  pub trait seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api {}

  pub trait seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api {
    #[verifier::external_body]
    fn unverified_put_EthernetFramesRx0(
      &mut self,
      value: SW::RawEthernetMessage_Impl) 
    {
      extern_api::unsafe_put_EthernetFramesRx0(&value);
    }

    #[verifier::external_body]
    fn unverified_put_EthernetFramesRx1(
      &mut self,
      value: SW::RawEthernetMessage_Impl) 
    {
      extern_api::unsafe_put_EthernetFramesRx1(&value);
    }

    #[verifier::external_body]
    fn unverified_put_EthernetFramesRx2(
      &mut self,
      value: SW::RawEthernetMessage_Impl) 
    {
      extern_api::unsafe_put_EthernetFramesRx2(&value);
    }

    #[verifier::external_body]
    fn unverified_put_EthernetFramesRx3(
      &mut self,
      value: SW::RawEthernetMessage_Impl) 
    {
      extern_api::unsafe_put_EthernetFramesRx3(&value);
    }
  }

  pub trait seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api {
    #[verifier::external_body]
    fn unverified_get_EthernetFramesTx0(
      &mut self,
      value: &Ghost<Option<SW::SizedEthernetMessage_Impl>>) -> (res : Option<SW::SizedEthernetMessage_Impl>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_EthernetFramesTx0();
    }

    #[verifier::external_body]
    fn unverified_get_EthernetFramesTx1(
      &mut self,
      value: &Ghost<Option<SW::SizedEthernetMessage_Impl>>) -> (res : Option<SW::SizedEthernetMessage_Impl>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_EthernetFramesTx1();
    }

    #[verifier::external_body]
    fn unverified_get_EthernetFramesTx2(
      &mut self,
      value: &Ghost<Option<SW::SizedEthernetMessage_Impl>>) -> (res : Option<SW::SizedEthernetMessage_Impl>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_EthernetFramesTx2();
    }

    #[verifier::external_body]
    fn unverified_get_EthernetFramesTx3(
      &mut self,
      value: &Ghost<Option<SW::SizedEthernetMessage_Impl>>) -> (res : Option<SW::SizedEthernetMessage_Impl>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_EthernetFramesTx3();
    }
  }

  pub trait seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Full_Api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api + seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api {}

  pub struct seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api> {
    pub api: API,

    pub ghost EthernetFramesTx0: Option<SW::SizedEthernetMessage_Impl>,
    pub ghost EthernetFramesTx1: Option<SW::SizedEthernetMessage_Impl>,
    pub ghost EthernetFramesTx2: Option<SW::SizedEthernetMessage_Impl>,
    pub ghost EthernetFramesTx3: Option<SW::SizedEthernetMessage_Impl>,
    pub ghost EthernetFramesRx0: Option<SW::RawEthernetMessage_Impl>,
    pub ghost EthernetFramesRx1: Option<SW::RawEthernetMessage_Impl>,
    pub ghost EthernetFramesRx2: Option<SW::RawEthernetMessage_Impl>,
    pub ghost EthernetFramesRx3: Option<SW::RawEthernetMessage_Impl>
  }

  impl<API: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api> seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API> {
    pub fn put_EthernetFramesRx0(
      &mut self,
      value: SW::RawEthernetMessage_Impl)
      ensures
        self.EthernetFramesRx0 == Some(value),
        old(self).EthernetFramesRx1 == self.EthernetFramesRx1,
        old(self).EthernetFramesRx2 == self.EthernetFramesRx2,
        old(self).EthernetFramesRx3 == self.EthernetFramesRx3,
        old(self).EthernetFramesTx0 == self.EthernetFramesTx0,
        old(self).EthernetFramesTx1 == self.EthernetFramesTx1,
        old(self).EthernetFramesTx2 == self.EthernetFramesTx2,
        old(self).EthernetFramesTx3 == self.EthernetFramesTx3 
    {
      self.api.unverified_put_EthernetFramesRx0(value);
      self.EthernetFramesRx0 = Some(value);
    }
    pub fn put_EthernetFramesRx1(
      &mut self,
      value: SW::RawEthernetMessage_Impl)
      ensures
        old(self).EthernetFramesRx0 == self.EthernetFramesRx0,
        self.EthernetFramesRx1 == Some(value),
        old(self).EthernetFramesRx2 == self.EthernetFramesRx2,
        old(self).EthernetFramesRx3 == self.EthernetFramesRx3,
        old(self).EthernetFramesTx0 == self.EthernetFramesTx0,
        old(self).EthernetFramesTx1 == self.EthernetFramesTx1,
        old(self).EthernetFramesTx2 == self.EthernetFramesTx2,
        old(self).EthernetFramesTx3 == self.EthernetFramesTx3 
    {
      self.api.unverified_put_EthernetFramesRx1(value);
      self.EthernetFramesRx1 = Some(value);
    }
    pub fn put_EthernetFramesRx2(
      &mut self,
      value: SW::RawEthernetMessage_Impl)
      ensures
        old(self).EthernetFramesRx0 == self.EthernetFramesRx0,
        old(self).EthernetFramesRx1 == self.EthernetFramesRx1,
        self.EthernetFramesRx2 == Some(value),
        old(self).EthernetFramesRx3 == self.EthernetFramesRx3,
        old(self).EthernetFramesTx0 == self.EthernetFramesTx0,
        old(self).EthernetFramesTx1 == self.EthernetFramesTx1,
        old(self).EthernetFramesTx2 == self.EthernetFramesTx2,
        old(self).EthernetFramesTx3 == self.EthernetFramesTx3 
    {
      self.api.unverified_put_EthernetFramesRx2(value);
      self.EthernetFramesRx2 = Some(value);
    }
    pub fn put_EthernetFramesRx3(
      &mut self,
      value: SW::RawEthernetMessage_Impl)
      ensures
        old(self).EthernetFramesRx0 == self.EthernetFramesRx0,
        old(self).EthernetFramesRx1 == self.EthernetFramesRx1,
        old(self).EthernetFramesRx2 == self.EthernetFramesRx2,
        self.EthernetFramesRx3 == Some(value),
        old(self).EthernetFramesTx0 == self.EthernetFramesTx0,
        old(self).EthernetFramesTx1 == self.EthernetFramesTx1,
        old(self).EthernetFramesTx2 == self.EthernetFramesTx2,
        old(self).EthernetFramesTx3 == self.EthernetFramesTx3 
    {
      self.api.unverified_put_EthernetFramesRx3(value);
      self.EthernetFramesRx3 = Some(value);
    }
  }

  impl<API: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api> seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API> {
    pub fn get_EthernetFramesTx0(&mut self) -> (res : Option<SW::SizedEthernetMessage_Impl>)
      ensures
        old(self).EthernetFramesRx0 == self.EthernetFramesRx0,
        old(self).EthernetFramesRx1 == self.EthernetFramesRx1,
        old(self).EthernetFramesRx2 == self.EthernetFramesRx2,
        old(self).EthernetFramesRx3 == self.EthernetFramesRx3,
        old(self).EthernetFramesTx0 == self.EthernetFramesTx0,
        res == self.EthernetFramesTx0,
        old(self).EthernetFramesTx1 == self.EthernetFramesTx1,
        old(self).EthernetFramesTx2 == self.EthernetFramesTx2,
        old(self).EthernetFramesTx3 == self.EthernetFramesTx3 
    {
      self.api.unverified_get_EthernetFramesTx0(&Ghost(self.EthernetFramesTx0))
    }
    pub fn get_EthernetFramesTx1(&mut self) -> (res : Option<SW::SizedEthernetMessage_Impl>)
      ensures
        old(self).EthernetFramesRx0 == self.EthernetFramesRx0,
        old(self).EthernetFramesRx1 == self.EthernetFramesRx1,
        old(self).EthernetFramesRx2 == self.EthernetFramesRx2,
        old(self).EthernetFramesRx3 == self.EthernetFramesRx3,
        old(self).EthernetFramesTx0 == self.EthernetFramesTx0,
        old(self).EthernetFramesTx1 == self.EthernetFramesTx1,
        res == self.EthernetFramesTx1,
        old(self).EthernetFramesTx2 == self.EthernetFramesTx2,
        old(self).EthernetFramesTx3 == self.EthernetFramesTx3 
    {
      self.api.unverified_get_EthernetFramesTx1(&Ghost(self.EthernetFramesTx1))
    }
    pub fn get_EthernetFramesTx2(&mut self) -> (res : Option<SW::SizedEthernetMessage_Impl>)
      ensures
        old(self).EthernetFramesRx0 == self.EthernetFramesRx0,
        old(self).EthernetFramesRx1 == self.EthernetFramesRx1,
        old(self).EthernetFramesRx2 == self.EthernetFramesRx2,
        old(self).EthernetFramesRx3 == self.EthernetFramesRx3,
        old(self).EthernetFramesTx0 == self.EthernetFramesTx0,
        old(self).EthernetFramesTx1 == self.EthernetFramesTx1,
        old(self).EthernetFramesTx2 == self.EthernetFramesTx2,
        res == self.EthernetFramesTx2,
        old(self).EthernetFramesTx3 == self.EthernetFramesTx3 
    {
      self.api.unverified_get_EthernetFramesTx2(&Ghost(self.EthernetFramesTx2))
    }
    pub fn get_EthernetFramesTx3(&mut self) -> (res : Option<SW::SizedEthernetMessage_Impl>)
      ensures
        old(self).EthernetFramesRx0 == self.EthernetFramesRx0,
        old(self).EthernetFramesRx1 == self.EthernetFramesRx1,
        old(self).EthernetFramesRx2 == self.EthernetFramesRx2,
        old(self).EthernetFramesRx3 == self.EthernetFramesRx3,
        old(self).EthernetFramesTx0 == self.EthernetFramesTx0,
        old(self).EthernetFramesTx1 == self.EthernetFramesTx1,
        old(self).EthernetFramesTx2 == self.EthernetFramesTx2,
        old(self).EthernetFramesTx3 == self.EthernetFramesTx3,
        res == self.EthernetFramesTx3 
    {
      self.api.unverified_get_EthernetFramesTx3(&Ghost(self.EthernetFramesTx3))
    }
  }

  pub struct seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api;
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api {}
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api {}

  pub const fn init_api() -> seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api> {
    return seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api {
      api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api {},

      EthernetFramesTx0: None,
      EthernetFramesTx1: None,
      EthernetFramesTx2: None,
      EthernetFramesTx3: None,
      EthernetFramesRx0: None,
      EthernetFramesRx1: None,
      EthernetFramesRx2: None,
      EthernetFramesRx3: None
    }
  }

  pub struct seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api;
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Full_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}

  pub const fn compute_api() -> seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api> {
    return seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api {
      api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {},

      EthernetFramesTx0: None,
      EthernetFramesTx1: None,
      EthernetFramesTx2: None,
      EthernetFramesTx3: None,
      EthernetFramesRx0: None,
      EthernetFramesRx1: None,
      EthernetFramesRx2: None,
      EthernetFramesRx3: None
    }
  }
}