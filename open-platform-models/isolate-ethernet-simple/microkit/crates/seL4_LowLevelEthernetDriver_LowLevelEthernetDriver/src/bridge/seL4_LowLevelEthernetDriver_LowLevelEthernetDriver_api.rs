// Do not edit this file as it will be overwritten if codegen is rerun

use vstd::prelude::*;
use data::*;
use super::extern_c_api as extern_api;

verus! {
  pub trait seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api {}

  pub trait seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api {
    #[verifier::external_body]
    fn unverified_put_RxQueueAvail(
      &mut self,
      value: SW::BufferDesc_Impl) 
    {
      extern_api::unsafe_put_RxQueueAvail(&value);
    }

    #[verifier::external_body]
    fn unverified_put_RxData(
      &mut self,
      value: SW::EthernetMessages) 
    {
      extern_api::unsafe_put_RxData(&value);
    }

    #[verifier::external_body]
    fn unverified_put_TxQueueFree(
      &mut self,
      value: SW::BufferDesc_Impl) 
    {
      extern_api::unsafe_put_TxQueueFree(&value);
    }
  }

  pub trait seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api {
    #[verifier::external_body]
    fn unverified_get_TxData(
      &mut self,
      value: &Ghost<Option<SW::EthernetMessages>>) -> (res : Option<SW::EthernetMessages>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_TxData();
    }

    #[verifier::external_body]
    fn unverified_get_RxQueueFree(
      &mut self,
      value: &Ghost<Option<SW::BufferDesc_Impl>>) -> (res : Option<SW::BufferDesc_Impl>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_RxQueueFree();
    }

    #[verifier::external_body]
    fn unverified_get_TxQueueAvail(
      &mut self,
      value: &Ghost<Option<SW::BufferDesc_Impl>>) -> (res : Option<SW::BufferDesc_Impl>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_TxQueueAvail();
    }
  }

  pub trait seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Full_Api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api + seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api {}

  pub struct seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api> {
    pub api: API,

    pub ghost TxData: Option<SW::EthernetMessages>,
    pub ghost RxQueueFree: Option<SW::BufferDesc_Impl>,
    pub ghost TxQueueAvail: Option<SW::BufferDesc_Impl>,
    pub ghost RxQueueAvail: Option<SW::BufferDesc_Impl>,
    pub ghost RxData: Option<SW::EthernetMessages>,
    pub ghost TxQueueFree: Option<SW::BufferDesc_Impl>
  }

  impl<API: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api> seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API> {
    pub fn put_RxQueueAvail(
      &mut self,
      value: SW::BufferDesc_Impl)
      ensures
        self.RxQueueAvail == Some(value),
        old(self).RxQueueFree == self.RxQueueFree,
        old(self).RxData == self.RxData,
        old(self).TxQueueAvail == self.TxQueueAvail,
        old(self).TxQueueFree == self.TxQueueFree,
        old(self).TxData == self.TxData 
    {
      self.api.unverified_put_RxQueueAvail(value);
      self.RxQueueAvail = Some(value);
    }
    pub fn put_RxData(
      &mut self,
      value: SW::EthernetMessages)
      ensures
        old(self).RxQueueAvail == self.RxQueueAvail,
        old(self).RxQueueFree == self.RxQueueFree,
        self.RxData == Some(value),
        old(self).TxQueueAvail == self.TxQueueAvail,
        old(self).TxQueueFree == self.TxQueueFree,
        old(self).TxData == self.TxData 
    {
      self.api.unverified_put_RxData(value);
      self.RxData = Some(value);
    }
    pub fn put_TxQueueFree(
      &mut self,
      value: SW::BufferDesc_Impl)
      ensures
        old(self).RxQueueAvail == self.RxQueueAvail,
        old(self).RxQueueFree == self.RxQueueFree,
        old(self).RxData == self.RxData,
        old(self).TxQueueAvail == self.TxQueueAvail,
        self.TxQueueFree == Some(value),
        old(self).TxData == self.TxData 
    {
      self.api.unverified_put_TxQueueFree(value);
      self.TxQueueFree = Some(value);
    }
  }

  impl<API: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api> seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API> {
    pub fn get_TxData(&mut self) -> (res : Option<SW::EthernetMessages>)
      ensures
        old(self).RxQueueAvail == self.RxQueueAvail,
        old(self).RxQueueFree == self.RxQueueFree,
        old(self).RxData == self.RxData,
        old(self).TxQueueAvail == self.TxQueueAvail,
        old(self).TxQueueFree == self.TxQueueFree,
        old(self).TxData == self.TxData,
        res == self.TxData 
    {
      self.api.unverified_get_TxData(&Ghost(self.TxData))
    }
    pub fn get_RxQueueFree(&mut self) -> (res : Option<SW::BufferDesc_Impl>)
      ensures
        old(self).RxQueueAvail == self.RxQueueAvail,
        old(self).RxQueueFree == self.RxQueueFree,
        res == self.RxQueueFree,
        old(self).RxData == self.RxData,
        old(self).TxQueueAvail == self.TxQueueAvail,
        old(self).TxQueueFree == self.TxQueueFree,
        old(self).TxData == self.TxData 
    {
      self.api.unverified_get_RxQueueFree(&Ghost(self.RxQueueFree))
    }
    pub fn get_TxQueueAvail(&mut self) -> (res : Option<SW::BufferDesc_Impl>)
      ensures
        old(self).RxQueueAvail == self.RxQueueAvail,
        old(self).RxQueueFree == self.RxQueueFree,
        old(self).RxData == self.RxData,
        old(self).TxQueueAvail == self.TxQueueAvail,
        res == self.TxQueueAvail,
        old(self).TxQueueFree == self.TxQueueFree,
        old(self).TxData == self.TxData 
    {
      self.api.unverified_get_TxQueueAvail(&Ghost(self.TxQueueAvail))
    }
  }

  pub struct seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api;
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api {}
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api {}

  pub const fn init_api() -> seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api> {
    return seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api {
      api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api {},

      TxData: None,
      RxQueueFree: None,
      TxQueueAvail: None,
      RxQueueAvail: None,
      RxData: None,
      TxQueueFree: None
    }
  }

  pub struct seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api;
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}
  impl seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Full_Api for seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}

  pub const fn compute_api() -> seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api> {
    return seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api {
      api: seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {},

      TxData: None,
      RxQueueFree: None,
      TxQueueAvail: None,
      RxQueueAvail: None,
      RxData: None,
      TxQueueFree: None
    }
  }
}