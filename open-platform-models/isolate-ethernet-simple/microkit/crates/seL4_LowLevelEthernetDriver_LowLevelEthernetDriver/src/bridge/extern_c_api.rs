// Do not edit this file as it will be overwritten if codegen is rerun

//! C-interface for the component.
//! This code must be unsafe.
//! Assumptions about correctness are introduced and need to be verified by other means.

use crate::data::*;

#[cfg(test)]
use std::sync::Mutex;

#[cfg(not(test))]
extern "C" {
  fn get_EthernetFramesTx0(value: *mut SW::SizedEthernetMessage_Impl) -> bool;
  fn get_EthernetFramesTx1(value: *mut SW::SizedEthernetMessage_Impl) -> bool;
  fn get_EthernetFramesTx2(value: *mut SW::SizedEthernetMessage_Impl) -> bool;
  fn get_EthernetFramesTx3(value: *mut SW::SizedEthernetMessage_Impl) -> bool;
  fn put_EthernetFramesRx0(value: *mut SW::RawEthernetMessage) -> bool;
  fn put_EthernetFramesRx1(value: *mut SW::RawEthernetMessage) -> bool;
  fn put_EthernetFramesRx2(value: *mut SW::RawEthernetMessage) -> bool;
  fn put_EthernetFramesRx3(value: *mut SW::RawEthernetMessage) -> bool;
}

pub fn unsafe_get_EthernetFramesTx0() -> Option<SW::SizedEthernetMessage_Impl> 
 {
   unsafe {
     let value: *mut SW::SizedEthernetMessage_Impl = &mut SW::SizedEthernetMessage_Impl::default();
     if (get_EthernetFramesTx0(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_get_EthernetFramesTx1() -> Option<SW::SizedEthernetMessage_Impl> 
 {
   unsafe {
     let value: *mut SW::SizedEthernetMessage_Impl = &mut SW::SizedEthernetMessage_Impl::default();
     if (get_EthernetFramesTx1(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_get_EthernetFramesTx2() -> Option<SW::SizedEthernetMessage_Impl> 
 {
   unsafe {
     let value: *mut SW::SizedEthernetMessage_Impl = &mut SW::SizedEthernetMessage_Impl::default();
     if (get_EthernetFramesTx2(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_get_EthernetFramesTx3() -> Option<SW::SizedEthernetMessage_Impl> 
 {
   unsafe {
     let value: *mut SW::SizedEthernetMessage_Impl = &mut SW::SizedEthernetMessage_Impl::default();
     if (get_EthernetFramesTx3(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_put_EthernetFramesRx0(value: &SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     return put_EthernetFramesRx0(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);
   }
 }

pub fn unsafe_put_EthernetFramesRx1(value: &SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     return put_EthernetFramesRx1(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);
   }
 }

pub fn unsafe_put_EthernetFramesRx2(value: &SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     return put_EthernetFramesRx2(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);
   }
 }

pub fn unsafe_put_EthernetFramesRx3(value: &SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     return put_EthernetFramesRx3(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);
   }
 }

//////////////////////////////////////////////////////////////////////////////////
// Testing Versions
//////////////////////////////////////////////////////////////////////////////////

#[cfg(test)]
lazy_static::lazy_static! {
  // simulate the global C variables that point to the microkit shared memory regions.  In a full
  // microkit system we would be able to mutate the shared memory for out ports since they're r/w,
  // but we couldn't do that for in ports since they are read-only
  pub static ref IN_EthernetFramesTx0: Mutex<Option<SW::SizedEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref IN_EthernetFramesTx1: Mutex<Option<SW::SizedEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref IN_EthernetFramesTx2: Mutex<Option<SW::SizedEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref IN_EthernetFramesTx3: Mutex<Option<SW::SizedEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref OUT_EthernetFramesRx0: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);
  pub static ref OUT_EthernetFramesRx1: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);
  pub static ref OUT_EthernetFramesRx2: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);
  pub static ref OUT_EthernetFramesRx3: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);
}

#[cfg(test)]
pub fn get_EthernetFramesTx0(value: *mut SW::SizedEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *value = IN_EthernetFramesTx0.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn get_EthernetFramesTx1(value: *mut SW::SizedEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *value = IN_EthernetFramesTx1.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn get_EthernetFramesTx2(value: *mut SW::SizedEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *value = IN_EthernetFramesTx2.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn get_EthernetFramesTx3(value: *mut SW::SizedEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *value = IN_EthernetFramesTx3.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn put_EthernetFramesRx0(value: *mut SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesRx0.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn put_EthernetFramesRx1(value: *mut SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesRx1.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn put_EthernetFramesRx2(value: *mut SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesRx2.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn put_EthernetFramesRx3(value: *mut SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesRx3.lock().unwrap() = Some(*value);
     return true;
   }
 }
