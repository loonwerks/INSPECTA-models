#![cfg(test)]

// Do not edit this file as it will be overwritten if codegen is rerun

use crate::bridge::extern_c_api as extern_api;
use data::*;

use proptest::prelude::*;

use crate::bridge::seL4_TxFirewall_TxFirewall_GUMBOX as GUMBOX;

pub struct PreStateContainer {
  pub api_EthernetFramesTxIn0: Option<SW::RawEthernetMessage>,
  pub api_EthernetFramesTxIn1: Option<SW::RawEthernetMessage>,
  pub api_EthernetFramesTxIn2: Option<SW::RawEthernetMessage>,
  pub api_EthernetFramesTxIn3: Option<SW::RawEthernetMessage>
}

pub fn put_concrete_inputs_container(container: PreStateContainer)
{
  put_EthernetFramesTxIn0(container.api_EthernetFramesTxIn0);
  put_EthernetFramesTxIn1(container.api_EthernetFramesTxIn1);
  put_EthernetFramesTxIn2(container.api_EthernetFramesTxIn2);
  put_EthernetFramesTxIn3(container.api_EthernetFramesTxIn3);
}

pub fn put_concrete_inputs(
  EthernetFramesTxIn0: Option<SW::RawEthernetMessage>,
  EthernetFramesTxIn1: Option<SW::RawEthernetMessage>,
  EthernetFramesTxIn2: Option<SW::RawEthernetMessage>,
  EthernetFramesTxIn3: Option<SW::RawEthernetMessage>)
{
  put_EthernetFramesTxIn0(EthernetFramesTxIn0);
  put_EthernetFramesTxIn1(EthernetFramesTxIn1);
  put_EthernetFramesTxIn2(EthernetFramesTxIn2);
  put_EthernetFramesTxIn3(EthernetFramesTxIn3);
}

/// setter for IN EventDataPort
pub fn put_EthernetFramesTxIn0(value: Option<SW::RawEthernetMessage>)
{
  *extern_api::IN_EthernetFramesTxIn0.lock().unwrap() = value
}

/// setter for IN EventDataPort
pub fn put_EthernetFramesTxIn1(value: Option<SW::RawEthernetMessage>)
{
  *extern_api::IN_EthernetFramesTxIn1.lock().unwrap() = value
}

/// setter for IN EventDataPort
pub fn put_EthernetFramesTxIn2(value: Option<SW::RawEthernetMessage>)
{
  *extern_api::IN_EthernetFramesTxIn2.lock().unwrap() = value
}

/// setter for IN EventDataPort
pub fn put_EthernetFramesTxIn3(value: Option<SW::RawEthernetMessage>)
{
  *extern_api::IN_EthernetFramesTxIn3.lock().unwrap() = value
}

/// getter for OUT EventDataPort
pub fn get_EthernetFramesTxOut0() -> Option<SW::SizedEthernetMessage_Impl>
{
  return extern_api::OUT_EthernetFramesTxOut0.lock().unwrap().clone()
}

/// getter for OUT EventDataPort
pub fn get_EthernetFramesTxOut1() -> Option<SW::SizedEthernetMessage_Impl>
{
  return extern_api::OUT_EthernetFramesTxOut1.lock().unwrap().clone()
}

/// getter for OUT EventDataPort
pub fn get_EthernetFramesTxOut2() -> Option<SW::SizedEthernetMessage_Impl>
{
  return extern_api::OUT_EthernetFramesTxOut2.lock().unwrap().clone()
}

/// getter for OUT EventDataPort
pub fn get_EthernetFramesTxOut3() -> Option<SW::SizedEthernetMessage_Impl>
{
  return extern_api::OUT_EthernetFramesTxOut3.lock().unwrap().clone()
}

pub fn option_strategy_default
  <T: Clone + std::fmt::Debug, 
   S:  Strategy<Value = T>> (base: S) -> impl Strategy<Value = Option<T>>
{
  option_strategy_bias(1, base)
}

pub fn option_strategy_bias
  <T: Clone + std::fmt::Debug, 
   S:  Strategy<Value = T>> (
  bias: u32,
  base: S) -> impl Strategy<Value = Option<T>>
{
  prop_oneof![
    bias => base.prop_map(Some),
    1 => Just(None),
  ]
}

pub fn SW_RawEthernetMessage_strategy_default() -> impl Strategy<Value = SW::RawEthernetMessage>
{
  SW_RawEthernetMessage_strategy_cust(any::<u8>())
}

pub fn SW_RawEthernetMessage_strategy_cust<u8_strategy: Strategy<Value = u8>> (base_strategy: u8_strategy) -> impl Strategy<Value = SW::RawEthernetMessage>
{
  proptest::collection::vec(base_strategy, SW::SW_RawEthernetMessage_DIM_0)
    .prop_map(|v| {
      let boxed: Box<[u8; SW::SW_RawEthernetMessage_DIM_0]> = v.into_boxed_slice().try_into().unwrap();
      *boxed
  })
}

pub fn SW_u16Array_strategy_default() -> impl Strategy<Value = SW::u16Array>
{
  SW_u16Array_strategy_cust(any::<u16>())
}

pub fn SW_u16Array_strategy_cust<u16_strategy: Strategy<Value = u16>> (base_strategy: u16_strategy) -> impl Strategy<Value = SW::u16Array>
{
  proptest::collection::vec(base_strategy, SW::SW_u16Array_DIM_0)
    .prop_map(|v| {
      let boxed: Box<[u16; SW::SW_u16Array_DIM_0]> = v.into_boxed_slice().try_into().unwrap();
      *boxed
  })
}

pub fn SW_SizedEthernetMessage_Impl_strategy_default() -> impl Strategy<Value = SW::SizedEthernetMessage_Impl>
{
  SW_SizedEthernetMessage_Impl_strategy_cust(
    SW_RawEthernetMessage_strategy_default(),
    any::<u16>()
  )
}

pub fn SW_SizedEthernetMessage_Impl_strategy_cust
  <message_SW_RawEthernetMessage_strategy: Strategy<Value = SW::RawEthernetMessage>, 
   sz_u16_strategy: Strategy<Value = u16>> (
  message_strategy: message_SW_RawEthernetMessage_strategy,
  sz_strategy: sz_u16_strategy) -> impl Strategy<Value = SW::SizedEthernetMessage_Impl>
{
  (message_strategy, sz_strategy).prop_map(|(message, sz)| {
    SW::SizedEthernetMessage_Impl { message, sz }
  })
}

pub enum HarnessResult {
  RejectedPrecondition,
  FailedPostcondition(TestCaseError),
  Passed,
}

/** Contract-based test harness for the initialize entry point
  */
pub fn testInitializeCB() -> HarnessResult
{
  // [InvokeEntryPoint]: Invoke the entry point
  crate::seL4_TxFirewall_TxFirewall_initialize();

  return HarnessResult::Passed
}

#[macro_export]
macro_rules!
testInitializeCB_macro {
  (
    $test_name: ident,
    config: $config:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(empty in ::proptest::strategy::Just(())) {
        match $crate::bridge::test_api::testInitializeCB() {
          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {
            unreachable!("This branch is infeasible")
          }
          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::bridge::test_api::HarnessResult::Passed => { }
        }
      }
    }
  };
}

/** Contract-based test harness for the compute entry point
  *
  * @param api_EthernetFramesTxIn0 incoming event data port
  * @param api_EthernetFramesTxIn1 incoming event data port
  * @param api_EthernetFramesTxIn2 incoming event data port
  * @param api_EthernetFramesTxIn3 incoming event data port
  */
pub fn testComputeCB(
  api_EthernetFramesTxIn0: Option<SW::RawEthernetMessage>,
  api_EthernetFramesTxIn1: Option<SW::RawEthernetMessage>,
  api_EthernetFramesTxIn2: Option<SW::RawEthernetMessage>,
  api_EthernetFramesTxIn3: Option<SW::RawEthernetMessage>) -> HarnessResult
{
  // Initialize the app
  crate::seL4_TxFirewall_TxFirewall_initialize();

  // [PutInPorts]: Set values on the input ports
  put_EthernetFramesTxIn0(api_EthernetFramesTxIn0);
  put_EthernetFramesTxIn1(api_EthernetFramesTxIn1);
  put_EthernetFramesTxIn2(api_EthernetFramesTxIn2);
  put_EthernetFramesTxIn3(api_EthernetFramesTxIn3);

  // [InvokeEntryPoint]: Invoke the entry point
  crate::seL4_TxFirewall_TxFirewall_timeTriggered();

  // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
  let api_EthernetFramesTxOut0 = get_EthernetFramesTxOut0();
  let api_EthernetFramesTxOut1 = get_EthernetFramesTxOut1();
  let api_EthernetFramesTxOut2 = get_EthernetFramesTxOut2();
  let api_EthernetFramesTxOut3 = get_EthernetFramesTxOut3();

  // [CheckPost]: invoke the oracle function
  if !GUMBOX::compute_CEP_Post(api_EthernetFramesTxIn0, api_EthernetFramesTxIn1, api_EthernetFramesTxIn2, api_EthernetFramesTxIn3, api_EthernetFramesTxOut0, api_EthernetFramesTxOut1, api_EthernetFramesTxOut2, api_EthernetFramesTxOut3) {
    return HarnessResult::FailedPostcondition(TestCaseError::Fail("Postcondition failed: incorrect output behavior".into()));
  }

  return HarnessResult::Passed
}

/** Contract-based test harness for the compute entry point
  */
pub fn testComputeCB_container(container: PreStateContainer) -> HarnessResult
{
  return testComputeCB(container.api_EthernetFramesTxIn0, container.api_EthernetFramesTxIn1, container.api_EthernetFramesTxIn2, container.api_EthernetFramesTxIn3)
}

#[macro_export]
macro_rules!
testComputeCB_macro {
  (
    $test_name: ident,
    config: $config:expr,
    api_EthernetFramesTxIn0: $api_EthernetFramesTxIn0_strat:expr,
    api_EthernetFramesTxIn1: $api_EthernetFramesTxIn1_strat:expr,
    api_EthernetFramesTxIn2: $api_EthernetFramesTxIn2_strat:expr,
    api_EthernetFramesTxIn3: $api_EthernetFramesTxIn3_strat:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        (api_EthernetFramesTxIn0, api_EthernetFramesTxIn1, api_EthernetFramesTxIn2, api_EthernetFramesTxIn3)
        in ($api_EthernetFramesTxIn0_strat, $api_EthernetFramesTxIn1_strat, $api_EthernetFramesTxIn2_strat, $api_EthernetFramesTxIn3_strat)
      ) {
        match$crate::bridge::test_api::testComputeCB(api_EthernetFramesTxIn0, api_EthernetFramesTxIn1, api_EthernetFramesTxIn2, api_EthernetFramesTxIn3) {
          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::bridge::test_api::HarnessResult::Passed => { }
        }
      }
    }
  };
}

#[macro_export]
macro_rules!
testComputeCBwLV_macro {
  (
    $test_name: ident,
    config: $config:expr,
    api_EthernetFramesTxIn0: $api_EthernetFramesTxIn0_strat:expr,
    api_EthernetFramesTxIn1: $api_EthernetFramesTxIn1_strat:expr,
    api_EthernetFramesTxIn2: $api_EthernetFramesTxIn2_strat:expr,
    api_EthernetFramesTxIn3: $api_EthernetFramesTxIn3_strat:expr
  ) => {
    proptest!{
      #![proptest_config($config)]
      #[test]
      #[serial]
      fn $test_name(
        (api_EthernetFramesTxIn0, api_EthernetFramesTxIn1, api_EthernetFramesTxIn2, api_EthernetFramesTxIn3)
        in ($api_EthernetFramesTxIn0_strat, $api_EthernetFramesTxIn1_strat, $api_EthernetFramesTxIn2_strat, $api_EthernetFramesTxIn3_strat)
      ) {
        match $crate::bridge::test_api::testComputeCBwLV(api_EthernetFramesTxIn0, api_EthernetFramesTxIn1, api_EthernetFramesTxIn2, api_EthernetFramesTxIn3) {
          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {
            return Err(proptest::test_runner::TestCaseError::reject(
              "Precondition failed: invalid input combination",
            ))
          }
          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {
            return Err(e)
          }
          $crate::bridge::test_api::HarnessResult::Passed => { }
        }
      }
    }
  };
}