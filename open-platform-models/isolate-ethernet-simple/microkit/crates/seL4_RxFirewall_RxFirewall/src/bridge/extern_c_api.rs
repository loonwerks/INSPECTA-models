// Do not edit this file as it will be overwritten if codegen is rerun

//! C-interface for the component.
//! This code must be unsafe.
//! Assumptions about correctness are introduced and need to be verified by other means.

use crate::data::*;

#[cfg(test)]
use std::sync::Mutex;

#[cfg(not(test))]
extern "C" {
  fn put_EthernetFramesRxOut0(value: *mut SW::RawEthernetMessage_Impl) -> bool;
  fn put_EthernetFramesRxOut1(value: *mut SW::RawEthernetMessage_Impl) -> bool;
  fn put_EthernetFramesRxOut2(value: *mut SW::RawEthernetMessage_Impl) -> bool;
  fn put_EthernetFramesRxOut3(value: *mut SW::RawEthernetMessage_Impl) -> bool;
  fn get_EthernetFramesRxIn0(value: *mut SW::RawEthernetMessage_Impl) -> bool;
  fn get_EthernetFramesRxIn1(value: *mut SW::RawEthernetMessage_Impl) -> bool;
  fn get_EthernetFramesRxIn2(value: *mut SW::RawEthernetMessage_Impl) -> bool;
  fn get_EthernetFramesRxIn3(value: *mut SW::RawEthernetMessage_Impl) -> bool;
}

pub fn unsafe_put_EthernetFramesRxOut0(value: &SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     return put_EthernetFramesRxOut0(value as *const SW::RawEthernetMessage_Impl as *mut SW::RawEthernetMessage_Impl);
   }
 }

pub fn unsafe_put_EthernetFramesRxOut1(value: &SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     return put_EthernetFramesRxOut1(value as *const SW::RawEthernetMessage_Impl as *mut SW::RawEthernetMessage_Impl);
   }
 }

pub fn unsafe_put_EthernetFramesRxOut2(value: &SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     return put_EthernetFramesRxOut2(value as *const SW::RawEthernetMessage_Impl as *mut SW::RawEthernetMessage_Impl);
   }
 }

pub fn unsafe_put_EthernetFramesRxOut3(value: &SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     return put_EthernetFramesRxOut3(value as *const SW::RawEthernetMessage_Impl as *mut SW::RawEthernetMessage_Impl);
   }
 }

pub fn unsafe_get_EthernetFramesRxIn0() -> Option<SW::RawEthernetMessage_Impl> 
 {
   unsafe {
     let value: *mut SW::RawEthernetMessage_Impl = &mut [0;                        st"${(ops.ISZOps(np.qualifiedRustNameS).dropRight(1), "::")}"::SW_RawEthernetMessage_Impl_DIM_0];
     if (get_EthernetFramesRxIn0(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_get_EthernetFramesRxIn1() -> Option<SW::RawEthernetMessage_Impl> 
 {
   unsafe {
     let value: *mut SW::RawEthernetMessage_Impl = &mut [0;                        st"${(ops.ISZOps(np.qualifiedRustNameS).dropRight(1), "::")}"::SW_RawEthernetMessage_Impl_DIM_0];
     if (get_EthernetFramesRxIn1(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_get_EthernetFramesRxIn2() -> Option<SW::RawEthernetMessage_Impl> 
 {
   unsafe {
     let value: *mut SW::RawEthernetMessage_Impl = &mut [0;                        st"${(ops.ISZOps(np.qualifiedRustNameS).dropRight(1), "::")}"::SW_RawEthernetMessage_Impl_DIM_0];
     if (get_EthernetFramesRxIn2(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_get_EthernetFramesRxIn3() -> Option<SW::RawEthernetMessage_Impl> 
 {
   unsafe {
     let value: *mut SW::RawEthernetMessage_Impl = &mut [0;                        st"${(ops.ISZOps(np.qualifiedRustNameS).dropRight(1), "::")}"::SW_RawEthernetMessage_Impl_DIM_0];
     if (get_EthernetFramesRxIn3(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

//////////////////////////////////////////////////////////////////////////////////
// Testing Versions
//////////////////////////////////////////////////////////////////////////////////

#[cfg(test)]
lazy_static::lazy_static! {
  // simulate the global C variables that point to the microkit shared memory regions.  In a full
  // microkit system we would be able to mutate the shared memory for out ports since they're r/w,
  // but we couldn't do that for in ports since they are read-only
  pub static ref OUT_EthernetFramesRxOut0: Mutex<Option<SW::RawEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref OUT_EthernetFramesRxOut1: Mutex<Option<SW::RawEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref OUT_EthernetFramesRxOut2: Mutex<Option<SW::RawEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref OUT_EthernetFramesRxOut3: Mutex<Option<SW::RawEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref IN_EthernetFramesRxIn0: Mutex<Option<SW::RawEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref IN_EthernetFramesRxIn1: Mutex<Option<SW::RawEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref IN_EthernetFramesRxIn2: Mutex<Option<SW::RawEthernetMessage_Impl>> = Mutex::new(None);
  pub static ref IN_EthernetFramesRxIn3: Mutex<Option<SW::RawEthernetMessage_Impl>> = Mutex::new(None);
}

#[cfg(test)]
pub fn put_EthernetFramesRxOut0(value: *mut SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesRxOut0.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn put_EthernetFramesRxOut1(value: *mut SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesRxOut1.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn put_EthernetFramesRxOut2(value: *mut SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesRxOut2.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn put_EthernetFramesRxOut3(value: *mut SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesRxOut3.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn get_EthernetFramesRxIn0(value: *mut SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *value = IN_EthernetFramesRxIn0.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn get_EthernetFramesRxIn1(value: *mut SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *value = IN_EthernetFramesRxIn1.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn get_EthernetFramesRxIn2(value: *mut SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *value = IN_EthernetFramesRxIn2.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }

#[cfg(test)]
pub fn get_EthernetFramesRxIn3(value: *mut SW::RawEthernetMessage_Impl) -> bool 
 {
   unsafe {
     *value = IN_EthernetFramesRxIn3.lock().unwrap().expect("Not expecting None");
     return true;
   }
 }
