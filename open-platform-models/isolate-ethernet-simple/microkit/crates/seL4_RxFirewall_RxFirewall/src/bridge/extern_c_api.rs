// Do not edit this file as it will be overwritten if codegen is rerun

//! C-interface for the component.
//! This code must be unsafe.
//! Assumptions about correctness are introduced and need to be verified by other means.

use data::*;

#[cfg(test)]
use std::sync::Mutex;

#[cfg(not(test))]
extern "C" {
  fn get_RxOutQueueFree(value: *mut SW::BufferDesc_Impl) -> bool;
  fn put_RxInQueueFree(value: *mut SW::BufferDesc_Impl) -> bool;
  fn put_RxOutQueueAvail(value: *mut SW::BufferDesc_Impl) -> bool;
  fn get_RxInQueueAvail(value: *mut SW::BufferDesc_Impl) -> bool;
  fn get_RxData(value: *mut SW::EthernetMessages) -> bool;
}

pub fn unsafe_get_RxOutQueueFree() -> Option<SW::BufferDesc_Impl> 
 {
   unsafe {
     let value: *mut SW::BufferDesc_Impl = &mut SW::BufferDesc_Impl::default();
     if (get_RxOutQueueFree(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_put_RxInQueueFree(value: &SW::BufferDesc_Impl) -> bool 
 {
   unsafe {
     return put_RxInQueueFree(value as *const SW::BufferDesc_Impl as *mut SW::BufferDesc_Impl);
   }
 }

pub fn unsafe_put_RxOutQueueAvail(value: &SW::BufferDesc_Impl) -> bool 
 {
   unsafe {
     return put_RxOutQueueAvail(value as *const SW::BufferDesc_Impl as *mut SW::BufferDesc_Impl);
   }
 }

pub fn unsafe_get_RxInQueueAvail() -> Option<SW::BufferDesc_Impl> 
 {
   unsafe {
     let value: *mut SW::BufferDesc_Impl = &mut SW::BufferDesc_Impl::default();
     if (get_RxInQueueAvail(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_get_RxData() -> Option<SW::EthernetMessages> 
 {
   unsafe {
     let value: *mut SW::EthernetMessages = &mut [[0; SW::SW_RawEthernetMessage_DIM_0]; SW::SW_EthernetMessages_DIM_0];
     if (get_RxData(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

//////////////////////////////////////////////////////////////////////////////////
// Testing Versions
//////////////////////////////////////////////////////////////////////////////////

#[cfg(test)]
lazy_static::lazy_static! {
  // simulate the global C variables that point to the microkit shared memory regions.  In a full
  // microkit system we would be able to mutate the shared memory for out ports since they're r/w,
  // but we couldn't do that for in ports since they are read-only
  pub static ref IN_RxOutQueueFree: Mutex<Option<SW::BufferDesc_Impl>> = Mutex::new(None);
  pub static ref OUT_RxInQueueFree: Mutex<Option<SW::BufferDesc_Impl>> = Mutex::new(None);
  pub static ref OUT_RxOutQueueAvail: Mutex<Option<SW::BufferDesc_Impl>> = Mutex::new(None);
  pub static ref IN_RxInQueueAvail: Mutex<Option<SW::BufferDesc_Impl>> = Mutex::new(None);
  pub static ref IN_RxData: Mutex<Option<SW::EthernetMessages>> = Mutex::new(None);
}

#[cfg(test)]
pub fn get_RxOutQueueFree(value: *mut SW::BufferDesc_Impl) -> bool 
 {
   unsafe {
     match *IN_RxOutQueueFree.lock().unwrap() {
       Some(v) => {
         *value = v;
         return true;
       },
       None => return false,
     }
   }
 }

#[cfg(test)]
pub fn put_RxInQueueFree(value: *mut SW::BufferDesc_Impl) -> bool 
 {
   unsafe {
     *OUT_RxInQueueFree.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn put_RxOutQueueAvail(value: *mut SW::BufferDesc_Impl) -> bool 
 {
   unsafe {
     *OUT_RxOutQueueAvail.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn get_RxInQueueAvail(value: *mut SW::BufferDesc_Impl) -> bool 
 {
   unsafe {
     match *IN_RxInQueueAvail.lock().unwrap() {
       Some(v) => {
         *value = v;
         return true;
       },
       None => return false,
     }
   }
 }

#[cfg(test)]
pub fn get_RxData(value: *mut SW::EthernetMessages) -> bool 
 {
   unsafe {
     match *IN_RxData.lock().unwrap() {
       Some(v) => {
         *value = v;
         return true;
       },
       None => return false,
     }
   }
 }
