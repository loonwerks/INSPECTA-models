// Do not edit this file as it will be overwritten if codegen is rerun

use vstd::prelude::*;
use data::*;
use super::extern_c_api as extern_api;

verus! {
  pub trait seL4_RxFirewall_RxFirewall_Api {}

  pub trait seL4_RxFirewall_RxFirewall_Put_Api: seL4_RxFirewall_RxFirewall_Api {
    #[verifier::external_body]
    fn unverified_put_RxInQueueFree(
      &mut self,
      value: SW::BufferQueue_Impl) 
    {
      extern_api::unsafe_put_RxInQueueFree(&value);
    }

    #[verifier::external_body]
    fn unverified_put_RxOutQueueAvail(
      &mut self,
      value: SW::BufferQueue_Impl) 
    {
      extern_api::unsafe_put_RxOutQueueAvail(&value);
    }
  }

  pub trait seL4_RxFirewall_RxFirewall_Get_Api: seL4_RxFirewall_RxFirewall_Api {
    #[verifier::external_body]
    fn unverified_get_RxOutQueueFree(
      &mut self,
      value: &Ghost<Option<SW::BufferQueue_Impl>>) -> (res : Option<SW::BufferQueue_Impl>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_RxOutQueueFree();
    }

    #[verifier::external_body]
    fn unverified_get_RxData(
      &mut self,
      value: &Ghost<SW::EthernetMessages>) -> (res : SW::EthernetMessages)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_RxData();
    }

    #[verifier::external_body]
    fn unverified_get_RxInQueueAvail(
      &mut self,
      value: &Ghost<Option<SW::BufferQueue_Impl>>) -> (res : Option<SW::BufferQueue_Impl>)
      ensures
        res == value@ 
    {
      return extern_api::unsafe_get_RxInQueueAvail();
    }
  }

  pub trait seL4_RxFirewall_RxFirewall_Full_Api: seL4_RxFirewall_RxFirewall_Put_Api + seL4_RxFirewall_RxFirewall_Get_Api {}

  pub struct seL4_RxFirewall_RxFirewall_Application_Api<API: seL4_RxFirewall_RxFirewall_Api> {
    pub api: API,

    pub ghost RxOutQueueFree: Option<SW::BufferQueue_Impl>,
    pub ghost RxInQueueFree: Option<SW::BufferQueue_Impl>,
    pub ghost RxOutQueueAvail: Option<SW::BufferQueue_Impl>,
    pub ghost RxData: SW::EthernetMessages,
    pub ghost RxInQueueAvail: Option<SW::BufferQueue_Impl>
  }

  impl<API: seL4_RxFirewall_RxFirewall_Put_Api> seL4_RxFirewall_RxFirewall_Application_Api<API> {
    pub fn put_RxInQueueFree(
      &mut self,
      value: SW::BufferQueue_Impl)
      ensures
        old(self).RxData == self.RxData,
        old(self).RxInQueueAvail == self.RxInQueueAvail,
        self.RxInQueueFree == Some(value),
        old(self).RxOutQueueAvail == self.RxOutQueueAvail,
        old(self).RxOutQueueFree == self.RxOutQueueFree 
    {
      self.api.unverified_put_RxInQueueFree(value);
      self.RxInQueueFree = Some(value);
    }
    pub fn put_RxOutQueueAvail(
      &mut self,
      value: SW::BufferQueue_Impl)
      ensures
        old(self).RxData == self.RxData,
        old(self).RxInQueueAvail == self.RxInQueueAvail,
        old(self).RxInQueueFree == self.RxInQueueFree,
        self.RxOutQueueAvail == Some(value),
        old(self).RxOutQueueFree == self.RxOutQueueFree 
    {
      self.api.unverified_put_RxOutQueueAvail(value);
      self.RxOutQueueAvail = Some(value);
    }
  }

  impl<API: seL4_RxFirewall_RxFirewall_Get_Api> seL4_RxFirewall_RxFirewall_Application_Api<API> {
    pub fn get_RxOutQueueFree(&mut self) -> (res : Option<SW::BufferQueue_Impl>)
      ensures
        old(self).RxData == self.RxData,
        old(self).RxInQueueAvail == self.RxInQueueAvail,
        old(self).RxInQueueFree == self.RxInQueueFree,
        old(self).RxOutQueueAvail == self.RxOutQueueAvail,
        old(self).RxOutQueueFree == self.RxOutQueueFree,
        res == self.RxOutQueueFree 
    {
      self.api.unverified_get_RxOutQueueFree(&Ghost(self.RxOutQueueFree))
    }
    pub fn get_RxData(&mut self) -> (res : SW::EthernetMessages)
      ensures
        old(self).RxData == self.RxData,
        res == self.RxData,
        old(self).RxInQueueAvail == self.RxInQueueAvail,
        old(self).RxInQueueFree == self.RxInQueueFree,
        old(self).RxOutQueueAvail == self.RxOutQueueAvail,
        old(self).RxOutQueueFree == self.RxOutQueueFree 
    {
      self.api.unverified_get_RxData(&Ghost(self.RxData))
    }
    pub fn get_RxInQueueAvail(&mut self) -> (res : Option<SW::BufferQueue_Impl>)
      ensures
        old(self).RxData == self.RxData,
        old(self).RxInQueueAvail == self.RxInQueueAvail,
        res == self.RxInQueueAvail,
        old(self).RxInQueueFree == self.RxInQueueFree,
        old(self).RxOutQueueAvail == self.RxOutQueueAvail,
        old(self).RxOutQueueFree == self.RxOutQueueFree 
    {
      self.api.unverified_get_RxInQueueAvail(&Ghost(self.RxInQueueAvail))
    }
  }

  pub struct seL4_RxFirewall_RxFirewall_Initialization_Api;
  impl seL4_RxFirewall_RxFirewall_Api for seL4_RxFirewall_RxFirewall_Initialization_Api {}
  impl seL4_RxFirewall_RxFirewall_Put_Api for seL4_RxFirewall_RxFirewall_Initialization_Api {}

  pub const fn init_api() -> seL4_RxFirewall_RxFirewall_Application_Api<seL4_RxFirewall_RxFirewall_Initialization_Api> {
    return seL4_RxFirewall_RxFirewall_Application_Api {
      api: seL4_RxFirewall_RxFirewall_Initialization_Api {},

      RxOutQueueFree: None,
      RxInQueueFree: None,
      RxOutQueueAvail: None,
      RxData: [[0; SW::SW_RawEthernetMessage_DIM_0]; SW::SW_EthernetMessages_DIM_0],
      RxInQueueAvail: None
    }
  }

  pub struct seL4_RxFirewall_RxFirewall_Compute_Api;
  impl seL4_RxFirewall_RxFirewall_Api for seL4_RxFirewall_RxFirewall_Compute_Api {}
  impl seL4_RxFirewall_RxFirewall_Put_Api for seL4_RxFirewall_RxFirewall_Compute_Api {}
  impl seL4_RxFirewall_RxFirewall_Get_Api for seL4_RxFirewall_RxFirewall_Compute_Api {}
  impl seL4_RxFirewall_RxFirewall_Full_Api for seL4_RxFirewall_RxFirewall_Compute_Api {}

  pub const fn compute_api() -> seL4_RxFirewall_RxFirewall_Application_Api<seL4_RxFirewall_RxFirewall_Compute_Api> {
    return seL4_RxFirewall_RxFirewall_Application_Api {
      api: seL4_RxFirewall_RxFirewall_Compute_Api {},

      RxOutQueueFree: None,
      RxInQueueFree: None,
      RxOutQueueAvail: None,
      RxData: [[0; SW::SW_RawEthernetMessage_DIM_0]; SW::SW_EthernetMessages_DIM_0],
      RxInQueueAvail: None
    }
  }
}