package SW
public

	with CASE_Scheduling;
	with Data_Model;
	with Base_Types;
	with HAMR;



	data RawEthernetMessage
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
			Data_Model::Dimension => (1600);
			HAMR::Bit_Codec_Max_Size => 1600 Bytes;
	end RawEthernetMessage;

	data implementation RawEthernetMessage.Impl
	end RawEthernetMessage.Impl;
	
	data SizedEthernetMessage
	properties
	  Data_Model::Data_Representation => Struct;
	end SizedEthernetMessage;
	
	data implementation SizedEthernetMessage.Impl
	subcomponents
		message : data RawEthernetMessage;
		size : data Base_types::Unsigned_16;
	end SizedEthernetMessage.Impl;

	thread LowLevelEthernetDriver
		features
			-- Ethernet Frames: Raw Ethernet frames received from the physical network interface. 	  
			EthernetFramesRx0: out data port RawEthernetMessage.Impl;
			EthernetFramesRx1: out data port RawEthernetMessage.Impl;
			EthernetFramesRx2: out data port RawEthernetMessage.Impl;
			EthernetFramesRx3: out data port RawEthernetMessage.Impl;
			EthernetFramesTx0: in data port SizedEthernetMessage.Impl;
			EthernetFramesTx1: in data port SizedEthernetMessage.Impl;
			EthernetFramesTx2: in data port SizedEthernetMessage.Impl;
			EthernetFramesTx3: in data port SizedEthernetMessage.Impl;
	end LowLevelEthernetDriver;

	thread implementation LowLevelEthernetDriver.Impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 100ms .. 100ms;
			Stack_size => 1048576 Bytes;
			Source_Text => ("src/LowLevelEthernetDriver.c");
			Initialize_Entrypoint_Source_Text => "init";
			Compute_Entrypoint_Source_Text => "compute";
	end LowLevelEthernetDriver.Impl;

	process LowLevelEthernetDriver_seL4
		features
			-- Ethernet Frames: Raw Ethernet frames received from the physical network interface.
			EthernetFramesRx0: out data port RawEthernetMessage.Impl;
			EthernetFramesRx1: out data port RawEthernetMessage.Impl;
			EthernetFramesRx2: out data port RawEthernetMessage.Impl;
			EthernetFramesRx3: out data port RawEthernetMessage.Impl;
			EthernetFramesTx0: in data port SizedEthernetMessage.Impl;
			EthernetFramesTx1: in data port SizedEthernetMessage.Impl;
			EthernetFramesTx2: in data port SizedEthernetMessage.Impl;
			EthernetFramesTx3: in data port SizedEthernetMessage.Impl;
	end LowLevelEthernetDriver_seL4;

	process implementation LowLevelEthernetDriver_seL4.Impl
		subcomponents
			LowLevelEthernetDriver: thread LowLevelEthernetDriver.Impl;
		connections
			c1: port EthernetFramesTx0 -> LowLevelEthernetDriver.EthernetFramesTx0;
			c2: port EthernetFramesTx1 -> LowLevelEthernetDriver.EthernetFramesTx1;
			c3: port EthernetFramesTx2 -> LowLevelEthernetDriver.EthernetFramesTx2;
			c4: port EthernetFramesTx3 -> LowLevelEthernetDriver.EthernetFramesTx3;
			c5: port LowLevelEthernetDriver.EthernetFramesRx0 -> EthernetFramesRx0;
			c6: port LowLevelEthernetDriver.EthernetFramesRx1 -> EthernetFramesRx1;
			c7: port LowLevelEthernetDriver.EthernetFramesRx2 -> EthernetFramesRx2;
			c8: port LowLevelEthernetDriver.EthernetFramesRx3 -> EthernetFramesRx3;
		properties
			CASE_Scheduling::Domain => 2;
	end LowLevelEthernetDriver_seL4.Impl;

	thread Firewall
		features
			EthernetFramesRxIn0: in data port RawEthernetMessage.Impl;
			EthernetFramesRxIn1: in data port RawEthernetMessage.Impl;
			EthernetFramesRxIn2: in data port RawEthernetMessage.Impl;
			EthernetFramesRxIn3: in data port RawEthernetMessage.Impl;
			EthernetFramesTxIn0: in data port RawEthernetMessage.Impl;
			EthernetFramesTxIn1: in data port RawEthernetMessage.Impl;
			EthernetFramesTxIn2: in data port RawEthernetMessage.Impl;
			EthernetFramesTxIn3: in data port RawEthernetMessage.Impl;
			EthernetFramesRxOut0: out data port RawEthernetMessage.Impl;
			EthernetFramesRxOut1: out data port RawEthernetMessage.Impl;
			EthernetFramesRxOut2: out data port RawEthernetMessage.Impl;
			EthernetFramesRxOut3: out data port RawEthernetMessage.Impl;
			EthernetFramesTxOut0: out data port SizedEthernetMessage.Impl;
			EthernetFramesTxOut1: out data port SizedEthernetMessage.Impl;
			EthernetFramesTxOut2: out data port SizedEthernetMessage.Impl;
			EthernetFramesTxOut3: out data port SizedEthernetMessage.Impl;
	end Firewall;

	thread implementation Firewall.Impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 100ms .. 100ms;
			Stack_size => 1048576 Bytes;
			Source_Text => ("src/Firewall.c");
			Initialize_Entrypoint_Source_Text => "init";
			Compute_Entrypoint_Source_Text => "compute";
	end Firewall.Impl;

	process Firewall_seL4
		features
			EthernetFramesRxIn0: in data port RawEthernetMessage.Impl;
			EthernetFramesRxIn1: in data port RawEthernetMessage.Impl;
			EthernetFramesRxIn2: in data port RawEthernetMessage.Impl;
			EthernetFramesRxIn3: in data port RawEthernetMessage.Impl;
			EthernetFramesTxIn0: in data port RawEthernetMessage.Impl;
			EthernetFramesTxIn1: in data port RawEthernetMessage.Impl;
			EthernetFramesTxIn2: in data port RawEthernetMessage.Impl;
			EthernetFramesTxIn3: in data port RawEthernetMessage.Impl;
			EthernetFramesRxOut0: out data port RawEthernetMessage.Impl;
			EthernetFramesRxOut1: out data port RawEthernetMessage.Impl;
			EthernetFramesRxOut2: out data port RawEthernetMessage.Impl;
			EthernetFramesRxOut3: out data port RawEthernetMessage.Impl;
			EthernetFramesTxOut0: out data port SizedEthernetMessage.Impl;
			EthernetFramesTxOut1: out data port SizedEthernetMessage.Impl;
			EthernetFramesTxOut2: out data port SizedEthernetMessage.Impl;
			EthernetFramesTxOut3: out data port SizedEthernetMessage.Impl;
	end Firewall_seL4;

	process implementation Firewall_seL4.Impl
		subcomponents
			Firewall: thread Firewall.Impl;
		connections
			c1: port EthernetFramesRxIn0 -> Firewall.EthernetFramesRxIn0;
			c2: port EthernetFramesRxIn1 -> Firewall.EthernetFramesRxIn1;
			c3: port EthernetFramesRxIn2 -> Firewall.EthernetFramesRxIn2;
			c4: port EthernetFramesRxIn3 -> Firewall.EthernetFramesRxIn3;
			c5: port EthernetFramesTxIn0 -> Firewall.EthernetFramesTxIn0;
			c6: port EthernetFramesTxIn1 -> Firewall.EthernetFramesTxIn1;
			c7: port EthernetFramesTxIn2 -> Firewall.EthernetFramesTxIn2;
			c8: port EthernetFramesTxIn3 -> Firewall.EthernetFramesTxIn3;
			c9: port Firewall.EthernetFramesRxOut0 -> EthernetFramesRxOut0;
			c10: port Firewall.EthernetFramesRxOut1 -> EthernetFramesRxOut1;
			c11: port Firewall.EthernetFramesRxOut2 -> EthernetFramesRxOut2;
			c12: port Firewall.EthernetFramesRxOut3 -> EthernetFramesRxOut3;
			c13: port Firewall.EthernetFramesTxOut0 -> EthernetFramesTxOut0;
			c14: port Firewall.EthernetFramesTxOut1 -> EthernetFramesTxOut1;
			c15: port Firewall.EthernetFramesTxOut2 -> EthernetFramesTxOut2;
			c16: port Firewall.EthernetFramesTxOut3 -> EthernetFramesTxOut3;
		properties
			CASE_Scheduling::Domain => 3;
	end Firewall_seL4.Impl;

	thread ArduPilot
		features
			EthernetFramesRx0: in data port RawEthernetMessage.Impl;
			EthernetFramesRx1: in data port RawEthernetMessage.Impl;
			EthernetFramesRx2: in data port RawEthernetMessage.Impl;
			EthernetFramesRx3: in data port RawEthernetMessage.Impl;
			EthernetFramesTx0: out data port RawEthernetMessage.Impl;
			EthernetFramesTx1: out data port RawEthernetMessage.Impl;
			EthernetFramesTx2: out data port RawEthernetMessage.Impl;
			EthernetFramesTx3: out data port RawEthernetMessage.Impl;
	end ArduPilot;

	thread implementation ArduPilot.Impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 100ms .. 100ms;
			Stack_size => 1048576 Bytes;
			Source_Text => ("src/Ardupilot.c");
			Initialize_Entrypoint_Source_Text => "init";
			Compute_Entrypoint_Source_Text => "compute";
	end ArduPilot.Impl;

	process ArduPilot_seL4
		features
			EthernetFramesRx0: in data port RawEthernetMessage.Impl;
			EthernetFramesRx1: in data port RawEthernetMessage.Impl;
			EthernetFramesRx2: in data port RawEthernetMessage.Impl;
			EthernetFramesRx3: in data port RawEthernetMessage.Impl;
			EthernetFramesTx0: out data port RawEthernetMessage.Impl;
			EthernetFramesTx1: out data port RawEthernetMessage.Impl;
			EthernetFramesTx2: out data port RawEthernetMessage.Impl;
			EthernetFramesTx3: out data port RawEthernetMessage.Impl;
	end ArduPilot_seL4;

	process implementation ArduPilot_seL4.Impl
		subcomponents
			ArduPilot: thread ArduPilot.Impl;
		connections
			c1: port EthernetFramesRx0 -> ArduPilot.EthernetFramesRx0;
			c2: port EthernetFramesRx1 -> ArduPilot.EthernetFramesRx1;
			c3: port EthernetFramesRx2 -> ArduPilot.EthernetFramesRx2;
			c4: port EthernetFramesRx3 -> ArduPilot.EthernetFramesRx3;
			c5: port ArduPilot.EthernetFramesTx0 -> EthernetFramesTx0;
			c6: port ArduPilot.EthernetFramesTx1 -> EthernetFramesTx1;
			c7: port ArduPilot.EthernetFramesTx2 -> EthernetFramesTx2;
			c8: port ArduPilot.EthernetFramesTx3 -> EthernetFramesTx3;
		properties
			CASE_Scheduling::Domain => 4;
	end ArduPilot_seL4.Impl;

	system seL4

	end seL4;

	system implementation seL4.Impl
		subcomponents
			--LowLevelEthernetDriver: process LowLevelEthernetDriver_seL4.Impl;
			--Firewall: process Firewall_seL4.Impl;
			--ArduPilot: process ArduPilot_seL4.Impl;
			ArduPilot: process ArduPilot_seL4.Impl;
			Firewall: process Firewall_seL4.Impl;
			LowLevelEthernetDriver: process LowLevelEthernetDriver_seL4.Impl;
			
		connections
			-- Incoming traffic
			c1: port LowLevelEthernetDriver.EthernetFramesRx0 -> Firewall.EthernetFramesRxIn0;
			c2: port LowLevelEthernetDriver.EthernetFramesRx1 -> Firewall.EthernetFramesRxIn1;
			c3: port LowLevelEthernetDriver.EthernetFramesRx2 -> Firewall.EthernetFramesRxIn2;
			c4: port LowLevelEthernetDriver.EthernetFramesRx3 -> Firewall.EthernetFramesRxIn3;
			c5: port Firewall.EthernetFramesRxOut0 -> ArduPilot.EthernetFramesRx0;
			c6: port Firewall.EthernetFramesRxOut1 -> ArduPilot.EthernetFramesRx1;
			c7: port Firewall.EthernetFramesRxOut2 -> ArduPilot.EthernetFramesRx2;
			c8: port Firewall.EthernetFramesRxOut3 -> ArduPilot.EthernetFramesRx3;
			-- Outgoing traffic
			c9: port ArduPilot.EthernetFramesTx0 -> Firewall.EthernetFramesTxIn0;
			c10: port ArduPilot.EthernetFramesTx1 -> Firewall.EthernetFramesTxIn1;
			c11: port ArduPilot.EthernetFramesTx2 -> Firewall.EthernetFramesTxIn2;
			c12: port ArduPilot.EthernetFramesTx3 -> Firewall.EthernetFramesTxIn3;
			c13: port Firewall.EthernetFramesTxOut0 -> LowLevelEthernetDriver.EthernetFramesTx0;
			c14: port Firewall.EthernetFramesTxOut1 -> LowLevelEthernetDriver.EthernetFramesTx1;
			c15: port Firewall.EthernetFramesTxOut2 -> LowLevelEthernetDriver.EthernetFramesTx2;
			c16: port Firewall.EthernetFramesTxOut3 -> LowLevelEthernetDriver.EthernetFramesTx3;
	end seL4.Impl;
	
end SW;
