package SW
public

	with CASE_Scheduling;
	with Data_Model;
	with Base_Types;
	with HAMR;
	
	annex GUMBO {**
		functions
			def isMalformedFrame(v: StructuredEthernetMessage.i): Base_Types::Boolean := v.malformedFrame;
		
			def getInternetProtocol(v:StructuredEthernetMessage.i): InternetProtocol := v.internetProtocol;
			def isIPV4(v:StructuredEthernetMessage.i): Base_Types::Boolean := getInternetProtocol(v) == SW::InternetProtocol.IPV4;
			def isIPV6(v:StructuredEthernetMessage.i): Base_Types::Boolean := v.internetProtocol == SW::InternetProtocol.IPV6	;
			
			def getFrameProtocol(v:StructuredEthernetMessage.i): FrameProtocol := v.frameProtocol;
			def isTCP(v:StructuredEthernetMessage.i): Base_Types::Boolean := v.frameProtocol == SW::FrameProtocol.TCP;
			def isARP(v:StructuredEthernetMessage.i): Base_Types::Boolean := v.frameProtocol == SW::FrameProtocol.ARP;
			
			def isPortWhitelisted(v:StructuredEthernetMessage.i): Base_Types::Boolean := v.portIsWhitelisted;
			
			def getARP_Type(v:StructuredEthernetMessage.i): ARP_Type := v.arpType;
			def isARP_Request(v:StructuredEthernetMessage.i): Base_Types::Boolean := v.arpType == SW::ARP_Type.REQUEST;
			def isARP_Reply(v:StructuredEthernetMessage.i): Base_Types::Boolean := v.arpType == SW::ARP_Type.REPLY;
	**};

    data InternetProtocol 
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("IPV4", "IPV6");
    end InternetProtocol;
    
    data FrameProtocol
    	properties
    		Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("TCP", "ARP");
    end FrameProtocol;
    
    data ARP_Type
    	properties
    		Data_Model::Data_Representation => Enum;
    		Data_Model::Enumerators => ("REQUEST", "REPLY", "NA");
    end ARP_Type;
    
	data RawEthernetMessage
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
			Data_Model::Dimension => (1600);
			Data_Size => 1600 Bytes;
			HAMR::Array_Size_Kind => Fixed;
	end RawEthernetMessage;
	
	data StructuredEthernetMessage
	end StructuredEthernetMessage;
	
	data implementation StructuredEthernetMessage.i
		subcomponents
			malformedFrame: data Base_Types::Boolean;
			internetProtocol: data InternetProtocol;
			frameProtocol: data FrameProtocol;
			portIsWhitelisted: data Base_Types::Boolean;
			arpType: data ARP_Type;
			
			rawMessage: data RawEthernetMessage;
		annex GUMBO {**
			invariants
				inv relateFrameProtocolToArpType:
					(frameProtocol == SW::FrameProtocol.TCP & arpType == SW::ARP_Type.NA) |
					(frameProtocol == SW::FrameProtocol.ARP & 
						(arpType == SW::ARP_Type.REQUEST | arpType == SW::ARP_Type.REPLY)); 
		**};
	end StructuredEthernetMessage.i;

	
    ----------------------------------------------------------------------------------------
    
	thread LowLevelEthernetDriver
		features
			-- Ethernet Frames: Raw Ethernet frames received from the physical network interface. 	  
			EthernetFramesRx: out event data port StructuredEthernetMessage.i;
			EthernetFramesTx: in event data port StructuredEthernetMessage.i;
	end LowLevelEthernetDriver;

	thread implementation LowLevelEthernetDriver.Impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 100ms .. 100ms;
			Stack_size => 1048576 Bytes;
	end LowLevelEthernetDriver.Impl;

	process LowLevelEthernetDriver_seL4
		features
			-- Ethernet Frames: Raw Ethernet frames received from the physical network interface.
			EthernetFramesRx: out event data port StructuredEthernetMessage.i;
			EthernetFramesTx: in event data port StructuredEthernetMessage.i;
	end LowLevelEthernetDriver_seL4;

	process implementation LowLevelEthernetDriver_seL4.Impl
		subcomponents
			LowLevelEthernetDriver: thread LowLevelEthernetDriver.Impl;
		connections
			c1: port EthernetFramesTx -> LowLevelEthernetDriver.EthernetFramesTx;
			c2: port LowLevelEthernetDriver.EthernetFramesRx -> EthernetFramesRx;
		properties
			CASE_Scheduling::Domain => 2;
	end LowLevelEthernetDriver_seL4.Impl;

	----------------------------------------------------------------------------------------
	
	thread Firewall
		features
			EthernetFramesRxIn: in event data port StructuredEthernetMessage.i;
			EthernetFramesTxIn: in event data port StructuredEthernetMessage.i;
			EthernetFramesRxOut: out event data port StructuredEthernetMessage.i;
			EthernetFramesTxOut: out event data port StructuredEthernetMessage.i;
			
		annex GUMBO {**
			compute
				assume onlyOneInEvent "Allow at most one incoming event per dispatch": 
					((!HasEvent(EthernetFramesRxIn)) & (!HasEvent(EthernetFramesTxIn))) | 
					  (HasEvent(EthernetFramesRxIn) |^ HasEvent(EthernetFramesTxIn));
					
				guarantee RC_INSPECTA_00_HLR_2 "1.2 firewall: drop ipv6 frames (RC_INSPECTA_00-HLR-2) The firewall shall drop any frame that is type ipv6.":
					((HasEvent(EthernetFramesRxIn)) ~~>: (EthernetFramesRxIn.internetProtocol == SW::InternetProtocol.IPV6) ->:
						(NoSend(EthernetFramesRxOut))
					);

				guarantee RC_INSPECTA_00_HLR_4 "1.4 firewall: drop RxIn ipv4 tcp frames with unexpected ports (RC_INSPECTA_00-HLR-4) The firewall shall
				                               |drop any frame from RxIn that is an Ipv4 frame whose protocol is TCP and whose port is not defined in the port whitelist.":
				    ((HasEvent(EthernetFramesRxIn)) ~~>: 
				    	(EthernetFramesRxIn.internetProtocol == SW::InternetProtocol.IPV6 & 
				    		EthernetFramesRxIn.frameProtocol == SW::FrameProtocol.TCP & 
				    		(!EthernetFramesRxIn.portIsWhitelisted)
				    	) ->: 
				    	(NoSend(EthernetFramesRxOut) || EthernetFramesRxOut != EthernetFramesRxIn)); 
				
				guarantee RC_INSPECTA_00_HLR_5 "1.5 firewall: reply to RxIn arp requests (RC_INSPECTA_00-HLR-5) If the firewall gets an Arp request frame from RxIn,
				                                |the firewall shall send an Arp reply frame to TxOut.":
					--((HasEvent(EthernetFramesRxIn)) ~~>: (isIPV4(EthernetFramesRxIn) & isARP_Request(EthernetFramesRxIn)) ->: (MustSend(EthernetFramesTxOut) && isARP_Reply(EthernetFramesTxOut)));
					((HasEvent(EthernetFramesRxIn)) ~~>: (EthernetFramesRxIn.internetProtocol == SW::InternetProtocol.IPV4) & 
						EthernetFramesRxIn.frameProtocol == SW::FrameProtocol.ARP
					) ->: (MustSend(EthernetFramesTxOut) && (EthernetFramesTxOut.arpType == SW::ARP_Type.REPLY));
				   
				guarantee RC_INSPECTA_00_HLR_6 "1.6 firewall: copy through allowed tcp port packets (RC_INSPECTA_00-HLR-6) The firewall shall copy any frame from RxIn 
				                               |that is an Ipv4 frame with the TCP protocol and whose port is defined in the port whitelist to RxOut.":
					--((HasEvent(EthernetFramesRxIn)) ~~>: (isIPV4(EthernetFramesRxIn) & isTCP(EthernetFramesRxIn) & isPortWhitelisted(EthernetFramesRxIn)) ->: 
					--	(MustSend(EthernetFramesRxOut) && EthernetFramesRxIn == EthernetFramesRxOut));
					((HasEvent(EthernetFramesRxIn)) ~~>: (EthernetFramesRxIn.internetProtocol == SW::InternetProtocol.IPV4 & EthernetFramesRxIn.frameProtocol == SW::FrameProtocol.TCP & EthernetFramesRxIn.portIsWhitelisted) ->: 
						(MustSend(EthernetFramesRxOut) && EthernetFramesRxIn == EthernetFramesRxOut));						
								
				guarantee RC_INSPECTA_00_HLR_7 "1.7 firewall: copy out tx arp and ipv4 frames (RC_INSPECTA_00-HLR-7) The firewall shall copy any frame from TxIn that
				                               |is an Ipv4 or Arp frame to TxOut.":
					((HasEvent(EthernetFramesTxIn)) ~~>: (EthernetFramesTxIn.internetProtocol == SW::InternetProtocol.IPV4 | 
						EthernetFramesTxIn.frameProtocol == SW::FrameProtocol.ARP
					) ->: 
						(MustSend(EthernetFramesTxOut) && EthernetFramesTxIn == EthernetFramesTxOut));
		**};
	end Firewall;

	thread implementation Firewall.Impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 100ms .. 100ms;
			Stack_size => 1048576 Bytes;
	end Firewall.Impl;

	process Firewall_seL4
		features
			EthernetFramesRxIn: in event data port StructuredEthernetMessage.i;
			EthernetFramesTxIn: in event data port StructuredEthernetMessage.i;
			EthernetFramesRxOut: out event data port StructuredEthernetMessage.i;
			EthernetFramesTxOut: out event data port StructuredEthernetMessage.i;
	end Firewall_seL4;

	process implementation Firewall_seL4.Impl
		subcomponents
			Firewall: thread Firewall.Impl;
		connections
			c1: port EthernetFramesRxIn -> Firewall.EthernetFramesRxIn;
			c2: port EthernetFramesTxIn -> Firewall.EthernetFramesTxIn;
			c3: port Firewall.EthernetFramesRxOut -> EthernetFramesRxOut;
			c4: port Firewall.EthernetFramesTxOut -> EthernetFramesTxOut;
		properties
			CASE_Scheduling::Domain => 3;
	end Firewall_seL4.Impl;

	----------------------------------------------------------------------------------------
	
	thread ArduPilot
		features
			EthernetFramesRx: in event data port StructuredEthernetMessage.i;
			EthernetFramesTx: out event data port StructuredEthernetMessage.i;
	end ArduPilot;

	thread implementation ArduPilot.Impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 100ms .. 100ms;
			Stack_size => 1048576 Bytes;
	end ArduPilot.Impl;

	process ArduPilot_seL4
		features
			EthernetFramesRx: in event data port StructuredEthernetMessage.i;
			EthernetFramesTx: out event data port StructuredEthernetMessage.i;
	end ArduPilot_seL4;

	process implementation ArduPilot_seL4.Impl
		subcomponents
			ArduPilot: thread ArduPilot.Impl;
		connections
			c1: port EthernetFramesRx -> ArduPilot.EthernetFramesRx;
			c2: port ArduPilot.EthernetFramesTx -> EthernetFramesTx;
		properties
			CASE_Scheduling::Domain => 4;
	end ArduPilot_seL4.Impl;

	----------------------------------------------------------------------------------------
	
	system seL4
		properties
			HAMR::Microkit_Language => Rust;
	end seL4;

	system implementation seL4.Impl
		subcomponents
			--LowLevelEthernetDriver: process LowLevelEthernetDriver_seL4.Impl;
			--Firewall: process Firewall_seL4.Impl;
			--ArduPilot: process ArduPilot_seL4.Impl;
			ArduPilot: process ArduPilot_seL4.Impl;
			Firewall: process Firewall_seL4.Impl;
			LowLevelEthernetDriver: process LowLevelEthernetDriver_seL4.Impl;
			
		connections
			-- Incoming traffic
			c1: port LowLevelEthernetDriver.EthernetFramesRx -> Firewall.EthernetFramesRxIn;
			c2: port Firewall.EthernetFramesRxOut -> ArduPilot.EthernetFramesRx;
			-- Outgoing traffic
			c3: port ArduPilot.EthernetFramesTx -> Firewall.EthernetFramesTxIn;
			c4: port Firewall.EthernetFramesTxOut -> LowLevelEthernetDriver.EthernetFramesTx;
	end seL4.Impl;
	
end SW;