// #Sireum

package firewall.SW

import org.sireum._
import art._
import firewall._
import firewall.SW.{LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver => component}

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

@datatype class LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_Bridge(
  val id: Art.BridgeId,
  val name: String,
  val dispatchProtocol: DispatchPropertyProtocol,
  val dispatchTriggers: Option[ISZ[Art.PortId]],

  EthernetFramesRx: Port[SW.RawEthernetMessage],
  EthernetFramesTx: Port[SW.RawEthernetMessage]
  ) extends Bridge {

  val ports : Bridge.Ports = Bridge.Ports(
    dataIns = ISZ[art.UPort](),

    dataOuts = ISZ[art.UPort](),

    eventIns = ISZ[art.UPort](EthernetFramesTx),

    eventOuts = ISZ[art.UPort](EthernetFramesRx)
  )

  val initialization_api : LowLevelEthernetDriver_Impl_Initialization_Api = {
    val api = LowLevelEthernetDriver_Impl_Initialization_Api(
      id,
      EthernetFramesRx.id,
      EthernetFramesTx.id
    )
    LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_Bridge.c_initialization_api = Some(api)
    api
  }

  val operational_api : LowLevelEthernetDriver_Impl_Operational_Api = {
    val api = LowLevelEthernetDriver_Impl_Operational_Api(
      id,
      EthernetFramesRx.id,
      EthernetFramesTx.id
    )
    LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_Bridge.c_operational_api = Some(api)
    api
  }

  val entryPoints : Bridge.EntryPoints =
    LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_Bridge.EntryPoints(
      id,

      EthernetFramesRx.id,
      EthernetFramesTx.id,

      dispatchTriggers,

      initialization_api,
      operational_api)
}

object LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_Bridge {

  var c_initialization_api: Option[LowLevelEthernetDriver_Impl_Initialization_Api] = None()
  var c_operational_api: Option[LowLevelEthernetDriver_Impl_Operational_Api] = None()

  @datatype class EntryPoints(
    LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_BridgeId : Art.BridgeId,
    EthernetFramesRx_Id : Art.PortId,
    EthernetFramesTx_Id : Art.PortId,
    dispatchTriggers : Option[ISZ[Art.PortId]],
    initialization_api: LowLevelEthernetDriver_Impl_Initialization_Api,
    operational_api: LowLevelEthernetDriver_Impl_Operational_Api) extends Bridge.EntryPoints {

    val dataInPortIds: ISZ[Art.PortId] = IS()

    val eventInPortIds: ISZ[Art.PortId] = IS(EthernetFramesTx_Id)

    val dataOutPortIds: ISZ[Art.PortId] = IS()

    val eventOutPortIds: ISZ[Art.PortId] = IS(EthernetFramesRx_Id)

    def initialise(): Unit = {
      LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_EntryPoint_Companion.pre_initialise()

      // implement the following method in 'component':  def initialise(api: LowLevelEthernetDriver_Impl_Initialization_Api): Unit = {}
      component.initialise(initialization_api)

      LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_EntryPoint_Companion.post_initialise()

      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def compute(): Unit = {
      LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_Injection_Service.pre_receiveInput()

      Art.receiveInput(eventInPortIds, dataInPortIds)

      LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_EntryPoint_Companion.pre_compute()

      // implement the following in 'component':  def timeTriggered(api: LowLevelEthernetDriver_Impl_Operational_Api): Unit = {}
      component.timeTriggered(operational_api)

      LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_EntryPoint_Companion.post_compute()

      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def finalise(): Unit = {
      // implement the following method in 'component':  def finalise(api: LowLevelEthernetDriver_Impl_Operational_Api): Unit = {}
      component.finalise(operational_api)
    }

    override
    def testInitialise(): Unit = {
      // implement the following method in 'component':  def initialise(api: LowLevelEthernetDriver_Impl_Initialization_Api): Unit = {}
      component.initialise(initialization_api)
      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }

    override
    def testCompute(): Unit = {
      Art.receiveInput(eventInPortIds, dataInPortIds)

      // implement the following in 'component':  def timeTriggered(api: LowLevelEthernetDriver_Impl_Operational_Api): Unit = {}
      component.timeTriggered(operational_api)

      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }
  }
}