// #Sireum

package firewall.SW

import org.sireum._
import art._
import firewall._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_EntryPoint_Companion {

  var preStateContainer_wL: Option[LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PreState_Container_PS] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS(
        api_EthernetFramesRx = 
          if (Art.observeOutPortVariable(Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.operational_api.EthernetFramesRx_Id).nonEmpty)
            Some(Art.observeOutPortVariable(Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.operational_api.EthernetFramesRx_Id).get.asInstanceOf[SW.RawEthernetMessage_Payload].value)
          else None())

    // the rest can now be performed via a different thread
    firewall.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.id, firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postInit, postStateContainer_wL)
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PreState_Container_PS(
        api_EthernetFramesTx = 
          if (Art.observeInPortVariable(Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.operational_api.EthernetFramesTx_Id).nonEmpty)
            Some(Art.observeInPortVariable(Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.operational_api.EthernetFramesTx_Id).get.asInstanceOf[SW.RawEthernetMessage_Payload].value)
          else None()))

    // the rest can now be performed via a different thread
    firewall.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.id, firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS(
        api_EthernetFramesRx = 
          if (Art.observeOutPortVariable(Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.operational_api.EthernetFramesRx_Id).nonEmpty)
            Some(Art.observeOutPortVariable(Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.operational_api.EthernetFramesRx_Id).get.asInstanceOf[SW.RawEthernetMessage_Payload].value)
          else None())

    // the rest can now be performed via a different thread
    firewall.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.id, firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)
  }
}