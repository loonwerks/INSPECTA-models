// #Sireum

package firewall.runtimemonitor

import org.sireum._
import firewall._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object GumboXDispatcher {
  def checkContract(observationKind: ObservationKind.Type, preContainer: Option[art.DataContent], postContainer: Option[art.DataContent]): B = {
    observationKind match {
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_ArduPilot_ArduPilot_postInit =>
        val result: B = firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_PostState_Container_PS])
        //println(s"ArduPilot.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_ArduPilot_ArduPilot_preCompute =>
        val result: B = firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_PreState_Container_PS])
        //println(s"ArduPilot.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_ArduPilot_ArduPilot_postCompute =>
        val result: B = firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_PreState_Container_PS], postContainer.get.asInstanceOf[firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_PostState_Container_PS])
        //println(s"ArduPilot.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_Firewall_Firewall_postInit =>
        val result: B = firewall.SW.Firewall_Impl_Firewall_Firewall_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[firewall.SW.Firewall_Impl_Firewall_Firewall_PostState_Container_PS])
        //println(s"Firewall.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_Firewall_Firewall_preCompute =>
        val result: B = firewall.SW.Firewall_Impl_Firewall_Firewall_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[firewall.SW.Firewall_Impl_Firewall_Firewall_PreState_Container_PS])
        //println(s"Firewall.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_Firewall_Firewall_postCompute =>
        val result: B = firewall.SW.Firewall_Impl_Firewall_Firewall_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[firewall.SW.Firewall_Impl_Firewall_Firewall_PreState_Container_PS], postContainer.get.asInstanceOf[firewall.SW.Firewall_Impl_Firewall_Firewall_PostState_Container_PS])
        //println(s"Firewall.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postInit =>
        val result: B = firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS])
        //println(s"LowLevelEthernetDriver.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_preCompute =>
        val result: B = firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PreState_Container_PS])
        //println(s"LowLevelEthernetDriver.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postCompute =>
        val result: B = firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PreState_Container_PS], postContainer.get.asInstanceOf[firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS])
        //println(s"LowLevelEthernetDriver.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case _ => halt("Infeasible")
    }
  }

  def genTestSuite(testCases: ISZ[(Z, ISZ[ST])]): Unit = {
    val tq = "\"\"\""

    val testRoot = Os.path(".") / "src" / "test" / "bridge"

    val ArduPilot_Impl_ArduPilot_ArduPilot_id = Arch.seL4_Impl_Instance_ArduPilot_ArduPilot.id
    val Firewall_Impl_Firewall_Firewall_id = Arch.seL4_Impl_Instance_Firewall_Firewall.id
    val LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_id = Arch.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver.id

    def genUniqueSuiteName(path: Os.Path, prefix: String): String = {
      var i = 0
      while(true) {
        val cand = path / s"${prefix}_${i}.scala"
        if (!cand.exists) {
          return s"${prefix}_${i}"
        }
        i = i + 1
      }
      halt("Infeasible")
    }

    for (p <- testCases) {
      art.Art.BridgeId.fromZ(p._1) match {
        case ArduPilot_Impl_ArduPilot_ArduPilot_id =>
          val prefix = "ArduPilot_Impl_ArduPilot_ArduPilot_RM_TestSuite"
          val path = testRoot /+ ISZ("firewall","SW")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package firewall.SW
                |
                |import org.sireum._
                |import firewall.SW._
                |
                |class ${suiteName} extends ArduPilot_Impl_ArduPilot_ArduPilot_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = T
                |
                |  ${p._2}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Firewall_Impl_Firewall_Firewall_id =>
          val prefix = "Firewall_Impl_Firewall_Firewall_RM_TestSuite"
          val path = testRoot /+ ISZ("firewall","SW")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package firewall.SW
                |
                |import org.sireum._
                |import firewall.SW._
                |
                |class ${suiteName} extends Firewall_Impl_Firewall_Firewall_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = T
                |
                |  ${p._2}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_id =>
          val prefix = "LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_RM_TestSuite"
          val path = testRoot /+ ISZ("firewall","SW")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package firewall.SW
                |
                |import org.sireum._
                |import firewall.SW._
                |
                |class ${suiteName} extends LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = T
                |
                |  ${p._2}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case x => halt(s"Infeasible bridge id: $x")
      }
    }
  }

  def genTestCase(observationKind: ObservationKind.Type, preContainer: Option[String], postContainer: Option[String], testNameSuffix: Option[String]): ST = {
    val tq = "\"\"\""
    val suffix: String =
      if (testNameSuffix.nonEmpty) testNameSuffix.get
      else ""

    observationKind match {
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_ArduPilot_ArduPilot_postInit =>
        return (st"""// Begin test cases for seL4_Impl_Instance_ArduPilot_ArduPilot_postInit
                    |
                    |test(s"seL4_Impl_Instance_ArduPilot_ArduPilot_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = firewall.JSON.toSWArduPilot_Impl_ArduPilot_ArduPilot_PostState_Container_PS(postJson).left
                    |  assert(firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for seL4_Impl_Instance_ArduPilot_ArduPilot_postInit""")
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_ArduPilot_ArduPilot_preCompute =>
        return (st"""// Begin test cases for seL4_Impl_Instance_ArduPilot_ArduPilot_preCompute
                    |
                    |test(s"seL4_Impl_Instance_ArduPilot_ArduPilot_preCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = firewall.JSON.toSWArduPilot_Impl_ArduPilot_ArduPilot_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |// End test cases for seL4_Impl_Instance_ArduPilot_ArduPilot_preCompute""")
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_ArduPilot_ArduPilot_postCompute =>
        return (st"""// Begin test cases for seL4_Impl_Instance_ArduPilot_ArduPilot_postCompute
                    |
                    |test(s"seL4_Impl_Instance_ArduPilot_ArduPilot_postCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = firewall.JSON.toSWArduPilot_Impl_ArduPilot_ArduPilot_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"seL4_Impl_Instance_ArduPilot_ArduPilot_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = firewall.JSON.toSWArduPilot_Impl_ArduPilot_ArduPilot_PreState_Container_PS(preJson).left
                    |  val postContainer = firewall.JSON.toSWArduPilot_Impl_ArduPilot_ArduPilot_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for seL4_Impl_Instance_ArduPilot_ArduPilot_postCompute""")
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_Firewall_Firewall_postInit =>
        return (st"""// Begin test cases for seL4_Impl_Instance_Firewall_Firewall_postInit
                    |
                    |test(s"seL4_Impl_Instance_Firewall_Firewall_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = firewall.JSON.toSWFirewall_Impl_Firewall_Firewall_PostState_Container_PS(postJson).left
                    |  assert(firewall.SW.Firewall_Impl_Firewall_Firewall_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for seL4_Impl_Instance_Firewall_Firewall_postInit""")
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_Firewall_Firewall_preCompute =>
        return (st"""// Begin test cases for seL4_Impl_Instance_Firewall_Firewall_preCompute
                    |
                    |test(s"seL4_Impl_Instance_Firewall_Firewall_preCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = firewall.JSON.toSWFirewall_Impl_Firewall_Firewall_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(firewall.SW.Firewall_Impl_Firewall_Firewall_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |// End test cases for seL4_Impl_Instance_Firewall_Firewall_preCompute""")
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_Firewall_Firewall_postCompute =>
        return (st"""// Begin test cases for seL4_Impl_Instance_Firewall_Firewall_postCompute
                    |
                    |test(s"seL4_Impl_Instance_Firewall_Firewall_postCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = firewall.JSON.toSWFirewall_Impl_Firewall_Firewall_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(firewall.SW.Firewall_Impl_Firewall_Firewall_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"seL4_Impl_Instance_Firewall_Firewall_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = firewall.JSON.toSWFirewall_Impl_Firewall_Firewall_PreState_Container_PS(preJson).left
                    |  val postContainer = firewall.JSON.toSWFirewall_Impl_Firewall_Firewall_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(firewall.SW.Firewall_Impl_Firewall_Firewall_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for seL4_Impl_Instance_Firewall_Firewall_postCompute""")
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postInit =>
        return (st"""// Begin test cases for seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postInit
                    |
                    |test(s"seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = firewall.JSON.toSWLowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS(postJson).left
                    |  assert(firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postInit""")
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_preCompute =>
        return (st"""// Begin test cases for seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_preCompute
                    |
                    |test(s"seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_preCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = firewall.JSON.toSWLowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |// End test cases for seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_preCompute""")
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postCompute =>
        return (st"""// Begin test cases for seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postCompute
                    |
                    |test(s"seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = firewall.JSON.toSWLowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = firewall.JSON.toSWLowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PreState_Container_PS(preJson).left
                    |  val postContainer = firewall.JSON.toSWLowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postCompute""")
      case _ => return st"// TODO ${observationKind}"
    }
  }

  def getUpdates(bridge_id: art.Art.BridgeId, observationKind: ObservationKind.Type, container: art.DataContent): Map[String, String] = {
    observationKind match {
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_ArduPilot_ArduPilot_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_PostState_Container_PS]
        if (postContainer.api_EthernetFramesTx.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_EthernetFramesTx" ~> postContainer.api_EthernetFramesTx.get.string
        }
        return updates
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_Firewall_Firewall_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[firewall.SW.Firewall_Impl_Firewall_Firewall_PostState_Container_PS]
        if (postContainer.api_EthernetFramesRxOut.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_EthernetFramesRxOut" ~> postContainer.api_EthernetFramesRxOut.get.string
        }
        if (postContainer.api_EthernetFramesTxOut.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_EthernetFramesTxOut" ~> postContainer.api_EthernetFramesTxOut.get.string
        }
        return updates
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS]
        if (postContainer.api_EthernetFramesRx.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_EthernetFramesRx" ~> postContainer.api_EthernetFramesRx.get.string
        }
        return updates
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_ArduPilot_ArduPilot_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_PreState_Container_PS]
        if (preContainer.api_EthernetFramesRx.nonEmpty) {
          updates = updates + s"${bridge_id}_In_EthernetFramesRx" ~> preContainer.api_EthernetFramesRx.get.string
        }
        return updates
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_Firewall_Firewall_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[firewall.SW.Firewall_Impl_Firewall_Firewall_PreState_Container_PS]
        if (preContainer.api_EthernetFramesRxIn.nonEmpty) {
          updates = updates + s"${bridge_id}_In_EthernetFramesRxIn" ~> preContainer.api_EthernetFramesRxIn.get.string
        }
        if (preContainer.api_EthernetFramesTxIn.nonEmpty) {
          updates = updates + s"${bridge_id}_In_EthernetFramesTxIn" ~> preContainer.api_EthernetFramesTxIn.get.string
        }
        return updates
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PreState_Container_PS]
        if (preContainer.api_EthernetFramesTx.nonEmpty) {
          updates = updates + s"${bridge_id}_In_EthernetFramesTx" ~> preContainer.api_EthernetFramesTx.get.string
        }
        return updates
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_ArduPilot_ArduPilot_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[firewall.SW.ArduPilot_Impl_ArduPilot_ArduPilot_PostState_Container_PS]
        if (postContainer.api_EthernetFramesTx.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_EthernetFramesTx" ~> postContainer.api_EthernetFramesTx.get.string
        }
        return updates
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_Firewall_Firewall_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[firewall.SW.Firewall_Impl_Firewall_Firewall_PostState_Container_PS]
        if (postContainer.api_EthernetFramesRxOut.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_EthernetFramesRxOut" ~> postContainer.api_EthernetFramesRxOut.get.string
        }
        if (postContainer.api_EthernetFramesTxOut.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_EthernetFramesTxOut" ~> postContainer.api_EthernetFramesTxOut.get.string
        }
        return updates
      case firewall.runtimemonitor.ObservationKind.seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[firewall.SW.LowLevelEthernetDriver_Impl_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS]
        if (postContainer.api_EthernetFramesRx.nonEmpty) {
          updates = updates + s"${bridge_id}_Out_EthernetFramesRx" ~> postContainer.api_EthernetFramesRx.get.string
        }
        return updates
      case _ => return Map.empty
    }
  }
}