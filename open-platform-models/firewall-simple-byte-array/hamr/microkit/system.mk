# Do not edit this file as it will be overwritten if codegen is rerun

ifeq ($(strip $(MICROKIT_SDK)),)
$(error MICROKIT_SDK must be specified)
endif

MICROKIT_TOOL ?= $(MICROKIT_SDK)/bin/microkit

ifeq ("$(wildcard $(MICROKIT_TOOL))","")
$(error Microkit tool not found at ${MICROKIT_TOOL})
endif

ifeq ($(strip $(MICROKIT_BOARD)),)
$(error MICROKIT_BOARD must be specified)
endif

CFLAGS := -mcpu=$(CPU) \
	-mstrict-align \
	-ffreestanding \
	-nostdlib \
	-g3 \
	-O3 \
	-Wall -Wno-unused-function -Werror -Wno-unused-command-line-argument \
	-I$(MICROKIT_BOARD_DIR)/include \
	-target $(TARGET)

LDFLAGS := -L$(MICROKIT_BOARD_DIR)/lib
LIBS := --start-group -lmicrokit -Tmicrokit.ld --end-group

SYSTEM_FILE := $(TOP_DIR)/microkit.system

IMAGES := ArduPilot_ArduPilot.elf ArduPilot_ArduPilot_MON.elf Firewall_Firewall.elf Firewall_Firewall_MON.elf LowLevelEthernetDriver_LowLevelEthernetDriver.elf LowLevelEthernetDriver_LowLevelEthernetDriver_MON.elf pacer.elf
IMAGE_FILE = loader.img
REPORT_FILE = report.txt

UTIL_OBJS = printf.o util.o

TYPES_DIR = $(TOP_DIR)/types
TYPE_OBJS := $(TOP_DIR)/build/sb_queue_SW_RawEthernetMessage_1.o $(TOP_DIR)/build/sb_queue_SW_RawEthernetMessage_1.o $(TOP_DIR)/build/sb_queue_SW_RawEthernetMessage_1.o $(TOP_DIR)/build/sb_queue_SW_RawEthernetMessage_1.o

# exporting TOP_TYPES_INCLUDE in case other makefiles need it
export TOP_TYPES_INCLUDE = -I$(TYPES_DIR)/include

TOP_INCLUDE = $(TOP_TYPES_INCLUDE) -I$(TOP_DIR)/util/include

all: $(IMAGE_FILE)
	CHECK_FLAGS_BOARD_MD5:=.board_cflags-$(shell echo -- ${CFLAGS} ${MICROKIT_BOARD} ${MICROKIT_CONFIG}| shasum | sed 's/ *-//')

${CHECK_FLAGS_BOARD_MD5}:
	-rm -f .board_cflags-*
	touch $@

%.o: ${TOP_DIR}/util/src/%.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ -I$(TOP_DIR)/util/include

$(TOP_DIR)/build/sb_queue_SW_RawEthernetMessage_1.o: $(TOP_DIR)/types/src/sb_queue_SW_RawEthernetMessage_1.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE)


# monitor
ArduPilot_ArduPilot_MON.o: $(TOP_DIR)/components/ArduPilot_ArduPilot/src/ArduPilot_ArduPilot_MON.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/ArduPilot_ArduPilot/include

# user code
ArduPilot_ArduPilot_rust:
	make -C ${CRATES_DIR}/ArduPilot_ArduPilot

ArduPilot_ArduPilot.o: $(TOP_DIR)/components/ArduPilot_ArduPilot/src/ArduPilot_ArduPilot.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/ArduPilot_ArduPilot/include

# monitor
Firewall_Firewall_MON.o: $(TOP_DIR)/components/Firewall_Firewall/src/Firewall_Firewall_MON.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/Firewall_Firewall/include

# user code
Firewall_Firewall_rust:
	make -C ${CRATES_DIR}/Firewall_Firewall

Firewall_Firewall.o: $(TOP_DIR)/components/Firewall_Firewall/src/Firewall_Firewall.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/Firewall_Firewall/include

# monitor
LowLevelEthernetDriver_LowLevelEthernetDriver_MON.o: $(TOP_DIR)/components/LowLevelEthernetDriver_LowLevelEthernetDriver/src/LowLevelEthernetDriver_LowLevelEthernetDriver_MON.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/LowLevelEthernetDriver_LowLevelEthernetDriver/include

# user code
LowLevelEthernetDriver_LowLevelEthernetDriver_rust:
	make -C ${CRATES_DIR}/LowLevelEthernetDriver_LowLevelEthernetDriver

LowLevelEthernetDriver_LowLevelEthernetDriver.o: $(TOP_DIR)/components/LowLevelEthernetDriver_LowLevelEthernetDriver/src/LowLevelEthernetDriver_LowLevelEthernetDriver.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)/components/LowLevelEthernetDriver_LowLevelEthernetDriver/include

pacer.o: $(TOP_DIR)/components/pacer/src/pacer.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@ -I$(TOP_INCLUDE)

ArduPilot_ArduPilot_MON.elf: ArduPilot_ArduPilot_MON.o
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

ArduPilot_ArduPilot.elf: $(UTIL_OBJS) $(TYPE_OBJS) ArduPilot_ArduPilot_rust ArduPilot_ArduPilot.o
	$(LD) $(LDFLAGS) -L ${CRATES_DIR}/ArduPilot_ArduPilot/target/aarch64-unknown-none/release $(filter %.o, $^) $(LIBS) -lArduPilot_ArduPilot -o $@

Firewall_Firewall_MON.elf: Firewall_Firewall_MON.o
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

Firewall_Firewall.elf: $(UTIL_OBJS) $(TYPE_OBJS) Firewall_Firewall_rust Firewall_Firewall.o
	$(LD) $(LDFLAGS) -L ${CRATES_DIR}/Firewall_Firewall/target/aarch64-unknown-none/release $(filter %.o, $^) $(LIBS) -lFirewall_Firewall -o $@

LowLevelEthernetDriver_LowLevelEthernetDriver_MON.elf: LowLevelEthernetDriver_LowLevelEthernetDriver_MON.o
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

LowLevelEthernetDriver_LowLevelEthernetDriver.elf: $(UTIL_OBJS) $(TYPE_OBJS) LowLevelEthernetDriver_LowLevelEthernetDriver_rust LowLevelEthernetDriver_LowLevelEthernetDriver.o
	$(LD) $(LDFLAGS) -L ${CRATES_DIR}/LowLevelEthernetDriver_LowLevelEthernetDriver/target/aarch64-unknown-none/release $(filter %.o, $^) $(LIBS) -lLowLevelEthernetDriver_LowLevelEthernetDriver -o $@

pacer.elf: $(UTIL_OBJS) $(TYPE_OBJS) pacer.o
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

$(IMAGE_FILE): $(IMAGES) $(SYSTEM_FILE)
	$(MICROKIT_TOOL) $(SYSTEM_FILE) --search-path $(TOP_BUILD_DIR) --board $(MICROKIT_BOARD) --config $(MICROKIT_CONFIG) -o $(IMAGE_FILE) -r $(REPORT_FILE)


qemu: $(IMAGE_FILE)
	$(QEMU) -machine virt,virtualization=on \
			-cpu cortex-a53 \
			-serial mon:stdio \
			-device loader,file=$(IMAGE_FILE),addr=0x70000000,cpu-num=0 \
			-m size=2G \
			-nographic

clean::
	rm -f ${(oFiles, " ")}

clobber:: clean
	rm -f ArduPilot_ArduPilot.elf ArduPilot_ArduPilot_MON.elf Firewall_Firewall.elf Firewall_Firewall_MON.elf LowLevelEthernetDriver_LowLevelEthernetDriver.elf LowLevelEthernetDriver_LowLevelEthernetDriver_MON.elf pacer.elf ${IMAGE_FILE} ${REPORT_FILE}
