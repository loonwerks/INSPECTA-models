// Do not edit this file as it will be overwritten if codegen is rerun

//! C-interface for the component.
//! This code must be unsafe.
//! Assumptions about correctness are introduced and need to be verified by other means.

use data::*;

#[cfg(test)]
use std::sync::Mutex;

#[cfg(not(test))]
extern "C" {
  fn get_EthernetFramesTxIn(value: *mut SW::RawEthernetMessage) -> bool;
  fn put_EthernetFramesRxOut(value: *mut SW::RawEthernetMessage) -> bool;
  fn put_EthernetFramesTxOut(value: *mut SW::RawEthernetMessage) -> bool;
  fn get_EthernetFramesRxIn(value: *mut SW::RawEthernetMessage) -> bool;
}

pub fn unsafe_get_EthernetFramesTxIn() -> Option<SW::RawEthernetMessage> 
 {
   unsafe {
     let value: *mut SW::RawEthernetMessage = &mut [0; SW::SW_RawEthernetMessage_DIM_0];
     if (get_EthernetFramesTxIn(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

pub fn unsafe_put_EthernetFramesRxOut(value: &SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     return put_EthernetFramesRxOut(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);
   }
 }

pub fn unsafe_put_EthernetFramesTxOut(value: &SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     return put_EthernetFramesTxOut(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);
   }
 }

pub fn unsafe_get_EthernetFramesRxIn() -> Option<SW::RawEthernetMessage> 
 {
   unsafe {
     let value: *mut SW::RawEthernetMessage = &mut [0; SW::SW_RawEthernetMessage_DIM_0];
     if (get_EthernetFramesRxIn(value)) {
       return Some(*value);
     } else {
       return None;
     }
   }
 }

//////////////////////////////////////////////////////////////////////////////////
// Testing Versions
//////////////////////////////////////////////////////////////////////////////////

#[cfg(test)]
lazy_static::lazy_static! {
  // simulate the global C variables that point to the microkit shared memory regions.  In a full
  // microkit system we would be able to mutate the shared memory for out ports since they're r/w,
  // but we couldn't do that for in ports since they are read-only
  pub static ref IN_EthernetFramesTxIn: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);
  pub static ref OUT_EthernetFramesRxOut: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);
  pub static ref OUT_EthernetFramesTxOut: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);
  pub static ref IN_EthernetFramesRxIn: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);
}

#[cfg(test)]
pub fn initialize_test_globals() {
  unsafe {
    *IN_EthernetFramesTxIn.lock().unwrap() = None;
    *OUT_EthernetFramesRxOut.lock().unwrap() = None;
    *OUT_EthernetFramesTxOut.lock().unwrap() = None;
    *IN_EthernetFramesRxIn.lock().unwrap() = None;
  }
}

#[cfg(test)]
pub fn get_EthernetFramesTxIn(value: *mut SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     match *IN_EthernetFramesTxIn.lock().unwrap() {
       Some(v) => {
         *value = v;
         return true;
       },
       None => return false,
     }
   }
 }

#[cfg(test)]
pub fn put_EthernetFramesRxOut(value: *mut SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesRxOut.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn put_EthernetFramesTxOut(value: *mut SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     *OUT_EthernetFramesTxOut.lock().unwrap() = Some(*value);
     return true;
   }
 }

#[cfg(test)]
pub fn get_EthernetFramesRxIn(value: *mut SW::RawEthernetMessage) -> bool 
 {
   unsafe {
     match *IN_EthernetFramesRxIn.lock().unwrap() {
       Some(v) => {
         *value = v;
         return true;
       },
       None => return false,
     }
   }
 }
