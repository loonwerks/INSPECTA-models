// #Sireum

package firewall.SW

import org.sireum._
import firewall._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object u16Array {
  // Import I's interpolator to create instances of I.  For e.g.,
  //   import SW.u16Array.I._
  //   object Example {
  //     val value: SW.u16Array.I = i"0"
  //     ...
  //
  // Use the I0F3536 method when using multiple <array-def>.I indexing types in the same
  // context.  Alternatively, rename I and use its fromZ method when using multiple
  //   import SW.u16Array.{I => I0}
  //   import <other-array-def>.{I => I1}
  //   object Example {
  //     val value: SW.u16Array.I = I0.fromZ(0)
  //     ...

  @range(min = 0, max = 3, index = T) class I

  @pure def I0F3536(z: Z): I = {
    Contract(
      Requires(I.Min.toZ <= z && z <= I.Max.toZ),
      Ensures(Res[I].toZ == z)
    )
    return I.fromZ(z)
  }

  def example(): SW.u16Array = {
    return SW.u16Array(
      value = IS.create[I, Base_Types.Unsigned_16](4, Base_Types.Unsigned_16_example()))
  }
}

@datatype class u16Array(
  val value: IS[u16Array.I, U16]) {
}

object u16Array_Payload {
  def example(): u16Array_Payload = {
    return u16Array_Payload(SW.u16Array.example())
  }
}

@datatype class u16Array_Payload(value: SW.u16Array) extends art.DataContent
